{
    "docs": [
        {
            "location": "/", 
            "text": "Apprendre \u00e0 programmer\n#\n\n\nPr\u00e9face\n#\n\n\nTu m'as dit vouloir \u00ab apprendre \u00e0 coder \u00bb. Je t'ai dis que c'\u00e9tait possible en 5 jours. \nIl faut compter l'\u00e9quivalent de 30h tout compris (cours, exercices, r\u00e9visions).\n\n\nLorsque le moment s'y pr\u00eatera le mieux (ex: un matin \u00e0 partir de 7h), prends un stylo, un clavier, attache ta ceinture... c'est parti !", 
            "title": "Accueil"
        }, 
        {
            "location": "/#apprendre-a-programmer", 
            "text": "", 
            "title": "Apprendre \u00e0 programmer"
        }, 
        {
            "location": "/#preface", 
            "text": "Tu m'as dit vouloir \u00ab apprendre \u00e0 coder \u00bb. Je t'ai dis que c'\u00e9tait possible en 5 jours. \nIl faut compter l'\u00e9quivalent de 30h tout compris (cours, exercices, r\u00e9visions).  Lorsque le moment s'y pr\u00eatera le mieux (ex: un matin \u00e0 partir de 7h), prends un stylo, un clavier, attache ta ceinture... c'est parti !", 
            "title": "Pr\u00e9face"
        }, 
        {
            "location": "/01-generalites/", 
            "text": "\ufeffG\u00e9n\u00e9ralit\u00e9s\n#\n\n\nQuelques d\u00e9finitions\n#\n\n\nBon, donc tu veux \nvraiment\n apprendre \u00e0 programmer ?\n\n\nDans \u00ab programmer \u00bb il est important de distinguer deux aspects : \n\nl'algorithmique\n et les \nlangages\n de programmation. \n\n\nL'algorithmique\n est un peu l'\u00e9quivalent de la logique pour formuler des id\u00e9es l\u00e0 ou les \nlangages\n se basent chacun sur une syntaxe et une grammaire permettant de les v\u00e9hiculer et se faire comprendre. \n\u00c9videmment, on ne peut pas formuler d'id\u00e9es sans mots, et utiliser des mots sans id\u00e9es ne fonctionne pas tr\u00e8s bien non plus...\n\n\nRe-situons tout \u00e7a dans le contexte : l'objectif de l'informatique, c'est obtenir de la machine qu'elle effectue un travail \u00e0 notre place (pour le meilleur et pour le pire...). Mais alors, comment lui expliquer comment elle doit s'y prendre ? Comment lui dire ? Comment lui apprendre ? Comment s'assurer qu'elle fait ce travail ? Et si on y arrive... fera-t-elle ce travail aussi bien que nous ? Mieux que nous ?\n\n\nBref. Dans ce qui suit, je vais donc te faire une introduction \u00e0 la programmation en plusieurs \u00e9tapes : \n\n\n\n\nd'abord nous ferons des dessins, \n\n\nensuite nous utiliserons une forme de fran\u00e7ais minimaliste pour d\u00e9crire nos id\u00e9es,\n\n\nensuite nous utiliserons JavaScript pour communiquer ces id\u00e9es \u00e0 l'ordinateur.\n\n\n\n\nPourquoi Javascript ? Parce que : \n\n\n\n\nc'est un langage que l'on retrouve partout : front-end web, applications mobiles traitements m\u00e9tier sur les serveurs et depuis peu dans l'embarqu\u00e9 !\n\n\nc'est un langage \u00e0 la mode : il y a de la demande pour du web et des app mobiles, les gens paient pour \u00e7a, la technologie \u00e9volue et se bonnifie,\n\n\nc'est un langage facile \u00e0 apprendre !\n\n\n\n\nAlgori...quoi ?\n#\n\n\nAlgorithmes. Algorithmique. Algorithmie.\n\n\nSans le savoir tu en as d\u00e9j\u00e0 utilis\u00e9 :\n\n\n\n\ndes briques de LEGO\n pour faire une caserne de pompiers\n\n\ndes planches et des vis pour monter une \u00e9tag\u00e8re BILLY\n IKEA\n\n\ndes ingr\u00e9dients pour faire un g\u00e2teau\n\n\n\n\nDans tout ces cas l\u00e0, tu as suivi un plan, un guide de montage, une recette. Tu \u00e9tais dans une posture d'ex\u00e9cution, qui t'a permis de \"suivre\" le travail imagin\u00e9 par quelqu'un d'autre afin de le reproduire.\n\n\nCependant, ceux qui ont con\u00e7u cette caserne de pompier, cette \u00e9tag\u00e8re BILLY\n IKEA\n, ce g\u00e2teau... comment ont-il proc\u00e9d\u00e9 ? Quelle \u00e9tait la d\u00e9marche qui leur a permis, tout d'abord \nd'inventer\n un objet r\u00e9pondant \u00e0 leur besoin, ensuite de \nd\u00e9composer\n leur id\u00e9e, et enfin \nd'expliquer\n les \u00e9tapes n\u00e9cessaire \u00e0 sa r\u00e9alisation ?\n\n\nAu d\u00e9part on avait des composants ou des ingr\u00e9dients \u00e9parses,  ils ont \u00e9t\u00e9 assembl\u00e9s dans un certain ordre et d'une certaine fa\u00e7on, afin d'obtenir un r\u00e9sultat souhait\u00e9. Cette d\u00e9marche de r\u00e9solution de probl\u00e8mes et cette m\u00e9thodologie pour les d\u00e9composer en \u00e9tapes simples, c'est ce qu'en informatique on appelle l'algorithmique. \u00c9videmment \u00e7a peut s'appliquer \u00e0 bien d'autres sujets !\n\n\n\n\nLe lapin Blanc mit ses lunettes. \n\n\n \u00ab S'il plait \u00e0 votre majest\u00e9, demanda-t-il, par o\u00f9 dois-je commencer? \u00bb \n\n\n \u00ab Commencez par le commencement, dit d'un ton emprunt de gravit\u00e9, le Roi. \u00bb \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\nUne question d'\u00e9criture et de repr\u00e9sentations\n#\n\n\nPuisque dans un algorithme on trouve simplement des \u00e9tapes et des actions, il peut avoir plusieurs repr\u00e9sentations  : \n\n\n\n\nun \nalgorigramme\n : un diagramme d'\u00e9tapes successives repr\u00e9sent\u00e9 avec des rectangles, des bulles, des losanges et des fl\u00e8ches, \n\n\ndu \npseudo-code\n : une \u00e9criture en quasi-fran\u00e7ais d\u00e9sambigu\u00efs\u00e9\n\n\ndu \ncode source\n : une explication dans un langage informatique non-ambig\u00fc permettant \u00e0 l'ordinateur de le transformer en quelque chose qu'il comprends.\n\n\ndu \nbyte-code\n : suite d'instructions binaires pour un logiciel interpr\u00e8te\n\n\ndu \ncode machine\n : suite d'instructions binaires envoy\u00e9es au processeur et \u00e0 la m\u00e9moire.\n\n\n\n\nL'algorigramme\n et le \npseudo-code\n sont l\u00e0 essentiellement pour des besoins \u00e9ducatifs, mais il existe d'autres formes de diagrammes qui sont \"normalis\u00e9s\" et permettent \u00e9galement de repr\u00e9senter des programmes. On parlera alors de repr\u00e9sentation UML, Merise, SDL, etc. Ces diff\u00e9rents langages graphiques  permettent d'avoir une description et d'organiser un projet informatique entre plusieurs intervenants de m\u00e9tiers diff\u00e9rents et leur permettre de communiquer.\n\n\nLe \ncode machine\n (ou binaire ex\u00e9cutable) c'est ce que la machine comprends \"en vrai\": c'est la suite d'op\u00e9rations que le processeur doit faire, et les diff\u00e9rents \u00e9tats de la m\u00e9moire \u00e0 lui faire manipuler.\n\nCe code machine est sp\u00e9cifique \u00e0 un mod\u00e8le de processeur donn\u00e9. Il est donc incompatible avec un autre mod\u00e8le de processeur!\n\n\nAssez vite on se rend compte que c'est assez ingrat d'\u00e9crire un programme de cette fa\u00e7on l\u00e0 ! C'est pourtant comme cela qu'il faut \u00e9crire le premier programme sur un processeur donn\u00e9, afin qu'il s'allume et serve \u00e0 quelque chose. \n\n\nPour \u00e9viter d'avoir \u00e0 faire cela pour tout le reste des programmes, on invent\u00e9 les \ncompilateurs\n : c'est \u00e0 dire des outils capables de prendre un autre programme, \u00e9crit dans un langage de programmation par un humain, et de les transcrire automatiquement en code machine, pour obtenir des binaires ex\u00e9cutables sans avoir \u00e0 les \u00e9crire soi-m\u00eame en code machine. On a donc du fabriquer un compilateur par langage de programmation... et par type de machine.\n\n\nIl faut savoir que lorsqu'on a du code machine entre les mains, c'est tr\u00e8s compliqu\u00e9 (voire impossible) de revenir au code source de d\u00e9part... c'est comme essayer de retrouver les ingr\u00e9dients et le dosage pr\u00e9cis d'un plat rien qu'en le go\u00fbtant ! Il faut \u00eatre expert go\u00fbteur, expert cuisinier... et l\u00e0 encore, c'est dur ! Cette propri\u00e9t\u00e9 du code machine est \u00e9videmment une aubaine pour les gens qui veulent diffuser leur programme sans montrer son fonctionnement.\n\n\nMalgr\u00e9 cela, il y a un hic ! L'auteur (ou l'\u00e9diteur) doivent compiler leur code source en binaire ex\u00e9cutable pour chaque nouvelle plate-forme mat\u00e9rielle qui voit le jour, sous peine de voit leur programme \u00eatre incompatible chez les usagers des nouvelles plates-formes ! Et \u00e7a n\u00e9cessite donc beaucoup de travail (et donc des co\u00fbts) !\n\n\nL\u00e0 encore, des petits malins se sont dit qu'il \u00e9tait peut-\u00eatre plus pratique d'avoir un \"interpr\u00e8te\" ou \ninterpr\u00e9teur\n, c'est \u00e0 dire un programme binaire sp\u00e9cifique \u00e0 chaque machine, capable de lire du code source et de le transformer au fur et \u00e0 mesure en instructions pour le processeur. Ainsi, plus besoin de compilation, et le programme est compatible avec toutes les machines o\u00f9 se trouve un interpr\u00e9teur pour le langage dans lequel il est \u00e9crit ! \n\n\nMalheureusement, il y a deux soucis avec les interpr\u00e9teurs : transcrire \"\u00e0 la vol\u00e9e\" du code source, cela n\u00e9cessite du temps... Par cons\u00e9quent un interpr\u00e8te sera donc toujours plus lent qu'un programme binaire ex\u00e9cutable. En plus, pour utiliser un programme avec un interpr\u00e9teur il faut diffuser le code source du programme ! Autant \u00e7a ne g\u00e8ne pas les adeptes du partage, autant les gens voulant garder secrets leurs algorithmes n'ont pas trouv\u00e9 cela g\u00e9nial...\n\n\nC'est l\u00e0 qu'est apparu le \nbyte-code\n. Le byte-code, c'est du code machine pour une machine \"virtuelle\", c'est \u00e0 dire une machine qui n'existe pas. Son code machine hypoth\u00e9tique serait minimaliste et transposable facilement sur n'importe quel processeur, avec moins d'efforts que pour un langage de programmation. L'id\u00e9e est ici de compiler quand le code source en du byte-code, et d'avoir un interpr\u00e9teur de byte-code sur chaque plate-forme. \n\n\nAvec cette technique, on obtient une vitesse de fonctionnement raisonnable, une compatibilit\u00e9 avec toutes les machines qui poss\u00e8dent un interpr\u00e9teur bytecode et aucune fa\u00e7on de remonter au code source de d\u00e9part ! C'est la strat\u00e9gie utilis\u00e9e par Java ou .NET . \n\n\nBref. Lorsque l'on programme, on \u00e9crit donc en g\u00e9n\u00e9ral du \ncode source\n, dans un langage de programmation. Mais rien n'emp\u00eache de faire un diagramme pour se fixer les id\u00e9es ! \u00c7a arrive m\u00eame aux meilleurs professionnels apr\u00e8s plusieurs d\u00e9c\u00e9nies de pratique.\n\n\n\n\n\u00ab Je crains bien de ne pouvoir m'expliquer moi-m\u00eame... car je ne suis pas moi-m\u00eame, vous comprenez. \u00bb \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\n\u00c0 suivre ?\n#\n\n\nAvant de continuer, j'ai besoin d'en savoir plus sur toi ! D\u00e9j\u00e0 parce que je suis curieux (eh oui !) et parce que \u00e7a me permettra d'adapter sur-mesure la suite du cours :\n\n\n\n\npourquoi est-ce que la technologie t'int\u00e9resse ? \n\n\ncomment est-ce que tu imagines le fait de coder ? \n\n\nqu'est ce que tu imagines que cela peut t'apporter ?\n\n\n\n\nBref. Si tu veux la suite, envoie-moi un email avec le texte \n\"JE VEUX LA SUITE !\"\n dedans :-)", 
            "title": "01. G\u00e9n\u00e9ralit\u00e9s"
        }, 
        {
            "location": "/01-generalites/#generalites", 
            "text": "", 
            "title": "\ufeffG\u00e9n\u00e9ralit\u00e9s"
        }, 
        {
            "location": "/01-generalites/#quelques-definitions", 
            "text": "Bon, donc tu veux  vraiment  apprendre \u00e0 programmer ?  Dans \u00ab programmer \u00bb il est important de distinguer deux aspects :  l'algorithmique  et les  langages  de programmation.   L'algorithmique  est un peu l'\u00e9quivalent de la logique pour formuler des id\u00e9es l\u00e0 ou les  langages  se basent chacun sur une syntaxe et une grammaire permettant de les v\u00e9hiculer et se faire comprendre. \n\u00c9videmment, on ne peut pas formuler d'id\u00e9es sans mots, et utiliser des mots sans id\u00e9es ne fonctionne pas tr\u00e8s bien non plus...  Re-situons tout \u00e7a dans le contexte : l'objectif de l'informatique, c'est obtenir de la machine qu'elle effectue un travail \u00e0 notre place (pour le meilleur et pour le pire...). Mais alors, comment lui expliquer comment elle doit s'y prendre ? Comment lui dire ? Comment lui apprendre ? Comment s'assurer qu'elle fait ce travail ? Et si on y arrive... fera-t-elle ce travail aussi bien que nous ? Mieux que nous ?  Bref. Dans ce qui suit, je vais donc te faire une introduction \u00e0 la programmation en plusieurs \u00e9tapes :    d'abord nous ferons des dessins,   ensuite nous utiliserons une forme de fran\u00e7ais minimaliste pour d\u00e9crire nos id\u00e9es,  ensuite nous utiliserons JavaScript pour communiquer ces id\u00e9es \u00e0 l'ordinateur.   Pourquoi Javascript ? Parce que :    c'est un langage que l'on retrouve partout : front-end web, applications mobiles traitements m\u00e9tier sur les serveurs et depuis peu dans l'embarqu\u00e9 !  c'est un langage \u00e0 la mode : il y a de la demande pour du web et des app mobiles, les gens paient pour \u00e7a, la technologie \u00e9volue et se bonnifie,  c'est un langage facile \u00e0 apprendre !", 
            "title": "Quelques d\u00e9finitions"
        }, 
        {
            "location": "/01-generalites/#algoriquoi", 
            "text": "Algorithmes. Algorithmique. Algorithmie.  Sans le savoir tu en as d\u00e9j\u00e0 utilis\u00e9 :   des briques de LEGO  pour faire une caserne de pompiers  des planches et des vis pour monter une \u00e9tag\u00e8re BILLY  IKEA  des ingr\u00e9dients pour faire un g\u00e2teau   Dans tout ces cas l\u00e0, tu as suivi un plan, un guide de montage, une recette. Tu \u00e9tais dans une posture d'ex\u00e9cution, qui t'a permis de \"suivre\" le travail imagin\u00e9 par quelqu'un d'autre afin de le reproduire.  Cependant, ceux qui ont con\u00e7u cette caserne de pompier, cette \u00e9tag\u00e8re BILLY  IKEA , ce g\u00e2teau... comment ont-il proc\u00e9d\u00e9 ? Quelle \u00e9tait la d\u00e9marche qui leur a permis, tout d'abord  d'inventer  un objet r\u00e9pondant \u00e0 leur besoin, ensuite de  d\u00e9composer  leur id\u00e9e, et enfin  d'expliquer  les \u00e9tapes n\u00e9cessaire \u00e0 sa r\u00e9alisation ?  Au d\u00e9part on avait des composants ou des ingr\u00e9dients \u00e9parses,  ils ont \u00e9t\u00e9 assembl\u00e9s dans un certain ordre et d'une certaine fa\u00e7on, afin d'obtenir un r\u00e9sultat souhait\u00e9. Cette d\u00e9marche de r\u00e9solution de probl\u00e8mes et cette m\u00e9thodologie pour les d\u00e9composer en \u00e9tapes simples, c'est ce qu'en informatique on appelle l'algorithmique. \u00c9videmment \u00e7a peut s'appliquer \u00e0 bien d'autres sujets !   Le lapin Blanc mit ses lunettes.    \u00ab S'il plait \u00e0 votre majest\u00e9, demanda-t-il, par o\u00f9 dois-je commencer? \u00bb    \u00ab Commencez par le commencement, dit d'un ton emprunt de gravit\u00e9, le Roi. \u00bb   Lewis Carroll, Les aventures d'Alice au pays des merveilles", 
            "title": "Algori...quoi ?"
        }, 
        {
            "location": "/01-generalites/#une-question-decriture-et-de-representations", 
            "text": "Puisque dans un algorithme on trouve simplement des \u00e9tapes et des actions, il peut avoir plusieurs repr\u00e9sentations  :    un  algorigramme  : un diagramme d'\u00e9tapes successives repr\u00e9sent\u00e9 avec des rectangles, des bulles, des losanges et des fl\u00e8ches,   du  pseudo-code  : une \u00e9criture en quasi-fran\u00e7ais d\u00e9sambigu\u00efs\u00e9  du  code source  : une explication dans un langage informatique non-ambig\u00fc permettant \u00e0 l'ordinateur de le transformer en quelque chose qu'il comprends.  du  byte-code  : suite d'instructions binaires pour un logiciel interpr\u00e8te  du  code machine  : suite d'instructions binaires envoy\u00e9es au processeur et \u00e0 la m\u00e9moire.   L'algorigramme  et le  pseudo-code  sont l\u00e0 essentiellement pour des besoins \u00e9ducatifs, mais il existe d'autres formes de diagrammes qui sont \"normalis\u00e9s\" et permettent \u00e9galement de repr\u00e9senter des programmes. On parlera alors de repr\u00e9sentation UML, Merise, SDL, etc. Ces diff\u00e9rents langages graphiques  permettent d'avoir une description et d'organiser un projet informatique entre plusieurs intervenants de m\u00e9tiers diff\u00e9rents et leur permettre de communiquer.  Le  code machine  (ou binaire ex\u00e9cutable) c'est ce que la machine comprends \"en vrai\": c'est la suite d'op\u00e9rations que le processeur doit faire, et les diff\u00e9rents \u00e9tats de la m\u00e9moire \u00e0 lui faire manipuler. \nCe code machine est sp\u00e9cifique \u00e0 un mod\u00e8le de processeur donn\u00e9. Il est donc incompatible avec un autre mod\u00e8le de processeur!  Assez vite on se rend compte que c'est assez ingrat d'\u00e9crire un programme de cette fa\u00e7on l\u00e0 ! C'est pourtant comme cela qu'il faut \u00e9crire le premier programme sur un processeur donn\u00e9, afin qu'il s'allume et serve \u00e0 quelque chose.   Pour \u00e9viter d'avoir \u00e0 faire cela pour tout le reste des programmes, on invent\u00e9 les  compilateurs  : c'est \u00e0 dire des outils capables de prendre un autre programme, \u00e9crit dans un langage de programmation par un humain, et de les transcrire automatiquement en code machine, pour obtenir des binaires ex\u00e9cutables sans avoir \u00e0 les \u00e9crire soi-m\u00eame en code machine. On a donc du fabriquer un compilateur par langage de programmation... et par type de machine.  Il faut savoir que lorsqu'on a du code machine entre les mains, c'est tr\u00e8s compliqu\u00e9 (voire impossible) de revenir au code source de d\u00e9part... c'est comme essayer de retrouver les ingr\u00e9dients et le dosage pr\u00e9cis d'un plat rien qu'en le go\u00fbtant ! Il faut \u00eatre expert go\u00fbteur, expert cuisinier... et l\u00e0 encore, c'est dur ! Cette propri\u00e9t\u00e9 du code machine est \u00e9videmment une aubaine pour les gens qui veulent diffuser leur programme sans montrer son fonctionnement.  Malgr\u00e9 cela, il y a un hic ! L'auteur (ou l'\u00e9diteur) doivent compiler leur code source en binaire ex\u00e9cutable pour chaque nouvelle plate-forme mat\u00e9rielle qui voit le jour, sous peine de voit leur programme \u00eatre incompatible chez les usagers des nouvelles plates-formes ! Et \u00e7a n\u00e9cessite donc beaucoup de travail (et donc des co\u00fbts) !  L\u00e0 encore, des petits malins se sont dit qu'il \u00e9tait peut-\u00eatre plus pratique d'avoir un \"interpr\u00e8te\" ou  interpr\u00e9teur , c'est \u00e0 dire un programme binaire sp\u00e9cifique \u00e0 chaque machine, capable de lire du code source et de le transformer au fur et \u00e0 mesure en instructions pour le processeur. Ainsi, plus besoin de compilation, et le programme est compatible avec toutes les machines o\u00f9 se trouve un interpr\u00e9teur pour le langage dans lequel il est \u00e9crit !   Malheureusement, il y a deux soucis avec les interpr\u00e9teurs : transcrire \"\u00e0 la vol\u00e9e\" du code source, cela n\u00e9cessite du temps... Par cons\u00e9quent un interpr\u00e8te sera donc toujours plus lent qu'un programme binaire ex\u00e9cutable. En plus, pour utiliser un programme avec un interpr\u00e9teur il faut diffuser le code source du programme ! Autant \u00e7a ne g\u00e8ne pas les adeptes du partage, autant les gens voulant garder secrets leurs algorithmes n'ont pas trouv\u00e9 cela g\u00e9nial...  C'est l\u00e0 qu'est apparu le  byte-code . Le byte-code, c'est du code machine pour une machine \"virtuelle\", c'est \u00e0 dire une machine qui n'existe pas. Son code machine hypoth\u00e9tique serait minimaliste et transposable facilement sur n'importe quel processeur, avec moins d'efforts que pour un langage de programmation. L'id\u00e9e est ici de compiler quand le code source en du byte-code, et d'avoir un interpr\u00e9teur de byte-code sur chaque plate-forme.   Avec cette technique, on obtient une vitesse de fonctionnement raisonnable, une compatibilit\u00e9 avec toutes les machines qui poss\u00e8dent un interpr\u00e9teur bytecode et aucune fa\u00e7on de remonter au code source de d\u00e9part ! C'est la strat\u00e9gie utilis\u00e9e par Java ou .NET .   Bref. Lorsque l'on programme, on \u00e9crit donc en g\u00e9n\u00e9ral du  code source , dans un langage de programmation. Mais rien n'emp\u00eache de faire un diagramme pour se fixer les id\u00e9es ! \u00c7a arrive m\u00eame aux meilleurs professionnels apr\u00e8s plusieurs d\u00e9c\u00e9nies de pratique.   \u00ab Je crains bien de ne pouvoir m'expliquer moi-m\u00eame... car je ne suis pas moi-m\u00eame, vous comprenez. \u00bb   Lewis Carroll, Les aventures d'Alice au pays des merveilles", 
            "title": "Une question d'\u00e9criture et de repr\u00e9sentations"
        }, 
        {
            "location": "/01-generalites/#a-suivre", 
            "text": "Avant de continuer, j'ai besoin d'en savoir plus sur toi ! D\u00e9j\u00e0 parce que je suis curieux (eh oui !) et parce que \u00e7a me permettra d'adapter sur-mesure la suite du cours :   pourquoi est-ce que la technologie t'int\u00e9resse ?   comment est-ce que tu imagines le fait de coder ?   qu'est ce que tu imagines que cela peut t'apporter ?   Bref. Si tu veux la suite, envoie-moi un email avec le texte  \"JE VEUX LA SUITE !\"  dedans :-)", 
            "title": "\u00c0 suivre ?"
        }, 
        {
            "location": "/02-algorithmique/", 
            "text": "\ufeffG\u00e9n\u00e9ralit\u00e9s (suite)\n#\n\n\nTu es toujours l\u00e0 ? Toujours motiv\u00e9e ? Trop bien ! Reprenons ! \n\n\nUn travail \u00e0 vocation universelle\n#\n\n\nTu as vu dans le chapitre pr\u00e9c\u00e9dent que la programmation est l'art de m\u00ealer l'algorithmique \u00e0 un ou plusieurs langages.\n\n\nL'algorithmique est une question de m\u00e9thode (beaucoup) et de logique (un peu). Elle est \nind\u00e9pendante des langages\n de programmation et \nind\u00e9pendante des machines\n qui ex\u00e9cuteront le programme final. En revanche, le langage de programmation, lui, est li\u00e9 au cot\u00e9 physique et mat\u00e9riel de la machine car il doit \u00eatre compris et ex\u00e9cut\u00e9 par cette derni\u00e8re.\n\n\nOn va donc distinguer deux types de langages : \n\n\n\n\nles \nlangages bas niveau\n (ex: Assembleur, C ...) : ils permettent la manipulation des aspects mat\u00e9riels de la machine sur laquelle le programme est ex\u00e9cut\u00e9. Ce sont des langages \nterre \u00e0 terre\n, qui n\u00e9cessitent un micro-management de chaque chose : m\u00e9moire, p\u00e9riph\u00e9riques, registre processeur, interruptions, r\u00e9seau, etc. C'est \u00e0 la fois fastidieux, mais c'est terriblement pr\u00e9cis et puissant.\n\n\nles \nlangages de haut niveau\n (ex: Python, Javascript ...) : ils masquent le cot\u00e9 technique au profit d'une vision plus abstraite qui leur permettra plus facilement de manipuler des fichiers, des composants graphiques, des donn\u00e9es, etc. Ces langages font confiance au syst\u00e8me pour la gestion de la m\u00e9moire et du reste. Ils vont s'occuper essentiellement des aspects m\u00e9tiers.\n\n\n\n\nHaut et bas niveau n'ont pas de connotation p\u00e9jorative et n'ont \u00e9videmment rien \u00e0 voir avec les comp\u00e9tences techniques n\u00e9cessaires \u00e0 les programmer ! Il s'agit simplement d'une question d'efficacit\u00e9 sur un domaine particulier... et la facilit\u00e9 \u00e0 g\u00e9rer contraintes qui vont avec. On pourra toujours faire des choses de bas niveau avec un langage de haut niveau, ou des choses de haut niveau avec un langage de bas niveau. C'est juste \nbeaucoup\n moins pratique.\n\n\nEn g\u00e9n\u00e9ral, les langages de bas niveau sont des langages compil\u00e9s \n car d\u00e9pendants d'une machine sp\u00e9cifique \n alors que les langages de haut niveau sont souvent des langages interpr\u00e9t\u00e9s. \n\n\n\n\nLa Reine avait une seule m\u00e9thode pour r\u00e9soudre toutes les difficult\u00e9s, petites ou grosses.\n\n\n \u00ab Qu'on lui coupe la t\u00eate ! \u00bb dit-elle sans m\u00eame lever les yeux. \n\n\nLewis Caroll, Alice au pays des merveilles\n\n\n\n\nProbl\u00e8mes fondamentaux en algorithmique\n#\n\n\nProgrammer, c'est comme r\u00e9soudre un casse t\u00eate. C'est un peu un d\u00e9fi qui n\u00e9cessite d'inventer une solution face \u00e0 un probl\u00e8me ou une situation donn\u00e9e. Reste \u00e0 le faire bien. Lorsqu'on programme, \u00e0 un moment ou un autre, on se posera des questions sur la \ncalculabilit\u00e9\n, la \ncomplexit\u00e9\n ou la \ncorrection\n de l'algorithme que l'on est en train de concevoir.\n\n\nLa \ncalculabilit\u00e9\n est la capacit\u00e9 \u00e0 calculer un r\u00e9sultat ou une solution : Pour une t\u00e2che donn\u00e9e, existe-t-il un algorithme qui la r\u00e9solve ? Existe-t-il des t\u00e2ches pour lesquelles il n'existe aucun algorithme ? Comment savoir si l'on est dans l'un ou l'autre des cas ?\n\n\nLa \ncomplexit\u00e9\n lie le nombre d'op\u00e9rations ex\u00e9cut\u00e9es par l'algorithme \u00e0 la taille ou la quantit\u00e9 des donn\u00e9es qu'il manipule. C'est donc une question de performance et d'optimisation : en combien de temps un algorithme va-t-il atteindre le r\u00e9sultat pr\u00e9vu ? De quel espace (m\u00e9moire) a-t-il besoin pour faire son travail ? \n\n\nLorsqu'on parle de complexit\u00e9, on utilise la notation \nO(...)\n pour parler des diff\u00e9rence de complexit\u00e9 d'un algorithme. Voici les principaux cas :\n\n\n\n\n\n\nO(1)\n : l'algorithme en temps constant. C'est excellent ! Il prends toujours le m\u00eame temps quelle que soit la taille ou la quantit\u00e9 de donn\u00e9es qu'il manipule.\n\n\n\n\n\n\nO(N)\n : l'algorithme en temps lin\u00e9aire. C'est moyen. Il prends un temps proportionnel \u00e0 la quantit\u00e9 de donn\u00e9es manipul\u00e9es.\n\n\n\n\n\n\nO(log N)\n : l'algorithme est en temps logarithmique. C'est tr\u00e8s bien ! Il prends moins de temps qu'un parcours complet des donn\u00e9es.\n\n\n\n\n\n\nO(N*N*..)\n : l'algorithme est en temps polynomial. C'est pas terrible. Il prends un temps qui est le carr\u00e9, le cube ou autre polyn\u00f4me de la quantit\u00e9 de donn\u00e9es manipul\u00e9es.\n\n\n\n\n\n\nO(exp(N))\n : l'algorithme est en temps exponentiel. C'est pire que tout ! Il y a de fortes chances que l'on n'obtienne pas les r\u00e9sultats dans un temps raisonnable (temps allou\u00e9 au projet, vie humaine, \u00e2ge de l'univers, etc.) ;-(\n\n\n\n\n\n\nEnfin la \ncorrection\n c'est pouvoir prouver qu'un algorithme r\u00e9pondre bien au besoin pour lequel il a \u00e9t\u00e9 con\u00e7u... et c'est loin d'\u00eatre \u00e9vident !\n\n\n\n\n\u00ab \n Voudriez-vous me dire, s'il vous pla\u00eet, par o\u00f9 je dois m'en aller d'ici ? \n\n\n Cela d\u00e9pend beaucoup de l'endroit o\u00f9 tu veux aller. \n\n\n Peu m'importe l'endroit... \n\n\n En ce cas, peu importe la route que tu prendras.  \n\n\n ... pourvu que j'arrive quelque part \u00bb, ajouta Alice en guise d'explication. \n\n\n \u00ab Oh, tu ne manqueras pas d'arriver quelque part, si tu marches assez longtemps. \u00bb\n\n\n\n\n\u00c0 suivre ?\n#\n\n\nOuf. Jusque l\u00e0 j'ai essay\u00e9 de poser le contexte, un peu de culture g\u00e9n\u00e9rale et du vocabulaire. Normalement on n'abordera plus ces sujets (\u00e0 moins que ta curiosit\u00e9 ne prenne le dessus... et que je me laisse faire).\n\n\nAu prochain chapitre on plongera dans les algorigrammes et on commencera \u00e0 dessiner nos id\u00e9es.\n\n\n\n\nEst-ce que \u00e7a va jusque l\u00e0 ? \n\n\nEn terme de volume, est ce que c'est trop long ? Trop court ?\n\n\nEst-ce que tu as des questions ou des trucs que tu as envie de dire ? :-P\n\n\n\n\n\u00c7a te botte toujours ? Tu veux la suite ? Envoie-moi un e-mail avec le texte \n\"JE VEUX LA SUITE !\"\n :-)\n\n\n\n\nProgrammer peut entra\u00eener de graves troubles de la vie sociale\n\n\nEn cas d'apparition des sympt\u00f4mes suivants :\n impossibilit\u00e9 de r\u00e9sister aux d\u00e9fis logiques, envie de dialoguer avec son programme, veill\u00e9e tardive devant son \u00e9cran, recherche compulsive sur StackOverflow, r\u00e9flexions nocturne sur un bug, parler d'un bug \u00e0 ses proches, dire \u00e0 quelqu'un qu'on arrive et arriver 1h apr\u00e8s, essayer d'automatiser la moindre t\u00e2che... n'essaye \npas\n de consulter un sp\u00e9cialiste, il est trop tard, tu \u00eates foutue ! ;-)", 
            "title": "02. G\u00e9n\u00e9ralit\u00e9s (partie 2)"
        }, 
        {
            "location": "/02-algorithmique/#generalites-suite", 
            "text": "Tu es toujours l\u00e0 ? Toujours motiv\u00e9e ? Trop bien ! Reprenons !", 
            "title": "\ufeffG\u00e9n\u00e9ralit\u00e9s (suite)"
        }, 
        {
            "location": "/02-algorithmique/#un-travail-a-vocation-universelle", 
            "text": "Tu as vu dans le chapitre pr\u00e9c\u00e9dent que la programmation est l'art de m\u00ealer l'algorithmique \u00e0 un ou plusieurs langages.  L'algorithmique est une question de m\u00e9thode (beaucoup) et de logique (un peu). Elle est  ind\u00e9pendante des langages  de programmation et  ind\u00e9pendante des machines  qui ex\u00e9cuteront le programme final. En revanche, le langage de programmation, lui, est li\u00e9 au cot\u00e9 physique et mat\u00e9riel de la machine car il doit \u00eatre compris et ex\u00e9cut\u00e9 par cette derni\u00e8re.  On va donc distinguer deux types de langages :    les  langages bas niveau  (ex: Assembleur, C ...) : ils permettent la manipulation des aspects mat\u00e9riels de la machine sur laquelle le programme est ex\u00e9cut\u00e9. Ce sont des langages  terre \u00e0 terre , qui n\u00e9cessitent un micro-management de chaque chose : m\u00e9moire, p\u00e9riph\u00e9riques, registre processeur, interruptions, r\u00e9seau, etc. C'est \u00e0 la fois fastidieux, mais c'est terriblement pr\u00e9cis et puissant.  les  langages de haut niveau  (ex: Python, Javascript ...) : ils masquent le cot\u00e9 technique au profit d'une vision plus abstraite qui leur permettra plus facilement de manipuler des fichiers, des composants graphiques, des donn\u00e9es, etc. Ces langages font confiance au syst\u00e8me pour la gestion de la m\u00e9moire et du reste. Ils vont s'occuper essentiellement des aspects m\u00e9tiers.   Haut et bas niveau n'ont pas de connotation p\u00e9jorative et n'ont \u00e9videmment rien \u00e0 voir avec les comp\u00e9tences techniques n\u00e9cessaires \u00e0 les programmer ! Il s'agit simplement d'une question d'efficacit\u00e9 sur un domaine particulier... et la facilit\u00e9 \u00e0 g\u00e9rer contraintes qui vont avec. On pourra toujours faire des choses de bas niveau avec un langage de haut niveau, ou des choses de haut niveau avec un langage de bas niveau. C'est juste  beaucoup  moins pratique.  En g\u00e9n\u00e9ral, les langages de bas niveau sont des langages compil\u00e9s   car d\u00e9pendants d'une machine sp\u00e9cifique   alors que les langages de haut niveau sont souvent des langages interpr\u00e9t\u00e9s.    La Reine avait une seule m\u00e9thode pour r\u00e9soudre toutes les difficult\u00e9s, petites ou grosses.   \u00ab Qu'on lui coupe la t\u00eate ! \u00bb dit-elle sans m\u00eame lever les yeux.   Lewis Caroll, Alice au pays des merveilles", 
            "title": "Un travail \u00e0 vocation universelle"
        }, 
        {
            "location": "/02-algorithmique/#problemes-fondamentaux-en-algorithmique", 
            "text": "Programmer, c'est comme r\u00e9soudre un casse t\u00eate. C'est un peu un d\u00e9fi qui n\u00e9cessite d'inventer une solution face \u00e0 un probl\u00e8me ou une situation donn\u00e9e. Reste \u00e0 le faire bien. Lorsqu'on programme, \u00e0 un moment ou un autre, on se posera des questions sur la  calculabilit\u00e9 , la  complexit\u00e9  ou la  correction  de l'algorithme que l'on est en train de concevoir.  La  calculabilit\u00e9  est la capacit\u00e9 \u00e0 calculer un r\u00e9sultat ou une solution : Pour une t\u00e2che donn\u00e9e, existe-t-il un algorithme qui la r\u00e9solve ? Existe-t-il des t\u00e2ches pour lesquelles il n'existe aucun algorithme ? Comment savoir si l'on est dans l'un ou l'autre des cas ?  La  complexit\u00e9  lie le nombre d'op\u00e9rations ex\u00e9cut\u00e9es par l'algorithme \u00e0 la taille ou la quantit\u00e9 des donn\u00e9es qu'il manipule. C'est donc une question de performance et d'optimisation : en combien de temps un algorithme va-t-il atteindre le r\u00e9sultat pr\u00e9vu ? De quel espace (m\u00e9moire) a-t-il besoin pour faire son travail ?   Lorsqu'on parle de complexit\u00e9, on utilise la notation  O(...)  pour parler des diff\u00e9rence de complexit\u00e9 d'un algorithme. Voici les principaux cas :    O(1)  : l'algorithme en temps constant. C'est excellent ! Il prends toujours le m\u00eame temps quelle que soit la taille ou la quantit\u00e9 de donn\u00e9es qu'il manipule.    O(N)  : l'algorithme en temps lin\u00e9aire. C'est moyen. Il prends un temps proportionnel \u00e0 la quantit\u00e9 de donn\u00e9es manipul\u00e9es.    O(log N)  : l'algorithme est en temps logarithmique. C'est tr\u00e8s bien ! Il prends moins de temps qu'un parcours complet des donn\u00e9es.    O(N*N*..)  : l'algorithme est en temps polynomial. C'est pas terrible. Il prends un temps qui est le carr\u00e9, le cube ou autre polyn\u00f4me de la quantit\u00e9 de donn\u00e9es manipul\u00e9es.    O(exp(N))  : l'algorithme est en temps exponentiel. C'est pire que tout ! Il y a de fortes chances que l'on n'obtienne pas les r\u00e9sultats dans un temps raisonnable (temps allou\u00e9 au projet, vie humaine, \u00e2ge de l'univers, etc.) ;-(    Enfin la  correction  c'est pouvoir prouver qu'un algorithme r\u00e9pondre bien au besoin pour lequel il a \u00e9t\u00e9 con\u00e7u... et c'est loin d'\u00eatre \u00e9vident !   \u00ab   Voudriez-vous me dire, s'il vous pla\u00eet, par o\u00f9 je dois m'en aller d'ici ?    Cela d\u00e9pend beaucoup de l'endroit o\u00f9 tu veux aller.    Peu m'importe l'endroit...    En ce cas, peu importe la route que tu prendras.     ... pourvu que j'arrive quelque part \u00bb, ajouta Alice en guise d'explication.    \u00ab Oh, tu ne manqueras pas d'arriver quelque part, si tu marches assez longtemps. \u00bb", 
            "title": "Probl\u00e8mes fondamentaux en algorithmique"
        }, 
        {
            "location": "/02-algorithmique/#a-suivre", 
            "text": "Ouf. Jusque l\u00e0 j'ai essay\u00e9 de poser le contexte, un peu de culture g\u00e9n\u00e9rale et du vocabulaire. Normalement on n'abordera plus ces sujets (\u00e0 moins que ta curiosit\u00e9 ne prenne le dessus... et que je me laisse faire).  Au prochain chapitre on plongera dans les algorigrammes et on commencera \u00e0 dessiner nos id\u00e9es.   Est-ce que \u00e7a va jusque l\u00e0 ?   En terme de volume, est ce que c'est trop long ? Trop court ?  Est-ce que tu as des questions ou des trucs que tu as envie de dire ? :-P   \u00c7a te botte toujours ? Tu veux la suite ? Envoie-moi un e-mail avec le texte  \"JE VEUX LA SUITE !\"  :-)   Programmer peut entra\u00eener de graves troubles de la vie sociale  En cas d'apparition des sympt\u00f4mes suivants :  impossibilit\u00e9 de r\u00e9sister aux d\u00e9fis logiques, envie de dialoguer avec son programme, veill\u00e9e tardive devant son \u00e9cran, recherche compulsive sur StackOverflow, r\u00e9flexions nocturne sur un bug, parler d'un bug \u00e0 ses proches, dire \u00e0 quelqu'un qu'on arrive et arriver 1h apr\u00e8s, essayer d'automatiser la moindre t\u00e2che... n'essaye  pas  de consulter un sp\u00e9cialiste, il est trop tard, tu \u00eates foutue ! ;-)", 
            "title": "\u00c0 suivre ?"
        }, 
        {
            "location": "/03-algorigrammes/", 
            "text": "\ufeffAlgorigrammes\n#\n\n\nT'ai-je dit que nous allons dessiner ? Oui ? Alors, viens dessiner ! Pr\u00e9pare un stylo, feutre, crayon... et des feuilles de papier !\n\n\nDans les prochains chapitres, nous allons dessiner des petites briques : chacune d'entre elle servira \u00e0 faire une petite chose simple (et un peu b\u00eate), mais en posant ces briques sur d'autres briques nous pourrons exprimer des choses de plus en plus malines et fantastiques ! (oui-oui\u00a0!)\n\n\nMais dans un premier temps, je vais te pr\u00e9senter la vue d'ensemble !\n\n\nD\u00e9finition\n#\n\n\nAlgorigramme\n : Algori(thme) + (dia)gramme\n\n\nIl s'agit du nom de ce genre de dessins : c'est la repr\u00e9sentation graphique de l'encha\u00eenement des \nop\u00e9rations\n et des \nd\u00e9cisions\n effectu\u00e9es par un programme d'ordinateur. C'est l'ensemble de ces enchainements qui donne une utilit\u00e9 et un sens au programme.\n\n\nExemple d'algorigramme:\n\n\n\n\nDans cet algorigramme, j'ai volontairement masqu\u00e9 les intitul\u00e9s des cases car c'est la forme dans son ensemble que je veux te montrer (mais sois rassur\u00e9e, nous le retrouverons bient\u00f4t, car c'est l'un des prochains exercices).\n\n\nComme tu peux le voir ici, il y a un d\u00e9but, puis des \u00e9tapes qui se suivent sans choix, des \u00e9tapes qui se suivent avec des choix, des \u00e9tapes qui inter-agissent avec des patates sur les cot\u00e9s, et aussi une fin.\n\n\n\n\n\u00ab Mais alors, dit Alice, si le monde n'a absolument aucun sens, qui nous emp\u00eache d'en inventer un\u00a0? \u00bb \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\nStructure d'un programme\n#\n\n\nUn programme informatique suit en g\u00e9n\u00e9ral une structure calqu\u00e9e sur la suite des phases suivantes, dans l'ordre\u00a0: \nd\u00e9clarations\n, \ninitialisations\n, \nprogramme principal\n, \ngestion des erreurs\n, \nsortie\n.\n\n\nPhase 1 : D\u00e9claration\n#\n\n\nComme dans une recette de cuisine, il s'agit de l'endroit ou l'on va annoncer ce dont on a besoin. \n\n\nPar exemple, pour la recette d'une omette, on dira \u00ab vous avez besoin de 3 oeufs, d'un oignon, de persil, d'une pinc\u00e9e de sel et de poivre... \u00bb. Ainsi le cuisiner va pouvoir v\u00e9rifier qu'il a bien tout ce dont il a besoin pour ex\u00e9cuter la recette et pr\u00e9parer les \u00e9l\u00e9enrs n\u00e9cessaires sur le plan de traval.\n\n\nDans un programme informatique il s'agira de faire l'inventaire des informations que l'on va chercher \u00e0 manipuler et surtout \u00e9viter de sortir une nouvelle information de notre chapeau en cours de route.\n\n\nOn verra par la suite (pseudo-code, code source, etc.) que cette partie est essentielle pour deux choses : d'abord pour que le programmeur puisse rester coh\u00e9rent tout au long de la mise en oeuvre de son id\u00e9e, ainsi qu'\u00e0 l'ordinateur pour puisse pr\u00e9parer la m\u00e9moire qui permettra de faire fonctionner le programme.\n\n\nPhase 2 : Initialisation\n#\n\n\nC'est l\u00e0 qu'on pr\u00e9pare nos ingr\u00e9dents !\n\n\nC'est bien de savoir qu'on aura besoin de 3 oeufs et d'un oignon, mais peut-\u00eatre faut-il les pr\u00e9parer ? mieux les pr\u00e9parer sur le plan de travail, ou bien aller les chercher dans le r\u00e9frig\u00e9rateur au moment ou l'on en a besoin ? \n\n\nNaturellement, pour un travail efficace, on pr\u00e9f\u00e8rera sortir les ingr\u00e9dients \u00e0 l'avance et peser les bonnes quantit\u00e9s avant de suivre les \u00e9tapes de la recette.\n\n\nPhase 3 : Programme principal\n#\n\n\nC'est la suite d'\u00e9tapes qui constitue le corps de la recette, c'est l\u00e0 qu'on m\u00e9lange, qu'on touille, qu'on fait tout ce qui doit \u00eatre fait afin de transformer les ingr\u00e9dients en une d\u00e9licieuse pr\u00e9paration !\n\n\nDans un programme informatique, c'est l\u00e0 que l'on organisera les donn\u00e9es entre elles, que l'on fera des calculs et qu'on l'on transformera les informations de d\u00e9part en quelque chose d'utile.\n\n\nPhase 4 : Gestion des erreurs\n#\n\n\nEn cuisine, il arrive qu'il y ait des rat\u00e9s. Parfois il suffit d'un instant d'inattention et c'est trop cuit, parfois c'est mal ex\u00e9cut\u00e9, parfois c'est les ingr\u00e9dients...\n\n\nDans un ordinateur aussi, \u00e7a arrive. Au d\u00e9but ce sera souvent la faute d'un programme mal con\u00e7u. On verra aussi que les interractions avec les donn\u00e9es ne se passent pas toujours comme pr\u00e9vu... et parfois c'est aussi l'utilisateur qui ne se comporte pas comme pr\u00e9vu (ou il le fait expr\u00e8s le fourbe\u00a0!). \n\n\nBref. Il faut anticiper les cas d'erreurs et essayer des les g\u00e9rer le mieux possible. \u00c0 minima, dire \u00e0 l'utilisateur (ou aux autres programmes) qu'il y a une probleme... l'important c'est de communiquer ;-)\n\n\nPhase 5 : Sortie(s)\n#\n\n\nDans une recette, cela correspond au moment ou l'on retire le plat du feu, que l'on nappe les sauces ou que l'on dresse le plat.\n\n\nEn informatique, il s'agira de rentre pr\u00e9sentable, agr\u00e9able, claires et utiles les informations transform\u00e9es : le plus souvent il s'agirant d'afficher quelque chose, de produire un fichier ou de transmettre une information.\n\n\n\n\n\u00ab Prenez donc du vin, \u00bb dit le Li\u00e8vre d\u2019un ton engageant. \n\nAlice regarda tout autour de la table, mais il n\u2019y avait que du th\u00e9. \u00ab Je ne vois pas de vin, \u00bb fit-elle observer. \n\n\u00ab Il n\u2019y en a pas, \u00bb dit le Li\u00e8vre. \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\n\u00c0 suivre ?\n#\n\n\n\u00c7a y est, on atteint le vif du sujet. Je viens bient\u00f4t te d\u00e9voiler l... ah non\u00a0!... shuuut\u00a0!... je ne peux rien dire jusqu'au prochain chapitre ! :-P\n\n\nTu veux la suite ? Envoie-moi un e-mail avec le texte \n\"JE VEUX LA SUITE !\"\n accompagn\u00e9 d'\nUN DESSIN\n (fait main) :-)", 
            "title": "03. Algorigrammes"
        }, 
        {
            "location": "/03-algorigrammes/#algorigrammes", 
            "text": "T'ai-je dit que nous allons dessiner ? Oui ? Alors, viens dessiner ! Pr\u00e9pare un stylo, feutre, crayon... et des feuilles de papier !  Dans les prochains chapitres, nous allons dessiner des petites briques : chacune d'entre elle servira \u00e0 faire une petite chose simple (et un peu b\u00eate), mais en posant ces briques sur d'autres briques nous pourrons exprimer des choses de plus en plus malines et fantastiques ! (oui-oui\u00a0!)  Mais dans un premier temps, je vais te pr\u00e9senter la vue d'ensemble !", 
            "title": "\ufeffAlgorigrammes"
        }, 
        {
            "location": "/03-algorigrammes/#definition", 
            "text": "Algorigramme  : Algori(thme) + (dia)gramme  Il s'agit du nom de ce genre de dessins : c'est la repr\u00e9sentation graphique de l'encha\u00eenement des  op\u00e9rations  et des  d\u00e9cisions  effectu\u00e9es par un programme d'ordinateur. C'est l'ensemble de ces enchainements qui donne une utilit\u00e9 et un sens au programme.  Exemple d'algorigramme:   Dans cet algorigramme, j'ai volontairement masqu\u00e9 les intitul\u00e9s des cases car c'est la forme dans son ensemble que je veux te montrer (mais sois rassur\u00e9e, nous le retrouverons bient\u00f4t, car c'est l'un des prochains exercices).  Comme tu peux le voir ici, il y a un d\u00e9but, puis des \u00e9tapes qui se suivent sans choix, des \u00e9tapes qui se suivent avec des choix, des \u00e9tapes qui inter-agissent avec des patates sur les cot\u00e9s, et aussi une fin.   \u00ab Mais alors, dit Alice, si le monde n'a absolument aucun sens, qui nous emp\u00eache d'en inventer un\u00a0? \u00bb   Lewis Carroll, Les aventures d'Alice au pays des merveilles", 
            "title": "D\u00e9finition"
        }, 
        {
            "location": "/03-algorigrammes/#structure-dun-programme", 
            "text": "Un programme informatique suit en g\u00e9n\u00e9ral une structure calqu\u00e9e sur la suite des phases suivantes, dans l'ordre\u00a0:  d\u00e9clarations ,  initialisations ,  programme principal ,  gestion des erreurs ,  sortie .", 
            "title": "Structure d'un programme"
        }, 
        {
            "location": "/03-algorigrammes/#phase-1-declaration", 
            "text": "Comme dans une recette de cuisine, il s'agit de l'endroit ou l'on va annoncer ce dont on a besoin.   Par exemple, pour la recette d'une omette, on dira \u00ab vous avez besoin de 3 oeufs, d'un oignon, de persil, d'une pinc\u00e9e de sel et de poivre... \u00bb. Ainsi le cuisiner va pouvoir v\u00e9rifier qu'il a bien tout ce dont il a besoin pour ex\u00e9cuter la recette et pr\u00e9parer les \u00e9l\u00e9enrs n\u00e9cessaires sur le plan de traval.  Dans un programme informatique il s'agira de faire l'inventaire des informations que l'on va chercher \u00e0 manipuler et surtout \u00e9viter de sortir une nouvelle information de notre chapeau en cours de route.  On verra par la suite (pseudo-code, code source, etc.) que cette partie est essentielle pour deux choses : d'abord pour que le programmeur puisse rester coh\u00e9rent tout au long de la mise en oeuvre de son id\u00e9e, ainsi qu'\u00e0 l'ordinateur pour puisse pr\u00e9parer la m\u00e9moire qui permettra de faire fonctionner le programme.", 
            "title": "Phase 1 : D\u00e9claration"
        }, 
        {
            "location": "/03-algorigrammes/#phase-2-initialisation", 
            "text": "C'est l\u00e0 qu'on pr\u00e9pare nos ingr\u00e9dents !  C'est bien de savoir qu'on aura besoin de 3 oeufs et d'un oignon, mais peut-\u00eatre faut-il les pr\u00e9parer ? mieux les pr\u00e9parer sur le plan de travail, ou bien aller les chercher dans le r\u00e9frig\u00e9rateur au moment ou l'on en a besoin ?   Naturellement, pour un travail efficace, on pr\u00e9f\u00e8rera sortir les ingr\u00e9dients \u00e0 l'avance et peser les bonnes quantit\u00e9s avant de suivre les \u00e9tapes de la recette.", 
            "title": "Phase 2 : Initialisation"
        }, 
        {
            "location": "/03-algorigrammes/#phase-3-programme-principal", 
            "text": "C'est la suite d'\u00e9tapes qui constitue le corps de la recette, c'est l\u00e0 qu'on m\u00e9lange, qu'on touille, qu'on fait tout ce qui doit \u00eatre fait afin de transformer les ingr\u00e9dients en une d\u00e9licieuse pr\u00e9paration !  Dans un programme informatique, c'est l\u00e0 que l'on organisera les donn\u00e9es entre elles, que l'on fera des calculs et qu'on l'on transformera les informations de d\u00e9part en quelque chose d'utile.", 
            "title": "Phase 3 : Programme principal"
        }, 
        {
            "location": "/03-algorigrammes/#phase-4-gestion-des-erreurs", 
            "text": "En cuisine, il arrive qu'il y ait des rat\u00e9s. Parfois il suffit d'un instant d'inattention et c'est trop cuit, parfois c'est mal ex\u00e9cut\u00e9, parfois c'est les ingr\u00e9dients...  Dans un ordinateur aussi, \u00e7a arrive. Au d\u00e9but ce sera souvent la faute d'un programme mal con\u00e7u. On verra aussi que les interractions avec les donn\u00e9es ne se passent pas toujours comme pr\u00e9vu... et parfois c'est aussi l'utilisateur qui ne se comporte pas comme pr\u00e9vu (ou il le fait expr\u00e8s le fourbe\u00a0!).   Bref. Il faut anticiper les cas d'erreurs et essayer des les g\u00e9rer le mieux possible. \u00c0 minima, dire \u00e0 l'utilisateur (ou aux autres programmes) qu'il y a une probleme... l'important c'est de communiquer ;-)", 
            "title": "Phase 4 : Gestion des erreurs"
        }, 
        {
            "location": "/03-algorigrammes/#phase-5-sorties", 
            "text": "Dans une recette, cela correspond au moment ou l'on retire le plat du feu, que l'on nappe les sauces ou que l'on dresse le plat.  En informatique, il s'agira de rentre pr\u00e9sentable, agr\u00e9able, claires et utiles les informations transform\u00e9es : le plus souvent il s'agirant d'afficher quelque chose, de produire un fichier ou de transmettre une information.   \u00ab Prenez donc du vin, \u00bb dit le Li\u00e8vre d\u2019un ton engageant.  \nAlice regarda tout autour de la table, mais il n\u2019y avait que du th\u00e9. \u00ab Je ne vois pas de vin, \u00bb fit-elle observer.  \n\u00ab Il n\u2019y en a pas, \u00bb dit le Li\u00e8vre.   Lewis Carroll, Les aventures d'Alice au pays des merveilles", 
            "title": "Phase 5 : Sortie(s)"
        }, 
        {
            "location": "/03-algorigrammes/#a-suivre", 
            "text": "\u00c7a y est, on atteint le vif du sujet. Je viens bient\u00f4t te d\u00e9voiler l... ah non\u00a0!... shuuut\u00a0!... je ne peux rien dire jusqu'au prochain chapitre ! :-P  Tu veux la suite ? Envoie-moi un e-mail avec le texte  \"JE VEUX LA SUITE !\"  accompagn\u00e9 d' UN DESSIN  (fait main) :-)", 
            "title": "\u00c0 suivre ?"
        }, 
        {
            "location": "/04-instructions/", 
            "text": "Algorigrammes (partie 2)\n#\n\n\nEst-tu bien repos\u00e9e ? Pr\u00eate \u00e0 reprendre ? As tu bien ton stylo-feutre-licorne toujours \u00e0 la main ? Et ta feuille impatiente ? \n\n\nC'est fois c'est la bonne, on dessine\u00a0!\n\n\nLes instructions\n#\n\n\nLes \ninstructions\n sont les briques \u00e9l\u00e9mentaires de tout programme. Elle repr\u00e9sentent les actions que \nsait faire\n un ordinateur. Comme tu le constatera, il n'y en a pas beaucoup ! \n\n\nEn fait les ordinateurs sont assez limit\u00e9s ! Programmer c'est un peu comme parler \u00e0 un enfant de 8 ans atteint du \nsyndrome de Down\n... \u00e7a n\u00e9cessite de bien tout expliquer. Et s'il arrive qu'il ne comprenne pas, ce n'est pas de sa faute puisque c'est sa condition, il est comme \u00e7a. Il n'y peut rien. L'erreur de communication viendra forc\u00e9ment du donneur d'explications qui a \u00e9t\u00e9 trop rapide ou trop impr\u00e9cis dans sa demande par rapport aux capacit\u00e9s de l'enfant handicap\u00e9.\n\n\nCela pourrait donner la situation imaginaire suivante : \n\n\n\n\n\u00ab\u00a0Dis petit, tu peux m'aider \u00e0 peindre ce mur\u00a0? \n\n\n\u00a0Moi aider\u00a0! Aider.. comment\u00a0?\u00a0\u00bb demanda le petit trisomique, l'air perdu.\n\n\n\u00a0Mais avec un pinceau ! \n\n\n\u00a0Ah pinceau !... C'est quoi pinceau\u00a0? \n\n\u00ab\u00a0Cette chose l\u00e0\u00a0!\u00a0\u00bb dis-je en lui tendant l'objet \n\nIl prends le pinceau et reste immobile devant moi, l'air b\u00e9at. \n\n\u00ab\u00a0Hmm. Tu fais quoi l\u00e0\u00a0? \n\n\n Je peint, comme toi as dit...\u00a0\u00bb, me r\u00e9ponds-t-il. \n\n\u00ab\u00a0Mais non\u00a0!\u00a0\u00bb craquais-je, \u00ab il faut faire des mouvements de bas en haut, comme \u00e7a\u00a0! \u00bb. \n\n\u00c0 peine eu-je fini ma phrase qu'il se mit \u00e0 singer mes mouvements... \n\n\n \u00ab\u00a0Oui, bon, c'est mieux..., mais tu oublies la peinture l\u00e0...\u00a0\u00bb\n\n\n\n\nTu verras que communiquer avec un ordinateur, c'est pareil\u00a0: \u00e7a consiste essentiellement \u00e0 d\u00e9composer tes id\u00e9es en actions et en id\u00e9es plus simples, puis \u00e0 les d\u00e9composer encore et encore... jusqu'\u00e0 les r\u00e9duire \u00e0 un ensemble de ces instructions toutes b\u00eates.\n\n\nJe sais que dit comme \u00e7a, c'est encore un peu abstrait. Il donc est temps de passer \u00e0 de vrais exemples concrets et te pr\u00e9senter enfin les \ninstructions\n !\n\n\nLe d\u00e9but du programme\n#\n\n\nComme son nom l'indique, c'est l\u00e0 o\u00f9 l'ordinateur va commencer l'ex\u00e9cution de notre programme.\nEnsuite on suivra les fl\u00e8ches, dans l'ordre, pour passer d'une instruction \u00e0 l'autre.\n\n\n\n\nLa fin du programme\n#\n\n\nC'est l'endroit ou se termine le programme. L'ordinateur ne fait plus rien dans notre programme une fois arriv\u00e9 \u00e0 ce point. \n\n\nPour des raisons de clart\u00e9, on essaiera d'avoir une seule fin repr\u00e9sent\u00e9e dans notre algorigramme. Cependant il pourra y avoir fl\u00e8ches arrivant \u00e0 la fin du programme.\n\n\n\n\nLes sorties\n#\n\n\nC'est le premier moyen qu'un programe peut utiliser pour interagir avec son environnement. Plus pr\u00e9cis\u00e9ment un programme pourra utiliser une \nsortie\n pour \ntransmettre de l'information vers l'ext\u00e9rieur\n. On pourra donc utiliser tout p\u00e9riph\u00e9rique branch\u00e9 \u00e0 notre ordinateur (\u00e9cran, imprimante, r\u00e9seau, enceintes, etc.)\n\n\nOn dessine l'information que l'on souhaite transmettre dans la case inclin\u00e9e \n\u00e0 gauche\n et le support sur lequel on va la transmettre dans la bulle \n\u00e0 droite\n.\n\n\nOn remarque aussi que la fl\u00e8che \nva vers\n la bulle.\n\n\n\n\n\n\n\n\nExemple 1. Afficher un texte \u00e0 l'\u00e9cran\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExemple 2. Envoyer un long texte sur l'imprimante\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLes entr\u00e9es\n#\n\n\nC'est le second moyen de communiquer avec l'environnement ext\u00e9rieur \u00e0 un programme. Avec une \nentr\u00e9e\n on pourra \nrecevoir de l'information\n provenant de l'ext\u00e9rieur.\n\n\nOn dessine l'information que l'on souhaite recevoir dans la case inclin\u00e9e \n\u00e0 gauche\n et le support sur lequel on va la recevoir dans la bulle \n\u00e0 droite\n. \n\n\nOn remarque que la fl\u00e8che \nvient\n de la bulle.\n\n\n\n\n\n\n\n\nExemple 3. Envoyer un long texte sur l'imprimante\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLes variables\n#\n\n\nCe sont des petites cases m\u00e9moire dont le contenu peut \n\u00eatre modifi\u00e9\n (et donc varier). \n\n\nPlus pr\u00e9cis\u00e9ment c'est le nom que l'on va donner \u00e0 \nune case\n ou \nun groupe de cases\n dans la m\u00e9moire de l'ordinateur...\n\n\n\n\nTout d'abord, pour une variable donn\u00e9e, on pourra lui \nassigner une valeur\n : c'est \u00e0 dire mettre une valeur dans la case d\u00e9sign\u00e9e par l'\u00e9tiquette. \nPar exemple, dans l'illustration ci-dessus on voit le r\u00e9sultat en m\u00e9moire apr\u00e8s l'assignation de la valeur \n18\n dans la variable \nage\n.\n\n\nIl est possible d'assigner des valeurs depuis le programme lui-m\u00eame, ou bien depuis une source d'information ext\u00e9rieure ! C'est l\u00e0 qu'interviennent les \nentr\u00e9es\n dont je te parlais plus haut.\n\n\n\n\n\n\n\n\nExemple 4. Assignation depuis le programme lui-m\u00eame\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExemple 5. Assignation depuis une entr\u00e9e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnsuite, pour une variable donn\u00e9e, on pourra aussi \nlire sa valeur\n : c'est \u00e0 dire lire le contenu de la case m\u00e9moire d\u00e9sign\u00e9e par l'\u00e9tiquette. On pourra utiliser cette valeur pour l'envoyer vers une \nsortie\n, ou pour faire une op\u00e9ration utilisant la valeur et produire un r\u00e9sultat.\n\n\nOn peut m\u00eame utiliser cette variable, faire une op\u00e9ration et enfin stocker le r\u00e9sultat dans cette m\u00eame variable ! Avec ce type d'instructions, on lit le cot\u00e9 droit de la fl\u00e8che avant le cot\u00e9 gauche : on lit les valeurs et on fait le calcul, on bientient un r\u00e9sultat et la variable (l'\u00e9tiquette) d\u00e9signe ensuite ce r\u00e9sultat.\n\n\n\n\n\n\n\n\nExemple 6. Lecture d'une variable : on affiche son contenu \u00e0 l'\u00e9cran\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExemple 7. Lecture d'une variable, on fait un calcul et on le stocke sous le m\u00eame nom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUn gros rosier se dressait pr\u00e8s de l'entr\u00e9e du jardin.\nLes fleurs qu'il portait \u00e9taient blanches mais il y avait \ntrois jardiniers qui s'activaient \u00e0 les peindre en rouge.\nAlice trouva cela tr\u00e8s \u00e9trange et s'approcha pour les observer de plus pr\u00e8s.\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\n\u00c0 suivre ?\n#\n\n\nNous avons pos\u00e9 les bases. Mais que va-t-on faire de ces quelques petites\ninstructions de rien du tout ?  J'ai comme l'impression qu'il nous manque un\npetit quelque chose... mais quoi ? Tu le sauras au prochain \u00e9pisode !\n\n\n\n\nAlors, quelles sont tes impressions jusque l\u00e0 ?\n\n\nLe contenu commence \u00e0 s'\u00e9toffer... est-ce que tu as des questions ?\n\n\nEst-ce que \u00e7a fait \u00e9cho \u00e0 des choses que tu avais d\u00e9j\u00e0 vu ?\n\n\nEst-ce que \u00e7a te plait ?\n\n\nEst-ce que \u00e7a te dirais un pique-nique un de ces jours (oups, je m'\u00e9garre...)\n\n\n\n\nBref. Si tel est ton d\u00e9sir, j'attends ton e-mail avec le texte \n\"JE VEUX LA SUITE !\"\n  :-)", 
            "title": "04. Algorigrammes (partie 2)"
        }, 
        {
            "location": "/04-instructions/#algorigrammes-partie-2", 
            "text": "Est-tu bien repos\u00e9e ? Pr\u00eate \u00e0 reprendre ? As tu bien ton stylo-feutre-licorne toujours \u00e0 la main ? Et ta feuille impatiente ?   C'est fois c'est la bonne, on dessine\u00a0!", 
            "title": "Algorigrammes (partie 2)"
        }, 
        {
            "location": "/04-instructions/#les-instructions", 
            "text": "Les  instructions  sont les briques \u00e9l\u00e9mentaires de tout programme. Elle repr\u00e9sentent les actions que  sait faire  un ordinateur. Comme tu le constatera, il n'y en a pas beaucoup !   En fait les ordinateurs sont assez limit\u00e9s ! Programmer c'est un peu comme parler \u00e0 un enfant de 8 ans atteint du  syndrome de Down ... \u00e7a n\u00e9cessite de bien tout expliquer. Et s'il arrive qu'il ne comprenne pas, ce n'est pas de sa faute puisque c'est sa condition, il est comme \u00e7a. Il n'y peut rien. L'erreur de communication viendra forc\u00e9ment du donneur d'explications qui a \u00e9t\u00e9 trop rapide ou trop impr\u00e9cis dans sa demande par rapport aux capacit\u00e9s de l'enfant handicap\u00e9.  Cela pourrait donner la situation imaginaire suivante :    \u00ab\u00a0Dis petit, tu peux m'aider \u00e0 peindre ce mur\u00a0?   \u00a0Moi aider\u00a0! Aider.. comment\u00a0?\u00a0\u00bb demanda le petit trisomique, l'air perdu.  \u00a0Mais avec un pinceau !   \u00a0Ah pinceau !... C'est quoi pinceau\u00a0?  \n\u00ab\u00a0Cette chose l\u00e0\u00a0!\u00a0\u00bb dis-je en lui tendant l'objet  \nIl prends le pinceau et reste immobile devant moi, l'air b\u00e9at.  \n\u00ab\u00a0Hmm. Tu fais quoi l\u00e0\u00a0?    Je peint, comme toi as dit...\u00a0\u00bb, me r\u00e9ponds-t-il.  \n\u00ab\u00a0Mais non\u00a0!\u00a0\u00bb craquais-je, \u00ab il faut faire des mouvements de bas en haut, comme \u00e7a\u00a0! \u00bb.  \n\u00c0 peine eu-je fini ma phrase qu'il se mit \u00e0 singer mes mouvements...    \u00ab\u00a0Oui, bon, c'est mieux..., mais tu oublies la peinture l\u00e0...\u00a0\u00bb   Tu verras que communiquer avec un ordinateur, c'est pareil\u00a0: \u00e7a consiste essentiellement \u00e0 d\u00e9composer tes id\u00e9es en actions et en id\u00e9es plus simples, puis \u00e0 les d\u00e9composer encore et encore... jusqu'\u00e0 les r\u00e9duire \u00e0 un ensemble de ces instructions toutes b\u00eates.  Je sais que dit comme \u00e7a, c'est encore un peu abstrait. Il donc est temps de passer \u00e0 de vrais exemples concrets et te pr\u00e9senter enfin les  instructions  !", 
            "title": "Les instructions"
        }, 
        {
            "location": "/04-instructions/#le-debut-du-programme", 
            "text": "Comme son nom l'indique, c'est l\u00e0 o\u00f9 l'ordinateur va commencer l'ex\u00e9cution de notre programme.\nEnsuite on suivra les fl\u00e8ches, dans l'ordre, pour passer d'une instruction \u00e0 l'autre.", 
            "title": "Le d\u00e9but du programme"
        }, 
        {
            "location": "/04-instructions/#la-fin-du-programme", 
            "text": "C'est l'endroit ou se termine le programme. L'ordinateur ne fait plus rien dans notre programme une fois arriv\u00e9 \u00e0 ce point.   Pour des raisons de clart\u00e9, on essaiera d'avoir une seule fin repr\u00e9sent\u00e9e dans notre algorigramme. Cependant il pourra y avoir fl\u00e8ches arrivant \u00e0 la fin du programme.", 
            "title": "La fin du programme"
        }, 
        {
            "location": "/04-instructions/#les-sorties", 
            "text": "C'est le premier moyen qu'un programe peut utiliser pour interagir avec son environnement. Plus pr\u00e9cis\u00e9ment un programme pourra utiliser une  sortie  pour  transmettre de l'information vers l'ext\u00e9rieur . On pourra donc utiliser tout p\u00e9riph\u00e9rique branch\u00e9 \u00e0 notre ordinateur (\u00e9cran, imprimante, r\u00e9seau, enceintes, etc.)  On dessine l'information que l'on souhaite transmettre dans la case inclin\u00e9e  \u00e0 gauche  et le support sur lequel on va la transmettre dans la bulle  \u00e0 droite .  On remarque aussi que la fl\u00e8che  va vers  la bulle.     Exemple 1. Afficher un texte \u00e0 l'\u00e9cran             Exemple 2. Envoyer un long texte sur l'imprimante", 
            "title": "Les sorties"
        }, 
        {
            "location": "/04-instructions/#les-entrees", 
            "text": "C'est le second moyen de communiquer avec l'environnement ext\u00e9rieur \u00e0 un programme. Avec une  entr\u00e9e  on pourra  recevoir de l'information  provenant de l'ext\u00e9rieur.  On dessine l'information que l'on souhaite recevoir dans la case inclin\u00e9e  \u00e0 gauche  et le support sur lequel on va la recevoir dans la bulle  \u00e0 droite .   On remarque que la fl\u00e8che  vient  de la bulle.     Exemple 3. Envoyer un long texte sur l'imprimante", 
            "title": "Les entr\u00e9es"
        }, 
        {
            "location": "/04-instructions/#les-variables", 
            "text": "Ce sont des petites cases m\u00e9moire dont le contenu peut  \u00eatre modifi\u00e9  (et donc varier).   Plus pr\u00e9cis\u00e9ment c'est le nom que l'on va donner \u00e0  une case  ou  un groupe de cases  dans la m\u00e9moire de l'ordinateur...   Tout d'abord, pour une variable donn\u00e9e, on pourra lui  assigner une valeur  : c'est \u00e0 dire mettre une valeur dans la case d\u00e9sign\u00e9e par l'\u00e9tiquette. \nPar exemple, dans l'illustration ci-dessus on voit le r\u00e9sultat en m\u00e9moire apr\u00e8s l'assignation de la valeur  18  dans la variable  age .  Il est possible d'assigner des valeurs depuis le programme lui-m\u00eame, ou bien depuis une source d'information ext\u00e9rieure ! C'est l\u00e0 qu'interviennent les  entr\u00e9es  dont je te parlais plus haut.     Exemple 4. Assignation depuis le programme lui-m\u00eame             Exemple 5. Assignation depuis une entr\u00e9e          Ensuite, pour une variable donn\u00e9e, on pourra aussi  lire sa valeur  : c'est \u00e0 dire lire le contenu de la case m\u00e9moire d\u00e9sign\u00e9e par l'\u00e9tiquette. On pourra utiliser cette valeur pour l'envoyer vers une  sortie , ou pour faire une op\u00e9ration utilisant la valeur et produire un r\u00e9sultat.  On peut m\u00eame utiliser cette variable, faire une op\u00e9ration et enfin stocker le r\u00e9sultat dans cette m\u00eame variable ! Avec ce type d'instructions, on lit le cot\u00e9 droit de la fl\u00e8che avant le cot\u00e9 gauche : on lit les valeurs et on fait le calcul, on bientient un r\u00e9sultat et la variable (l'\u00e9tiquette) d\u00e9signe ensuite ce r\u00e9sultat.     Exemple 6. Lecture d'une variable : on affiche son contenu \u00e0 l'\u00e9cran             Exemple 7. Lecture d'une variable, on fait un calcul et on le stocke sous le m\u00eame nom           Un gros rosier se dressait pr\u00e8s de l'entr\u00e9e du jardin.\nLes fleurs qu'il portait \u00e9taient blanches mais il y avait \ntrois jardiniers qui s'activaient \u00e0 les peindre en rouge.\nAlice trouva cela tr\u00e8s \u00e9trange et s'approcha pour les observer de plus pr\u00e8s. Lewis Carroll, Les aventures d'Alice au pays des merveilles", 
            "title": "Les variables"
        }, 
        {
            "location": "/04-instructions/#a-suivre", 
            "text": "Nous avons pos\u00e9 les bases. Mais que va-t-on faire de ces quelques petites\ninstructions de rien du tout ?  J'ai comme l'impression qu'il nous manque un\npetit quelque chose... mais quoi ? Tu le sauras au prochain \u00e9pisode !   Alors, quelles sont tes impressions jusque l\u00e0 ?  Le contenu commence \u00e0 s'\u00e9toffer... est-ce que tu as des questions ?  Est-ce que \u00e7a fait \u00e9cho \u00e0 des choses que tu avais d\u00e9j\u00e0 vu ?  Est-ce que \u00e7a te plait ?  Est-ce que \u00e7a te dirais un pique-nique un de ces jours (oups, je m'\u00e9garre...)   Bref. Si tel est ton d\u00e9sir, j'attends ton e-mail avec le texte  \"JE VEUX LA SUITE !\"   :-)", 
            "title": "\u00c0 suivre ?"
        }
    ]
}