{
    "docs": [
        {
            "location": "/",
            "text": "Apprendre \u00e0 programmer\n#\n\n\nPr\u00e9face\n#\n\n\nUn jour tu m'as dit vouloir \u00ab apprendre \u00e0 coder \u00bb. Je t'ai dit que c'\u00e9tait possible en 5 jours, l'\u00e9quivalent de 30h de cours et d'exercices pratiques.\n\n\nNous y voil\u00e0. Le chemin se dessine. Alors quand le moment s'y pr\u00eatera le mieux \u2014 un matin \u00e0 partir de 7h ? \u2014 prends un stylo, un calepin, ta meilleure paire de chaussures... et suis-moi, on part \u00e0 l'aventure !",
            "title": "Accueil"
        },
        {
            "location": "/#apprendre-a-programmer",
            "text": "",
            "title": "Apprendre \u00e0 programmer"
        },
        {
            "location": "/#preface",
            "text": "Un jour tu m'as dit vouloir \u00ab apprendre \u00e0 coder \u00bb. Je t'ai dit que c'\u00e9tait possible en 5 jours, l'\u00e9quivalent de 30h de cours et d'exercices pratiques.  Nous y voil\u00e0. Le chemin se dessine. Alors quand le moment s'y pr\u00eatera le mieux \u2014 un matin \u00e0 partir de 7h ? \u2014 prends un stylo, un calepin, ta meilleure paire de chaussures... et suis-moi, on part \u00e0 l'aventure !",
            "title": "Pr\u00e9face"
        },
        {
            "location": "/generalites/01-generalites/",
            "text": "G\u00e9n\u00e9ralit\u00e9s\n#\n\n\nQuelques d\u00e9finitions\n#\n\n\nBon, donc tu veux \nvraiment\n apprendre \u00e0 programmer ?\n\n\nDans \u00ab programmer \u00bb il est important de distinguer deux aspects : \n\nl'algorithmique\n et les \nlangages\n de programmation. \n\n\nL'algorithmique\n est un peu l'\u00e9quivalent de la logique pour formuler des id\u00e9es l\u00e0 ou les \nlangages\n se basent chacun sur une syntaxe et une grammaire permettant de les v\u00e9hiculer et se faire comprendre. \n\u00c9videmment, on ne peut pas formuler d'id\u00e9es sans mots, et utiliser des mots sans id\u00e9es ne fonctionne pas tr\u00e8s bien non plus...\n\n\nResituons tout \u00e7a dans le contexte : l'objectif de l'informatique, c'est obtenir de la machine qu'elle effectue un travail \u00e0 notre place (pour le meilleur et pour le pire...). Mais alors, comment lui expliquer comment elle doit s'y prendre ? Comment lui dire ? Comment lui apprendre ? Comment s'assurer qu'elle fait ce travail ? Et si on y arrive... Fera-t-elle ce travail aussi bien que nous ? Mieux que nous ?\n\n\nBref. Dans ce qui suit, je vais donc te faire une introduction \u00e0 la programmation en plusieurs \u00e9tapes : \n\n\n\n\nd'abord nous ferons des dessins, \n\n\nensuite nous utiliserons une forme de fran\u00e7ais minimaliste pour d\u00e9crire nos id\u00e9es,\n\n\nensuite nous utiliserons JavaScript pour communiquer ces id\u00e9es \u00e0 l'ordinateur.\n\n\n\n\nPourquoi Javascript ? Parce que : \n\n\n\n\nc'est un langage que l'on retrouve partout : front-end web, applications mobiles traitements m\u00e9tier sur les serveurs et depuis peu dans l'embarqu\u00e9 !\n\n\nc'est un langage \u00e0 la mode : il y a de la demande pour du web et des applications mobiles, les gens paient pour \u00e7a, la technologie \u00e9volue et se bonifie,\n\n\nc'est un langage facile \u00e0 apprendre !\n\n\n\n\nAlgori...quoi ?\n#\n\n\nAlgorithmes. Algorithmique. Algorithmie. Attention, il n'y a pas de y-grec car \u00e7a vient de l'arabe : du nom du math\u00e9maticien Al-Khw\u00e2rizm\u00ee (\u0627\u0644\u062e\u0648\u0627\u0631\u0632\u0645\u064a) !\n\n\nSans le savoir tu en as d\u00e9j\u00e0 utilis\u00e9s :\n\n\n\n\ndes briques de LEGO\u2122 pour faire une caserne de pompiers\n\n\ndes planches et des vis pour monter une \u00e9tag\u00e8re BILLY\u00a9 IKEA\u2122\n\n\ndes ingr\u00e9dients pour faire un g\u00e2teau\n\n\n\n\nDans tous ces cas l\u00e0, tu as suivi un plan, un guide de montage, une recette. Tu \u00e9tais dans une posture d'ex\u00e9cution, qui t'a permis de \"suivre\" le travail imagin\u00e9 par quelqu'un d'autre afin de le reproduire.\n\n\nCependant, ceux qui ont con\u00e7u cette caserne de pompier, cette \u00e9tag\u00e8re BILLY\u00a9 IKEA\u2122, ce g\u00e2teau... comment ont-ils proc\u00e9d\u00e9 ? Quelle \u00e9tait la d\u00e9marche qui leur a permis, tout d'abord \nd'inventer\n un objet r\u00e9pondant \u00e0 leur besoin, ensuite de \nd\u00e9composer\n leur id\u00e9e, et enfin \nd'expliquer\n les \u00e9tapes n\u00e9cessaires \u00e0 sa r\u00e9alisation ?\n\n\nAu d\u00e9part on avait des composants ou des ingr\u00e9dients \u00e9parses,  ils ont \u00e9t\u00e9 assembl\u00e9s dans un certain ordre et d'une certaine fa\u00e7on, afin d'obtenir un r\u00e9sultat souhait\u00e9. Cette d\u00e9marche de r\u00e9solution de probl\u00e8mes et cette m\u00e9thodologie pour les d\u00e9composer en \u00e9tapes simples, c'est ce qu'en informatique on appelle l'algorithmique. \u00c9videmment \u00e7a peut s'appliquer \u00e0 bien d'autres sujets !\n\n\n\n\nLe lapin Blanc mit ses lunettes. \n\n\u2014 \u00ab S'il plait \u00e0 votre majest\u00e9, demanda-t-il, par o\u00f9 dois-je commencer? \u00bb \n\n\u2014 \u00ab Commencez par le commencement, dit d'un ton emprunt de gravit\u00e9, le Roi. \u00bb \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\nUne question d'\u00e9criture et de repr\u00e9sentations\n#\n\n\nPuisque dans un algorithme on trouve simplement des \u00e9tapes et des actions, il peut avoir plusieurs repr\u00e9sentations  : \n\n\n\n\nun \nalgorigramme\n : un diagramme d'\u00e9tapes successives repr\u00e9sent\u00e9 avec des rectangles, des bulles, des losanges et des fl\u00e8ches, \n\n\ndu \npseudo-code\n : une \u00e9criture en quasi-fran\u00e7ais d\u00e9sambigu\u00efs\u00e9\n\n\ndu \ncode source\n : une explication dans un langage informatique non-ambig\u00fc permettant \u00e0 l'ordinateur de le transformer en quelque chose qu'il comprends.\n\n\ndu \nbyte-code\n : suite d'instructions binaires pour un logiciel interpr\u00e8te\n\n\ndu \ncode machine\n : suite d'instructions binaires envoy\u00e9es au processeur et \u00e0 la m\u00e9moire.\n\n\n\n\nL'algorigramme\n et le \npseudo-code\n sont l\u00e0 essentiellement pour des besoins \u00e9ducatifs, mais il existe d'autres formes de diagrammes qui sont \"normalis\u00e9s\" et permettent \u00e9galement de repr\u00e9senter des programmes. On parlera alors de repr\u00e9sentation UML, Merise, SDL, etc. Ces diff\u00e9rents langages graphiques  permettent d'avoir une description et d'organiser un projet informatique entre plusieurs intervenants de m\u00e9tiers diff\u00e9rents et leur permettre de communiquer.\n\n\nLe \ncode machine\n (ou binaire ex\u00e9cutable) c'est ce que la machine comprend \"en vrai\": c'est la suite d'op\u00e9rations que le processeur doit faire, et les diff\u00e9rents \u00e9tats de la m\u00e9moire \u00e0 lui faire manipuler.\n\nCe code machine est sp\u00e9cifique \u00e0 un mod\u00e8le de processeur donn\u00e9. Il est donc incompatible avec un autre mod\u00e8le de processeur !\n\n\nAssez vite on se rend compte que c'est assez ingrat d'\u00e9crire un programme de cette fa\u00e7on-l\u00e0 ! C'est pourtant comme cela qu'il faut \u00e9crire le premier programme sur un processeur donn\u00e9, afin qu'il s'allume et serve \u00e0 quelque chose. \n\n\nPour \u00e9viter d'avoir \u00e0 faire cela pour tout le reste des programmes, on a invent\u00e9 les \ncompilateurs\n : c'est-\u00e0-dire des outils capables de prendre un autre programme, \u00e9crit dans un langage de programmation par un humain, et de les transcrire automatiquement en code machine, pour obtenir des binaires ex\u00e9cutables sans avoir \u00e0 les \u00e9crire soi-m\u00eame en code machine. On a donc d\u00fb fabriquer un compilateur par langage de programmation... Et par type de machine.\n\n\nIl faut savoir que lorsqu'on a du code machine entre les mains, c'est tr\u00e8s compliqu\u00e9 (voire impossible) de revenir au code source de d\u00e9part... C'est comme essayer de retrouver les ingr\u00e9dients et le dosage pr\u00e9cis d'un plat rien qu'en le go\u00fbtant\u202f! Il faut \u00eatre expert go\u00fbteur, expert cuisinier... Et l\u00e0 encore, c'est dur\u202f! Cette propri\u00e9t\u00e9 du code machine est \u00e9videmment une aubaine pour les gens qui veulent diffuser leur programme sans montrer son fonctionnement.\n\n\nMalgr\u00e9 cela, il y a un hic ! L'auteur (ou l'\u00e9diteur) doivent compiler leur code source en binaire ex\u00e9cutable pour chaque nouvelle plate-forme mat\u00e9rielle qui voit le jour, sous peine de voir leur programme \u00eatre incompatible chez les usagers des nouvelles plates-formes ! Et \u00e7a n\u00e9cessite donc beaucoup de travail (et donc des co\u00fbts) !\n\n\nL\u00e0 encore, des petits malins se sont dit qu'il \u00e9tait peut-\u00eatre plus pratique d'avoir un \"interpr\u00e8te\" ou \ninterpr\u00e9teur\n, c'est-\u00e0-dire un programme binaire sp\u00e9cifique \u00e0 chaque machine, capable de lire du code source et de le transformer au fur et \u00e0 mesure en instructions pour le processeur. Ainsi, plus besoin de compilation, et le programme est compatible avec toutes les machines o\u00f9 se trouve un interpr\u00e9teur pour le langage dans lequel il est \u00e9crit !\n\n\nMalheureusement, il y a deux soucis avec les interpr\u00e9teurs : transcrire \"\u00e0 la vol\u00e9e\" du code source, cela n\u00e9cessite du temps... Par cons\u00e9quent un interpr\u00e8te sera donc toujours plus lent qu'un programme binaire ex\u00e9cutable. En plus, pour utiliser un programme avec un interpr\u00e9teur il faut diffuser le code source du programme ! Autant \u00e7a ne g\u00e8ne pas les adeptes du partage, autant les gens voulant garder secrets leurs algorithmes n'ont pas trouv\u00e9 cela g\u00e9nial...\n\n\nC'est l\u00e0 qu'est apparu le \nbyte-code\n. Le byte-code, c'est du code machine pour une machine \"virtuelle\", c'est-\u00e0-dire une machine qui n'existe pas. Son code machine hypoth\u00e9tique serait minimaliste et transposable facilement sur n'importe quel processeur, avec moins d'efforts que pour un langage de programmation. L'id\u00e9e est ici de compiler quand le code source en du byte-code, et d'avoir un interpr\u00e9teur de byte-code sur chaque plate-forme.\n\n\nAvec cette technique, on obtient une vitesse de fonctionnement raisonnable, une compatibilit\u00e9 avec toutes les machines qui poss\u00e8dent un interpr\u00e9teur byte-code et aucune fa\u00e7on de remonter au code source de d\u00e9part ! C'est la strat\u00e9gie utilis\u00e9e par Java ou .NET . \n\n\nBref. Lorsque l'on programme, on \u00e9crit donc en g\u00e9n\u00e9ral du \ncode source\n, dans un langage de programmation. Mais rien n'emp\u00eache de faire un diagramme pour se fixer les id\u00e9es ! \u00c7a arrive m\u00eame aux meilleurs professionnels apr\u00e8s plusieurs d\u00e9cennies de pratique.\n\n\n\n\n\u00ab Je crains bien de ne pouvoir m'expliquer moi-m\u00eame... car je ne suis pas moi-m\u00eame, vous comprenez. \u00bb \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\nConclusion\n#\n\n\nWow. \u00c7a c'\u00e9tait l'introduction ! Aller, il nous reste encore 2-3 \u00e9l\u00e9ments de\ncontexte \u00e0 poser et on d\u00e9marre pour de vrai !",
            "title": "G\u00e9n\u00e9ralit\u00e9s I"
        },
        {
            "location": "/generalites/01-generalites/#generalites",
            "text": "",
            "title": "G\u00e9n\u00e9ralit\u00e9s"
        },
        {
            "location": "/generalites/01-generalites/#quelques-definitions",
            "text": "Bon, donc tu veux  vraiment  apprendre \u00e0 programmer ?  Dans \u00ab programmer \u00bb il est important de distinguer deux aspects :  l'algorithmique  et les  langages  de programmation.   L'algorithmique  est un peu l'\u00e9quivalent de la logique pour formuler des id\u00e9es l\u00e0 ou les  langages  se basent chacun sur une syntaxe et une grammaire permettant de les v\u00e9hiculer et se faire comprendre. \n\u00c9videmment, on ne peut pas formuler d'id\u00e9es sans mots, et utiliser des mots sans id\u00e9es ne fonctionne pas tr\u00e8s bien non plus...  Resituons tout \u00e7a dans le contexte : l'objectif de l'informatique, c'est obtenir de la machine qu'elle effectue un travail \u00e0 notre place (pour le meilleur et pour le pire...). Mais alors, comment lui expliquer comment elle doit s'y prendre ? Comment lui dire ? Comment lui apprendre ? Comment s'assurer qu'elle fait ce travail ? Et si on y arrive... Fera-t-elle ce travail aussi bien que nous ? Mieux que nous ?  Bref. Dans ce qui suit, je vais donc te faire une introduction \u00e0 la programmation en plusieurs \u00e9tapes :    d'abord nous ferons des dessins,   ensuite nous utiliserons une forme de fran\u00e7ais minimaliste pour d\u00e9crire nos id\u00e9es,  ensuite nous utiliserons JavaScript pour communiquer ces id\u00e9es \u00e0 l'ordinateur.   Pourquoi Javascript ? Parce que :    c'est un langage que l'on retrouve partout : front-end web, applications mobiles traitements m\u00e9tier sur les serveurs et depuis peu dans l'embarqu\u00e9 !  c'est un langage \u00e0 la mode : il y a de la demande pour du web et des applications mobiles, les gens paient pour \u00e7a, la technologie \u00e9volue et se bonifie,  c'est un langage facile \u00e0 apprendre !",
            "title": "Quelques d\u00e9finitions"
        },
        {
            "location": "/generalites/01-generalites/#algoriquoi",
            "text": "Algorithmes. Algorithmique. Algorithmie. Attention, il n'y a pas de y-grec car \u00e7a vient de l'arabe : du nom du math\u00e9maticien Al-Khw\u00e2rizm\u00ee (\u0627\u0644\u062e\u0648\u0627\u0631\u0632\u0645\u064a) !  Sans le savoir tu en as d\u00e9j\u00e0 utilis\u00e9s :   des briques de LEGO\u2122 pour faire une caserne de pompiers  des planches et des vis pour monter une \u00e9tag\u00e8re BILLY\u00a9 IKEA\u2122  des ingr\u00e9dients pour faire un g\u00e2teau   Dans tous ces cas l\u00e0, tu as suivi un plan, un guide de montage, une recette. Tu \u00e9tais dans une posture d'ex\u00e9cution, qui t'a permis de \"suivre\" le travail imagin\u00e9 par quelqu'un d'autre afin de le reproduire.  Cependant, ceux qui ont con\u00e7u cette caserne de pompier, cette \u00e9tag\u00e8re BILLY\u00a9 IKEA\u2122, ce g\u00e2teau... comment ont-ils proc\u00e9d\u00e9 ? Quelle \u00e9tait la d\u00e9marche qui leur a permis, tout d'abord  d'inventer  un objet r\u00e9pondant \u00e0 leur besoin, ensuite de  d\u00e9composer  leur id\u00e9e, et enfin  d'expliquer  les \u00e9tapes n\u00e9cessaires \u00e0 sa r\u00e9alisation ?  Au d\u00e9part on avait des composants ou des ingr\u00e9dients \u00e9parses,  ils ont \u00e9t\u00e9 assembl\u00e9s dans un certain ordre et d'une certaine fa\u00e7on, afin d'obtenir un r\u00e9sultat souhait\u00e9. Cette d\u00e9marche de r\u00e9solution de probl\u00e8mes et cette m\u00e9thodologie pour les d\u00e9composer en \u00e9tapes simples, c'est ce qu'en informatique on appelle l'algorithmique. \u00c9videmment \u00e7a peut s'appliquer \u00e0 bien d'autres sujets !   Le lapin Blanc mit ses lunettes.  \n\u2014 \u00ab S'il plait \u00e0 votre majest\u00e9, demanda-t-il, par o\u00f9 dois-je commencer? \u00bb  \n\u2014 \u00ab Commencez par le commencement, dit d'un ton emprunt de gravit\u00e9, le Roi. \u00bb   Lewis Carroll, Les aventures d'Alice au pays des merveilles",
            "title": "Algori...quoi ?"
        },
        {
            "location": "/generalites/01-generalites/#une-question-decriture-et-de-representations",
            "text": "Puisque dans un algorithme on trouve simplement des \u00e9tapes et des actions, il peut avoir plusieurs repr\u00e9sentations  :    un  algorigramme  : un diagramme d'\u00e9tapes successives repr\u00e9sent\u00e9 avec des rectangles, des bulles, des losanges et des fl\u00e8ches,   du  pseudo-code  : une \u00e9criture en quasi-fran\u00e7ais d\u00e9sambigu\u00efs\u00e9  du  code source  : une explication dans un langage informatique non-ambig\u00fc permettant \u00e0 l'ordinateur de le transformer en quelque chose qu'il comprends.  du  byte-code  : suite d'instructions binaires pour un logiciel interpr\u00e8te  du  code machine  : suite d'instructions binaires envoy\u00e9es au processeur et \u00e0 la m\u00e9moire.   L'algorigramme  et le  pseudo-code  sont l\u00e0 essentiellement pour des besoins \u00e9ducatifs, mais il existe d'autres formes de diagrammes qui sont \"normalis\u00e9s\" et permettent \u00e9galement de repr\u00e9senter des programmes. On parlera alors de repr\u00e9sentation UML, Merise, SDL, etc. Ces diff\u00e9rents langages graphiques  permettent d'avoir une description et d'organiser un projet informatique entre plusieurs intervenants de m\u00e9tiers diff\u00e9rents et leur permettre de communiquer.  Le  code machine  (ou binaire ex\u00e9cutable) c'est ce que la machine comprend \"en vrai\": c'est la suite d'op\u00e9rations que le processeur doit faire, et les diff\u00e9rents \u00e9tats de la m\u00e9moire \u00e0 lui faire manipuler. \nCe code machine est sp\u00e9cifique \u00e0 un mod\u00e8le de processeur donn\u00e9. Il est donc incompatible avec un autre mod\u00e8le de processeur !  Assez vite on se rend compte que c'est assez ingrat d'\u00e9crire un programme de cette fa\u00e7on-l\u00e0 ! C'est pourtant comme cela qu'il faut \u00e9crire le premier programme sur un processeur donn\u00e9, afin qu'il s'allume et serve \u00e0 quelque chose.   Pour \u00e9viter d'avoir \u00e0 faire cela pour tout le reste des programmes, on a invent\u00e9 les  compilateurs  : c'est-\u00e0-dire des outils capables de prendre un autre programme, \u00e9crit dans un langage de programmation par un humain, et de les transcrire automatiquement en code machine, pour obtenir des binaires ex\u00e9cutables sans avoir \u00e0 les \u00e9crire soi-m\u00eame en code machine. On a donc d\u00fb fabriquer un compilateur par langage de programmation... Et par type de machine.  Il faut savoir que lorsqu'on a du code machine entre les mains, c'est tr\u00e8s compliqu\u00e9 (voire impossible) de revenir au code source de d\u00e9part... C'est comme essayer de retrouver les ingr\u00e9dients et le dosage pr\u00e9cis d'un plat rien qu'en le go\u00fbtant\u202f! Il faut \u00eatre expert go\u00fbteur, expert cuisinier... Et l\u00e0 encore, c'est dur\u202f! Cette propri\u00e9t\u00e9 du code machine est \u00e9videmment une aubaine pour les gens qui veulent diffuser leur programme sans montrer son fonctionnement.  Malgr\u00e9 cela, il y a un hic ! L'auteur (ou l'\u00e9diteur) doivent compiler leur code source en binaire ex\u00e9cutable pour chaque nouvelle plate-forme mat\u00e9rielle qui voit le jour, sous peine de voir leur programme \u00eatre incompatible chez les usagers des nouvelles plates-formes ! Et \u00e7a n\u00e9cessite donc beaucoup de travail (et donc des co\u00fbts) !  L\u00e0 encore, des petits malins se sont dit qu'il \u00e9tait peut-\u00eatre plus pratique d'avoir un \"interpr\u00e8te\" ou  interpr\u00e9teur , c'est-\u00e0-dire un programme binaire sp\u00e9cifique \u00e0 chaque machine, capable de lire du code source et de le transformer au fur et \u00e0 mesure en instructions pour le processeur. Ainsi, plus besoin de compilation, et le programme est compatible avec toutes les machines o\u00f9 se trouve un interpr\u00e9teur pour le langage dans lequel il est \u00e9crit !  Malheureusement, il y a deux soucis avec les interpr\u00e9teurs : transcrire \"\u00e0 la vol\u00e9e\" du code source, cela n\u00e9cessite du temps... Par cons\u00e9quent un interpr\u00e8te sera donc toujours plus lent qu'un programme binaire ex\u00e9cutable. En plus, pour utiliser un programme avec un interpr\u00e9teur il faut diffuser le code source du programme ! Autant \u00e7a ne g\u00e8ne pas les adeptes du partage, autant les gens voulant garder secrets leurs algorithmes n'ont pas trouv\u00e9 cela g\u00e9nial...  C'est l\u00e0 qu'est apparu le  byte-code . Le byte-code, c'est du code machine pour une machine \"virtuelle\", c'est-\u00e0-dire une machine qui n'existe pas. Son code machine hypoth\u00e9tique serait minimaliste et transposable facilement sur n'importe quel processeur, avec moins d'efforts que pour un langage de programmation. L'id\u00e9e est ici de compiler quand le code source en du byte-code, et d'avoir un interpr\u00e9teur de byte-code sur chaque plate-forme.  Avec cette technique, on obtient une vitesse de fonctionnement raisonnable, une compatibilit\u00e9 avec toutes les machines qui poss\u00e8dent un interpr\u00e9teur byte-code et aucune fa\u00e7on de remonter au code source de d\u00e9part ! C'est la strat\u00e9gie utilis\u00e9e par Java ou .NET .   Bref. Lorsque l'on programme, on \u00e9crit donc en g\u00e9n\u00e9ral du  code source , dans un langage de programmation. Mais rien n'emp\u00eache de faire un diagramme pour se fixer les id\u00e9es ! \u00c7a arrive m\u00eame aux meilleurs professionnels apr\u00e8s plusieurs d\u00e9cennies de pratique.   \u00ab Je crains bien de ne pouvoir m'expliquer moi-m\u00eame... car je ne suis pas moi-m\u00eame, vous comprenez. \u00bb   Lewis Carroll, Les aventures d'Alice au pays des merveilles",
            "title": "Une question d'\u00e9criture et de repr\u00e9sentations"
        },
        {
            "location": "/generalites/01-generalites/#conclusion",
            "text": "Wow. \u00c7a c'\u00e9tait l'introduction ! Aller, il nous reste encore 2-3 \u00e9l\u00e9ments de\ncontexte \u00e0 poser et on d\u00e9marre pour de vrai !",
            "title": "Conclusion"
        },
        {
            "location": "/generalites/02-generalites/",
            "text": "G\u00e9n\u00e9ralit\u00e9s (suite)\n#\n\n\nTu es toujours l\u00e0 ? Toujours motiv\u00e9e ? Trop bien ! Reprenons ! \n\n\nUn travail \u00e0 vocation universelle\n#\n\n\nTu as vu dans le chapitre pr\u00e9c\u00e9dent que la programmation est l'art de m\u00ealer l'algorithmique \u00e0 un ou plusieurs langages.\n\n\nL'algorithmique est une question de m\u00e9thode (beaucoup) et de logique (un peu). Elle est \nind\u00e9pendante des langages\n de programmation et \nind\u00e9pendante des machines\n qui ex\u00e9cuteront le programme final. En revanche, le langage de programmation, lui, est li\u00e9 au cot\u00e9 physique et mat\u00e9riel de la machine car il doit \u00eatre compris et ex\u00e9cut\u00e9 par cette derni\u00e8re.\n\n\nOn va donc distinguer deux types de langages : \n\n\n\n\nles \nlangages bas niveau\n (ex: Assembleur, C ...) : ils permettent la manipulation des aspects mat\u00e9riels de la machine sur laquelle le programme est ex\u00e9cut\u00e9. Ce sont des langages \nterre \u00e0 terre\n, qui n\u00e9cessitent un micro-management de chaque chose : m\u00e9moire, p\u00e9riph\u00e9riques, registre processeur, interruptions, r\u00e9seau, etc. C'est \u00e0 la fois fastidieux, mais c'est terriblement pr\u00e9cis et puissant.\n\n\nles \nlangages de haut niveau\n (ex: Python, Javascript ...) : ils masquent le cot\u00e9 technique au profit d'une vision plus abstraite qui leur permettra plus facilement de manipuler des fichiers, des composants graphiques, des donn\u00e9es, etc. Ces langages font confiance au syst\u00e8me pour la gestion de la m\u00e9moire et du reste. Ils vont s'occuper essentiellement des aspects m\u00e9tiers.\n\n\n\n\nHaut et bas niveau n'ont pas de connotation p\u00e9jorative et n'ont \u00e9videmment rien \u00e0 voir avec les comp\u00e9tences techniques n\u00e9cessaires \u00e0 les programmer ! Il s'agit simplement d'une question d'efficacit\u00e9 sur un domaine particulier... et la facilit\u00e9 \u00e0 g\u00e9rer contraintes qui vont avec. On pourra toujours faire des choses de bas niveau avec un langage de haut niveau, ou des choses de haut niveau avec un langage de bas niveau. C'est juste \nbeaucoup\n moins pratique.\n\n\nEn g\u00e9n\u00e9ral, les langages de bas niveau sont des langages compil\u00e9s \u2014 car d\u00e9pendants d'une machine sp\u00e9cifique \u2014 alors que les langages de haut niveau sont souvent des langages interpr\u00e9t\u00e9s. \n\n\n\n\nLa Reine avait une seule m\u00e9thode pour r\u00e9soudre toutes les difficult\u00e9s, petites ou grosses.\n\n\u2014 \u00ab Qu'on lui coupe la t\u00eate ! \u00bb dit-elle sans m\u00eame lever les yeux. \n\n\nLewis Caroll, Alice au pays des merveilles\n\n\n\n\nProbl\u00e8mes fondamentaux en algorithmique\n#\n\n\nProgrammer, c'est comme r\u00e9soudre un casse t\u00eate. C'est un peu un d\u00e9fi qui n\u00e9cessite d'inventer une solution face \u00e0 un probl\u00e8me ou une situation donn\u00e9e. Reste \u00e0 le faire bien. Lorsqu'on programme, \u00e0 un moment ou un autre, on se posera des questions sur la \ncalculabilit\u00e9\n, la \ncomplexit\u00e9\n ou la \ncorrection\n de l'algorithme que l'on est en train de concevoir.\n\n\nLa \ncalculabilit\u00e9\n est la capacit\u00e9 \u00e0 calculer un r\u00e9sultat ou une solution : Pour une t\u00e2che donn\u00e9e, existe-t-il un algorithme qui la r\u00e9solve ? Existe-t-il des t\u00e2ches pour lesquelles il n'existe aucun algorithme ? Comment savoir si l'on est dans l'un ou l'autre des cas ?\n\n\nLa \ncomplexit\u00e9\n lie le nombre d'op\u00e9rations ex\u00e9cut\u00e9es par l'algorithme \u00e0 la taille ou la quantit\u00e9 des donn\u00e9es qu'il manipule. C'est donc une question de performance et d'optimisation : en combien de temps un algorithme va-t-il atteindre le r\u00e9sultat pr\u00e9vu ? De quel espace (m\u00e9moire) a-t-il besoin pour faire son travail ? \n\n\nLorsqu'on parle de complexit\u00e9, on utilise la notation \nO(...)\n pour parler des diff\u00e9rence de complexit\u00e9 d'un algorithme. Voici les principaux cas :\n\n\n\n\n\n\nO(1)\n : l'algorithme en temps constant. C'est excellent ! Il prends toujours le m\u00eame temps quelle que soit la taille ou la quantit\u00e9 de donn\u00e9es qu'il manipule.\n\n\n\n\n\n\nO(N)\n : l'algorithme en temps lin\u00e9aire. C'est moyen. Il prends un temps proportionnel \u00e0 la quantit\u00e9 de donn\u00e9es manipul\u00e9es.\n\n\n\n\n\n\nO(log N)\n : l'algorithme est en temps logarithmique. C'est tr\u00e8s bien ! Il prends moins de temps qu'un parcours complet des donn\u00e9es.\n\n\n\n\n\n\nO(N*N*..)\n : l'algorithme est en temps polynomial. C'est pas terrible. Il prends un temps qui est le carr\u00e9, le cube ou autre polyn\u00f4me de la quantit\u00e9 de donn\u00e9es manipul\u00e9es.\n\n\n\n\n\n\nO(exp(N))\n : l'algorithme est en temps exponentiel. C'est pire que tout ! Il y a de fortes chances que l'on n'obtienne pas les r\u00e9sultats dans un temps raisonnable (temps allou\u00e9 au projet, vie humaine, \u00e2ge de l'univers, etc.) ;-(\n\n\n\n\n\n\nEnfin la \ncorrection\n c'est pouvoir prouver qu'un algorithme r\u00e9pondre bien au besoin pour lequel il a \u00e9t\u00e9 con\u00e7u... et c'est loin d'\u00eatre \u00e9vident !\n\n\n\n\n\u00ab \u2014 Voudriez-vous me dire, s'il vous pla\u00eet, par o\u00f9 je dois m'en aller d'ici ? \n\n\u2014 Cela d\u00e9pend beaucoup de l'endroit o\u00f9 tu veux aller. \n\n\u2014 Peu m'importe l'endroit... \n\n\u2014 En ce cas, peu importe la route que tu prendras.  \n\n\u2014 ... pourvu que j'arrive quelque part \u00bb, ajouta Alice en guise d'explication. \n\n\u2014 \u00ab Oh, tu ne manqueras pas d'arriver quelque part, si tu marches assez longtemps. \u00bb\n\n\n\n\n\u00c0 suivre ?\n#\n\n\nOuf. Jusque l\u00e0 j'ai essay\u00e9 de poser le contexte, un peu de culture g\u00e9n\u00e9rale et du vocabulaire. Normalement on n'abordera plus ces sujets (\u00e0 moins que ta curiosit\u00e9 ne prenne le dessus... et que je me laisse faire).\n\n\nAu prochain chapitre on plongera dans les algorigrammes et on commencera \u00e0 dessiner nos id\u00e9es.\n\n\n\n\nProgrammer peut entra\u00eener de graves troubles de la vie sociale\n\n\nEn cas d'apparition des sympt\u00f4mes suivants :\n impossibilit\u00e9 de r\u00e9sister aux d\u00e9fis logiques, envie de dialoguer avec son programme, veill\u00e9e tardive devant son \u00e9cran, recherche compulsive sur StackOverflow, r\u00e9flexions nocturne sur un bug, parler d'un bug \u00e0 ses proches, dire \u00e0 quelqu'un qu'on arrive et arriver 1h apr\u00e8s, essayer d'automatiser la moindre t\u00e2che... n'essaye \npas\n de consulter un sp\u00e9cialiste, il est trop tard, tu \u00eates foutue ! ;-)",
            "title": "G\u00e9n\u00e9ralit\u00e9s II"
        },
        {
            "location": "/generalites/02-generalites/#generalites-suite",
            "text": "Tu es toujours l\u00e0 ? Toujours motiv\u00e9e ? Trop bien ! Reprenons !",
            "title": "G\u00e9n\u00e9ralit\u00e9s (suite)"
        },
        {
            "location": "/generalites/02-generalites/#un-travail-a-vocation-universelle",
            "text": "Tu as vu dans le chapitre pr\u00e9c\u00e9dent que la programmation est l'art de m\u00ealer l'algorithmique \u00e0 un ou plusieurs langages.  L'algorithmique est une question de m\u00e9thode (beaucoup) et de logique (un peu). Elle est  ind\u00e9pendante des langages  de programmation et  ind\u00e9pendante des machines  qui ex\u00e9cuteront le programme final. En revanche, le langage de programmation, lui, est li\u00e9 au cot\u00e9 physique et mat\u00e9riel de la machine car il doit \u00eatre compris et ex\u00e9cut\u00e9 par cette derni\u00e8re.  On va donc distinguer deux types de langages :    les  langages bas niveau  (ex: Assembleur, C ...) : ils permettent la manipulation des aspects mat\u00e9riels de la machine sur laquelle le programme est ex\u00e9cut\u00e9. Ce sont des langages  terre \u00e0 terre , qui n\u00e9cessitent un micro-management de chaque chose : m\u00e9moire, p\u00e9riph\u00e9riques, registre processeur, interruptions, r\u00e9seau, etc. C'est \u00e0 la fois fastidieux, mais c'est terriblement pr\u00e9cis et puissant.  les  langages de haut niveau  (ex: Python, Javascript ...) : ils masquent le cot\u00e9 technique au profit d'une vision plus abstraite qui leur permettra plus facilement de manipuler des fichiers, des composants graphiques, des donn\u00e9es, etc. Ces langages font confiance au syst\u00e8me pour la gestion de la m\u00e9moire et du reste. Ils vont s'occuper essentiellement des aspects m\u00e9tiers.   Haut et bas niveau n'ont pas de connotation p\u00e9jorative et n'ont \u00e9videmment rien \u00e0 voir avec les comp\u00e9tences techniques n\u00e9cessaires \u00e0 les programmer ! Il s'agit simplement d'une question d'efficacit\u00e9 sur un domaine particulier... et la facilit\u00e9 \u00e0 g\u00e9rer contraintes qui vont avec. On pourra toujours faire des choses de bas niveau avec un langage de haut niveau, ou des choses de haut niveau avec un langage de bas niveau. C'est juste  beaucoup  moins pratique.  En g\u00e9n\u00e9ral, les langages de bas niveau sont des langages compil\u00e9s \u2014 car d\u00e9pendants d'une machine sp\u00e9cifique \u2014 alors que les langages de haut niveau sont souvent des langages interpr\u00e9t\u00e9s.    La Reine avait une seule m\u00e9thode pour r\u00e9soudre toutes les difficult\u00e9s, petites ou grosses. \n\u2014 \u00ab Qu'on lui coupe la t\u00eate ! \u00bb dit-elle sans m\u00eame lever les yeux.   Lewis Caroll, Alice au pays des merveilles",
            "title": "Un travail \u00e0 vocation universelle"
        },
        {
            "location": "/generalites/02-generalites/#problemes-fondamentaux-en-algorithmique",
            "text": "Programmer, c'est comme r\u00e9soudre un casse t\u00eate. C'est un peu un d\u00e9fi qui n\u00e9cessite d'inventer une solution face \u00e0 un probl\u00e8me ou une situation donn\u00e9e. Reste \u00e0 le faire bien. Lorsqu'on programme, \u00e0 un moment ou un autre, on se posera des questions sur la  calculabilit\u00e9 , la  complexit\u00e9  ou la  correction  de l'algorithme que l'on est en train de concevoir.  La  calculabilit\u00e9  est la capacit\u00e9 \u00e0 calculer un r\u00e9sultat ou une solution : Pour une t\u00e2che donn\u00e9e, existe-t-il un algorithme qui la r\u00e9solve ? Existe-t-il des t\u00e2ches pour lesquelles il n'existe aucun algorithme ? Comment savoir si l'on est dans l'un ou l'autre des cas ?  La  complexit\u00e9  lie le nombre d'op\u00e9rations ex\u00e9cut\u00e9es par l'algorithme \u00e0 la taille ou la quantit\u00e9 des donn\u00e9es qu'il manipule. C'est donc une question de performance et d'optimisation : en combien de temps un algorithme va-t-il atteindre le r\u00e9sultat pr\u00e9vu ? De quel espace (m\u00e9moire) a-t-il besoin pour faire son travail ?   Lorsqu'on parle de complexit\u00e9, on utilise la notation  O(...)  pour parler des diff\u00e9rence de complexit\u00e9 d'un algorithme. Voici les principaux cas :    O(1)  : l'algorithme en temps constant. C'est excellent ! Il prends toujours le m\u00eame temps quelle que soit la taille ou la quantit\u00e9 de donn\u00e9es qu'il manipule.    O(N)  : l'algorithme en temps lin\u00e9aire. C'est moyen. Il prends un temps proportionnel \u00e0 la quantit\u00e9 de donn\u00e9es manipul\u00e9es.    O(log N)  : l'algorithme est en temps logarithmique. C'est tr\u00e8s bien ! Il prends moins de temps qu'un parcours complet des donn\u00e9es.    O(N*N*..)  : l'algorithme est en temps polynomial. C'est pas terrible. Il prends un temps qui est le carr\u00e9, le cube ou autre polyn\u00f4me de la quantit\u00e9 de donn\u00e9es manipul\u00e9es.    O(exp(N))  : l'algorithme est en temps exponentiel. C'est pire que tout ! Il y a de fortes chances que l'on n'obtienne pas les r\u00e9sultats dans un temps raisonnable (temps allou\u00e9 au projet, vie humaine, \u00e2ge de l'univers, etc.) ;-(    Enfin la  correction  c'est pouvoir prouver qu'un algorithme r\u00e9pondre bien au besoin pour lequel il a \u00e9t\u00e9 con\u00e7u... et c'est loin d'\u00eatre \u00e9vident !   \u00ab \u2014 Voudriez-vous me dire, s'il vous pla\u00eet, par o\u00f9 je dois m'en aller d'ici ?  \n\u2014 Cela d\u00e9pend beaucoup de l'endroit o\u00f9 tu veux aller.  \n\u2014 Peu m'importe l'endroit...  \n\u2014 En ce cas, peu importe la route que tu prendras.   \n\u2014 ... pourvu que j'arrive quelque part \u00bb, ajouta Alice en guise d'explication.  \n\u2014 \u00ab Oh, tu ne manqueras pas d'arriver quelque part, si tu marches assez longtemps. \u00bb",
            "title": "Probl\u00e8mes fondamentaux en algorithmique"
        },
        {
            "location": "/generalites/02-generalites/#a-suivre",
            "text": "Ouf. Jusque l\u00e0 j'ai essay\u00e9 de poser le contexte, un peu de culture g\u00e9n\u00e9rale et du vocabulaire. Normalement on n'abordera plus ces sujets (\u00e0 moins que ta curiosit\u00e9 ne prenne le dessus... et que je me laisse faire).  Au prochain chapitre on plongera dans les algorigrammes et on commencera \u00e0 dessiner nos id\u00e9es.   Programmer peut entra\u00eener de graves troubles de la vie sociale  En cas d'apparition des sympt\u00f4mes suivants :  impossibilit\u00e9 de r\u00e9sister aux d\u00e9fis logiques, envie de dialoguer avec son programme, veill\u00e9e tardive devant son \u00e9cran, recherche compulsive sur StackOverflow, r\u00e9flexions nocturne sur un bug, parler d'un bug \u00e0 ses proches, dire \u00e0 quelqu'un qu'on arrive et arriver 1h apr\u00e8s, essayer d'automatiser la moindre t\u00e2che... n'essaye  pas  de consulter un sp\u00e9cialiste, il est trop tard, tu \u00eates foutue ! ;-)",
            "title": "\u00c0 suivre ?"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/",
            "text": "Algorigrammes\n#\n\n\nT'ai-je dit que nous allons dessiner ? Oui ? Alors, viens dessiner ! Pr\u00e9pare un stylo, feutre, crayon... et des feuilles de papier !\n\n\nDans les prochains chapitres, nous allons dessiner des petites briques : chacune d'entre elle servira \u00e0 faire une petite chose simple (et un peu b\u00eate), mais en posant ces briques sur d'autres briques nous pourrons exprimer des choses de plus en plus malines et fantastiques ! (oui-oui !)\n\n\nMais dans un premier temps, je vais te pr\u00e9senter la vue d'ensemble !\n\n\nD\u00e9finition\n#\n\n\nAlgorigramme\n : Algori(thme) + (dia)gramme\n\n\nIl s'agit du nom de ce genre de dessins : c'est la repr\u00e9sentation graphique de l'encha\u00eenement des \nop\u00e9rations\n et des \nd\u00e9cisions\n effectu\u00e9es par un programme d'ordinateur. C'est l'ensemble de ces enchainements qui donne une utilit\u00e9 et un sens au programme.\n\n\nExemple d'algorigramme:\n\n\n\n\nDans cet algorigramme, j'ai volontairement masqu\u00e9 les intitul\u00e9s des cases car c'est la forme dans son ensemble que je veux te montrer (mais sois rassur\u00e9e, nous le retrouverons bient\u00f4t, car c'est l'un des prochains exercices).\n\n\nComme tu peux le voir ici, il y a un d\u00e9but, puis des \u00e9tapes qui se suivent sans choix, des \u00e9tapes qui se suivent avec des choix, des \u00e9tapes qui inter-agissent avec des patates sur les cot\u00e9s, et aussi une fin.\n\n\n\n\n\u00ab Mais alors, dit Alice, si le monde n'a absolument aucun sens, qui nous emp\u00eache d'en inventer un ? \u00bb \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\nStructure d'un programme\n#\n\n\nUn programme informatique suit en g\u00e9n\u00e9ral une structure calqu\u00e9e sur la suite des phases suivantes, dans l'ordre : \nd\u00e9clarations\n, \ninitialisations\n, \nprogramme principal\n, \ngestion des erreurs\n, \nsortie\n.\n\n\nPhase 1 : D\u00e9claration\n#\n\n\nComme dans une recette de cuisine, il s'agit de l'endroit ou l'on va annoncer ce dont on a besoin. \n\n\nPar exemple, pour la recette d'une omette, on dira \u00ab vous avez besoin de 3 oeufs, d'un oignon, de persil, d'une pinc\u00e9e de sel et de poivre... \u00bb. Ainsi le cuisiner va pouvoir v\u00e9rifier qu'il a bien tout ce dont il a besoin pour ex\u00e9cuter la recette et pr\u00e9parer les \u00e9l\u00e9enrs n\u00e9cessaires sur le plan de traval.\n\n\nDans un programme informatique il s'agira de faire l'inventaire des informations que l'on va chercher \u00e0 manipuler et surtout \u00e9viter de sortir une nouvelle information de notre chapeau en cours de route.\n\n\nOn verra par la suite (pseudo-code, code source, etc.) que cette partie est essentielle pour deux choses : d'abord pour que le programmeur puisse rester coh\u00e9rent tout au long de la mise en oeuvre de son id\u00e9e, ainsi qu'\u00e0 l'ordinateur pour puisse pr\u00e9parer la m\u00e9moire qui permettra de faire fonctionner le programme.\n\n\nPhase 2 : Initialisation\n#\n\n\nC'est l\u00e0 qu'on pr\u00e9pare nos ingr\u00e9dents !\n\n\nC'est bien de savoir qu'on aura besoin de 3 oeufs et d'un oignon, mais peut-\u00eatre faut-il les pr\u00e9parer ? mieux les pr\u00e9parer sur le plan de travail, ou bien aller les chercher dans le r\u00e9frig\u00e9rateur au moment ou l'on en a besoin ? \n\n\nNaturellement, pour un travail efficace, on pr\u00e9f\u00e8rera sortir les ingr\u00e9dients \u00e0 l'avance et peser les bonnes quantit\u00e9s avant de suivre les \u00e9tapes de la recette.\n\n\nPhase 3 : Programme principal\n#\n\n\nC'est la suite d'\u00e9tapes qui constitue le corps de la recette, c'est l\u00e0 qu'on m\u00e9lange, qu'on touille, qu'on fait tout ce qui doit \u00eatre fait afin de transformer les ingr\u00e9dients en une d\u00e9licieuse pr\u00e9paration !\n\n\nDans un programme informatique, c'est l\u00e0 que l'on organisera les donn\u00e9es entre elles, que l'on fera des calculs et qu'on l'on transformera les informations de d\u00e9part en quelque chose d'utile.\n\n\nPhase 4 : Gestion des erreurs\n#\n\n\nEn cuisine, il arrive qu'il y ait des rat\u00e9s. Parfois il suffit d'un instant d'inattention et c'est trop cuit, parfois c'est mal ex\u00e9cut\u00e9, parfois c'est les ingr\u00e9dients...\n\n\nDans un ordinateur aussi, \u00e7a arrive. Au d\u00e9but ce sera souvent la faute d'un programme mal con\u00e7u. On verra aussi que les interractions avec les donn\u00e9es ne se passent pas toujours comme pr\u00e9vu... et parfois c'est aussi l'utilisateur qui ne se comporte pas comme pr\u00e9vu (ou il le fait expr\u00e8s le fourbe !). \n\n\nBref. Il faut anticiper les cas d'erreurs et essayer des les g\u00e9rer le mieux possible. \u00c0 minima, dire \u00e0 l'utilisateur (ou aux autres programmes) qu'il y a une probleme... l'important c'est de communiquer ;-)\n\n\nPhase 5 : Sortie(s)\n#\n\n\nDans une recette, cela correspond au moment ou l'on retire le plat du feu, que l'on nappe les sauces ou que l'on dresse le plat.\n\n\nEn informatique, il s'agira de rentre pr\u00e9sentable, agr\u00e9able, claires et utiles les informations transform\u00e9es : le plus souvent il s'agirant d'afficher quelque chose, de produire un fichier ou de transmettre une information.\n\n\n\n\n\u00ab Prenez donc du vin, \u00bb dit le Li\u00e8vre d\u2019un ton engageant. \n\nAlice regarda tout autour de la table, mais il n\u2019y avait que du th\u00e9. \u00ab Je ne vois pas de vin, \u00bb fit-elle observer. \n\n\u00ab Il n\u2019y en a pas, \u00bb dit le Li\u00e8vre. \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\nConclusion\n#\n\n\n\u00c7a y est, on atteint le vif du sujet. Je viens bient\u00f4t te d\u00e9voiler l... ah non !... shuuut !... je ne peux rien dire jusqu'au prochain chapitre ! :-P",
            "title": "Principes de base"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#algorigrammes",
            "text": "T'ai-je dit que nous allons dessiner ? Oui ? Alors, viens dessiner ! Pr\u00e9pare un stylo, feutre, crayon... et des feuilles de papier !  Dans les prochains chapitres, nous allons dessiner des petites briques : chacune d'entre elle servira \u00e0 faire une petite chose simple (et un peu b\u00eate), mais en posant ces briques sur d'autres briques nous pourrons exprimer des choses de plus en plus malines et fantastiques ! (oui-oui !)  Mais dans un premier temps, je vais te pr\u00e9senter la vue d'ensemble !",
            "title": "Algorigrammes"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#definition",
            "text": "Algorigramme  : Algori(thme) + (dia)gramme  Il s'agit du nom de ce genre de dessins : c'est la repr\u00e9sentation graphique de l'encha\u00eenement des  op\u00e9rations  et des  d\u00e9cisions  effectu\u00e9es par un programme d'ordinateur. C'est l'ensemble de ces enchainements qui donne une utilit\u00e9 et un sens au programme.  Exemple d'algorigramme:   Dans cet algorigramme, j'ai volontairement masqu\u00e9 les intitul\u00e9s des cases car c'est la forme dans son ensemble que je veux te montrer (mais sois rassur\u00e9e, nous le retrouverons bient\u00f4t, car c'est l'un des prochains exercices).  Comme tu peux le voir ici, il y a un d\u00e9but, puis des \u00e9tapes qui se suivent sans choix, des \u00e9tapes qui se suivent avec des choix, des \u00e9tapes qui inter-agissent avec des patates sur les cot\u00e9s, et aussi une fin.   \u00ab Mais alors, dit Alice, si le monde n'a absolument aucun sens, qui nous emp\u00eache d'en inventer un ? \u00bb   Lewis Carroll, Les aventures d'Alice au pays des merveilles",
            "title": "D\u00e9finition"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#structure-dun-programme",
            "text": "Un programme informatique suit en g\u00e9n\u00e9ral une structure calqu\u00e9e sur la suite des phases suivantes, dans l'ordre :  d\u00e9clarations ,  initialisations ,  programme principal ,  gestion des erreurs ,  sortie .",
            "title": "Structure d'un programme"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#phase-1-declaration",
            "text": "Comme dans une recette de cuisine, il s'agit de l'endroit ou l'on va annoncer ce dont on a besoin.   Par exemple, pour la recette d'une omette, on dira \u00ab vous avez besoin de 3 oeufs, d'un oignon, de persil, d'une pinc\u00e9e de sel et de poivre... \u00bb. Ainsi le cuisiner va pouvoir v\u00e9rifier qu'il a bien tout ce dont il a besoin pour ex\u00e9cuter la recette et pr\u00e9parer les \u00e9l\u00e9enrs n\u00e9cessaires sur le plan de traval.  Dans un programme informatique il s'agira de faire l'inventaire des informations que l'on va chercher \u00e0 manipuler et surtout \u00e9viter de sortir une nouvelle information de notre chapeau en cours de route.  On verra par la suite (pseudo-code, code source, etc.) que cette partie est essentielle pour deux choses : d'abord pour que le programmeur puisse rester coh\u00e9rent tout au long de la mise en oeuvre de son id\u00e9e, ainsi qu'\u00e0 l'ordinateur pour puisse pr\u00e9parer la m\u00e9moire qui permettra de faire fonctionner le programme.",
            "title": "Phase 1 : D\u00e9claration"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#phase-2-initialisation",
            "text": "C'est l\u00e0 qu'on pr\u00e9pare nos ingr\u00e9dents !  C'est bien de savoir qu'on aura besoin de 3 oeufs et d'un oignon, mais peut-\u00eatre faut-il les pr\u00e9parer ? mieux les pr\u00e9parer sur le plan de travail, ou bien aller les chercher dans le r\u00e9frig\u00e9rateur au moment ou l'on en a besoin ?   Naturellement, pour un travail efficace, on pr\u00e9f\u00e8rera sortir les ingr\u00e9dients \u00e0 l'avance et peser les bonnes quantit\u00e9s avant de suivre les \u00e9tapes de la recette.",
            "title": "Phase 2 : Initialisation"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#phase-3-programme-principal",
            "text": "C'est la suite d'\u00e9tapes qui constitue le corps de la recette, c'est l\u00e0 qu'on m\u00e9lange, qu'on touille, qu'on fait tout ce qui doit \u00eatre fait afin de transformer les ingr\u00e9dients en une d\u00e9licieuse pr\u00e9paration !  Dans un programme informatique, c'est l\u00e0 que l'on organisera les donn\u00e9es entre elles, que l'on fera des calculs et qu'on l'on transformera les informations de d\u00e9part en quelque chose d'utile.",
            "title": "Phase 3 : Programme principal"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#phase-4-gestion-des-erreurs",
            "text": "En cuisine, il arrive qu'il y ait des rat\u00e9s. Parfois il suffit d'un instant d'inattention et c'est trop cuit, parfois c'est mal ex\u00e9cut\u00e9, parfois c'est les ingr\u00e9dients...  Dans un ordinateur aussi, \u00e7a arrive. Au d\u00e9but ce sera souvent la faute d'un programme mal con\u00e7u. On verra aussi que les interractions avec les donn\u00e9es ne se passent pas toujours comme pr\u00e9vu... et parfois c'est aussi l'utilisateur qui ne se comporte pas comme pr\u00e9vu (ou il le fait expr\u00e8s le fourbe !).   Bref. Il faut anticiper les cas d'erreurs et essayer des les g\u00e9rer le mieux possible. \u00c0 minima, dire \u00e0 l'utilisateur (ou aux autres programmes) qu'il y a une probleme... l'important c'est de communiquer ;-)",
            "title": "Phase 4 : Gestion des erreurs"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#phase-5-sorties",
            "text": "Dans une recette, cela correspond au moment ou l'on retire le plat du feu, que l'on nappe les sauces ou que l'on dresse le plat.  En informatique, il s'agira de rentre pr\u00e9sentable, agr\u00e9able, claires et utiles les informations transform\u00e9es : le plus souvent il s'agirant d'afficher quelque chose, de produire un fichier ou de transmettre une information.   \u00ab Prenez donc du vin, \u00bb dit le Li\u00e8vre d\u2019un ton engageant.  \nAlice regarda tout autour de la table, mais il n\u2019y avait que du th\u00e9. \u00ab Je ne vois pas de vin, \u00bb fit-elle observer.  \n\u00ab Il n\u2019y en a pas, \u00bb dit le Li\u00e8vre.   Lewis Carroll, Les aventures d'Alice au pays des merveilles",
            "title": "Phase 5 : Sortie(s)"
        },
        {
            "location": "/algorigrammes/01-definition-et-structure/#conclusion",
            "text": "\u00c7a y est, on atteint le vif du sujet. Je viens bient\u00f4t te d\u00e9voiler l... ah non !... shuuut !... je ne peux rien dire jusqu'au prochain chapitre ! :-P",
            "title": "Conclusion"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/",
            "text": "Algorigrammes (partie 2)\n#\n\n\nEst-tu bien repos\u00e9e ? Pr\u00eate \u00e0 reprendre ? As tu bien ton stylo-feutre-licorne toujours \u00e0 la main ? Et ta feuille impatiente ? \n\n\nC'est fois c'est la bonne, on dessine !\n\n\nLes instructions\n#\n\n\nLes \ninstructions\n sont les briques \u00e9l\u00e9mentaires de tout programme. Elle repr\u00e9sentent les actions que \nsait faire\n un ordinateur. Comme tu le constatera, il n'y en a pas beaucoup ! \n\n\nEn fait les ordinateurs sont assez limit\u00e9s ! Programmer est un peu comme parler \u00e0 un enfant de 8 ans atteint du \nsyndrome de Down\n... \u00e7a n\u00e9cessite de bien tout expliquer... et s'il arrive qu'il ne comprenne pas, ce n'est pas de sa faute puisque c'est sa condition, il est comme \u00e7a. Il n'y peut rien. L'erreur de communication viendra forc\u00e9ment du donneur d'explications qui aura \u00e9t\u00e9 trop rapide ou trop impr\u00e9cis dans sa demande par rapport aux capacit\u00e9s de l'enfant handicap\u00e9.\n\n\nCela pourrait donner la situation imaginaire suivante : \n\n\n\n\n\u00ab Dis petit, tu peux m'aider \u00e0 peindre ce mur ? \n\n\u2013 Moi aider ! Aider.. comment ? \u00bb demanda le petit trisomique, l'air perdu.\n\n\u2013 Mais avec un pinceau ! \n\n\u2013 Ah pinceau !... C'est quoi pinceau ? \n\n\u00ab Cette chose l\u00e0 ! \u00bb dis-je en lui tendant l'objet \n\nIl prends le pinceau et reste immobile devant moi, l'air b\u00e9at. \n\n\u00ab Hmm. Tu fais quoi l\u00e0 ? \n\n\u2013 Je peint, comme toi as dit... \u00bb, me r\u00e9ponds-t-il. \n\n\u00ab Mais non ! \u00bb craquais-je, \u00ab il faut faire des mouvements de bas en haut, comme \u00e7a ! \u00bb. \n\n\u00c0 peine eu-je fini ma phrase qu'il se mit \u00e0 singer mes mouvements... \n\n\u2013 \u00ab Oui, bon, c'est mieux..., mais tu oublies la peinture l\u00e0... \u00bb\n\n\n\n\nTu verras que communiquer avec un ordinateur, c'est pareil : \u00e7a consiste essentiellement \u00e0 d\u00e9composer tes id\u00e9es en actions et en id\u00e9es plus simples, puis \u00e0 les d\u00e9composer encore et encore... jusqu'\u00e0 les r\u00e9duire \u00e0 un ensemble de ces instructions toutes b\u00eates.\n\n\nJe sais que dit ainsi, c'est encore un peu abstrait. Il donc est temps de passer \u00e0 des exemples concrets et te pr\u00e9senter enfin les \ninstructions\n !\n\n\nLe d\u00e9but du programme\n#\n\n\nComme son nom l'indique, c'est l\u00e0 o\u00f9 l'ordinateur va commencer l'ex\u00e9cution de notre programme.\nEnsuite on suivra les fl\u00e8ches, dans l'ordre, pour passer d'une instruction \u00e0 l'autre.\n\n\n\n\nLa fin du programme\n#\n\n\nC'est l'endroit ou se termine le programme. L'ordinateur ne fait plus rien dans notre programme une fois arriv\u00e9 \u00e0 ce point. \n\n\nPour des raisons de clart\u00e9, on essaiera d'avoir une seule fin repr\u00e9sent\u00e9e dans notre algorigramme. Cependant il pourra y avoir plusieurs fl\u00e8ches arrivant \u00e0 la fin du programme.\n\n\n\n\nLes sorties\n#\n\n\nC'est le premier moyen qu'un programe peut utiliser pour interagir avec son environnement. Plus pr\u00e9cis\u00e9ment un programme pourra utiliser une \nsortie\n pour \ntransmettre de l'information vers l'ext\u00e9rieur\n. On pourra donc utiliser tout p\u00e9riph\u00e9rique branch\u00e9 \u00e0 notre ordinateur (\u00e9cran, imprimante, r\u00e9seau, enceintes, etc.)\n\n\nOn dessine l'information que l'on souhaite transmettre dans la case inclin\u00e9e \n\u00e0 gauche\n et le support sur lequel on va la transmettre dans la bulle \n\u00e0 droite\n.\n\n\nOn remarque aussi que la fl\u00e8che \nva vers\n la bulle.\n\n\n\n\n\n\n\n\nExemple 1. Afficher un texte \u00e0 l'\u00e9cran\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExemple 2. Envoyer un long texte sur l'imprimante\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLes entr\u00e9es\n#\n\n\nC'est le second moyen de communiquer avec l'environnement ext\u00e9rieur \u00e0 un programme. Avec une \nentr\u00e9e\n on pourra \nrecevoir de l'information\n provenant de l'ext\u00e9rieur.\n\n\nOn dessine l'information que l'on souhaite recevoir dans la case inclin\u00e9e \n\u00e0 gauche\n et le support sur lequel on va la recevoir dans la bulle \n\u00e0 droite\n. \n\n\nOn remarque que la fl\u00e8che \nvient\n de la bulle.\n\n\n\n\n\n\n\n\nExemple 3. Envoyer un long texte sur l'imprimante\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLes variables\n#\n\n\nCe sont des petites cases m\u00e9moire dont le contenu peut \n\u00eatre modifi\u00e9\n (et donc varier). \n\n\nPlus pr\u00e9cis\u00e9ment c'est le nom que l'on va donner \u00e0 \nune case\n ou \nun groupe de cases\n dans la m\u00e9moire de l'ordinateur... C'est comme une \u00e9tiquette sur un bagage.\n\n\n\n\nTout d'abord, pour une variable donn\u00e9e, on pourra lui \nassigner une valeur\n : c'est \u00e0 dire mettre une valeur dans la case d\u00e9sign\u00e9e par l'\u00e9tiquette. \nPar exemple, dans l'illustration ci-dessus on voit le r\u00e9sultat en m\u00e9moire apr\u00e8s l'assignation de la valeur \n18\n dans la variable \nage\n.\n\n\nIl est possible d'assigner des valeurs depuis le programme lui-m\u00eame, ou bien depuis une source d'information ext\u00e9rieure ! C'est l\u00e0 qu'interviennent les \nentr\u00e9es\n dont je te parlais plus haut.\n\n\n\n\n\n\n\n\nExemple 4. Assignation depuis le programme lui-m\u00eame\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExemple 5. Assignation depuis une entr\u00e9e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnsuite, pour une variable donn\u00e9e, on pourra aussi \nlire sa valeur\n : c'est \u00e0 dire lire le contenu de la case m\u00e9moire d\u00e9sign\u00e9e par l'\u00e9tiquette. On pourra utiliser cette valeur pour l'envoyer vers une \nsortie\n, ou pour faire une op\u00e9ration utilisant la valeur et produire un r\u00e9sultat.\n\n\n\n\n\n\n\n\nExemple 6. Lecture d'une variable : on affiche son contenu \u00e0 l'\u00e9cran\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn peut m\u00eame utiliser cette variable, faire une op\u00e9ration et enfin stocker le r\u00e9sultat dans cette m\u00eame variable ! Avec ce type d'instructions, on lit le cot\u00e9 droit de la fl\u00e8che avant le cot\u00e9 gauche : on lit les valeurs et on fait le calcul, on bientient un r\u00e9sultat et la variable (l'\u00e9tiquette) d\u00e9signe ensuite ce r\u00e9sultat.\n\n\n\n\n\n\n\n\nExemple 7. Lecture d'une variable, on fait un calcul et on le stocke sous le m\u00eame nom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUn gros rosier se dressait pr\u00e8s de l'entr\u00e9e du jardin.\nLes fleurs qu'il portait \u00e9taient blanches mais il y avait \ntrois jardiniers qui s'activaient \u00e0 les peindre en rouge.\nAlice trouva cela tr\u00e8s \u00e9trange et s'approcha pour les observer de plus pr\u00e8s. \n\n\nLewis Carroll, Les aventures d'Alice au pays des merveilles\n\n\n\n\nConclusion\n#\n\n\nNous avons pos\u00e9 les bases. Mais que va-t-on faire de ces quelques petites\ninstructions de rien du tout ?  J'ai comme l'intuition qu'il nous manque un\npetit quelque chose... mais quoi ? Nous le saurons au prochain \u00e9pisode !",
            "title": "Instructions \u00e9l\u00e9mentaires"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/#algorigrammes-partie-2",
            "text": "Est-tu bien repos\u00e9e ? Pr\u00eate \u00e0 reprendre ? As tu bien ton stylo-feutre-licorne toujours \u00e0 la main ? Et ta feuille impatiente ?   C'est fois c'est la bonne, on dessine !",
            "title": "Algorigrammes (partie 2)"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/#les-instructions",
            "text": "Les  instructions  sont les briques \u00e9l\u00e9mentaires de tout programme. Elle repr\u00e9sentent les actions que  sait faire  un ordinateur. Comme tu le constatera, il n'y en a pas beaucoup !   En fait les ordinateurs sont assez limit\u00e9s ! Programmer est un peu comme parler \u00e0 un enfant de 8 ans atteint du  syndrome de Down ... \u00e7a n\u00e9cessite de bien tout expliquer... et s'il arrive qu'il ne comprenne pas, ce n'est pas de sa faute puisque c'est sa condition, il est comme \u00e7a. Il n'y peut rien. L'erreur de communication viendra forc\u00e9ment du donneur d'explications qui aura \u00e9t\u00e9 trop rapide ou trop impr\u00e9cis dans sa demande par rapport aux capacit\u00e9s de l'enfant handicap\u00e9.  Cela pourrait donner la situation imaginaire suivante :    \u00ab Dis petit, tu peux m'aider \u00e0 peindre ce mur ?  \n\u2013 Moi aider ! Aider.. comment ? \u00bb demanda le petit trisomique, l'air perdu. \n\u2013 Mais avec un pinceau !  \n\u2013 Ah pinceau !... C'est quoi pinceau ?  \n\u00ab Cette chose l\u00e0 ! \u00bb dis-je en lui tendant l'objet  \nIl prends le pinceau et reste immobile devant moi, l'air b\u00e9at.  \n\u00ab Hmm. Tu fais quoi l\u00e0 ?  \n\u2013 Je peint, comme toi as dit... \u00bb, me r\u00e9ponds-t-il.  \n\u00ab Mais non ! \u00bb craquais-je, \u00ab il faut faire des mouvements de bas en haut, comme \u00e7a ! \u00bb.  \n\u00c0 peine eu-je fini ma phrase qu'il se mit \u00e0 singer mes mouvements...  \n\u2013 \u00ab Oui, bon, c'est mieux..., mais tu oublies la peinture l\u00e0... \u00bb   Tu verras que communiquer avec un ordinateur, c'est pareil : \u00e7a consiste essentiellement \u00e0 d\u00e9composer tes id\u00e9es en actions et en id\u00e9es plus simples, puis \u00e0 les d\u00e9composer encore et encore... jusqu'\u00e0 les r\u00e9duire \u00e0 un ensemble de ces instructions toutes b\u00eates.  Je sais que dit ainsi, c'est encore un peu abstrait. Il donc est temps de passer \u00e0 des exemples concrets et te pr\u00e9senter enfin les  instructions  !",
            "title": "Les instructions"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/#le-debut-du-programme",
            "text": "Comme son nom l'indique, c'est l\u00e0 o\u00f9 l'ordinateur va commencer l'ex\u00e9cution de notre programme.\nEnsuite on suivra les fl\u00e8ches, dans l'ordre, pour passer d'une instruction \u00e0 l'autre.",
            "title": "Le d\u00e9but du programme"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/#la-fin-du-programme",
            "text": "C'est l'endroit ou se termine le programme. L'ordinateur ne fait plus rien dans notre programme une fois arriv\u00e9 \u00e0 ce point.   Pour des raisons de clart\u00e9, on essaiera d'avoir une seule fin repr\u00e9sent\u00e9e dans notre algorigramme. Cependant il pourra y avoir plusieurs fl\u00e8ches arrivant \u00e0 la fin du programme.",
            "title": "La fin du programme"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/#les-sorties",
            "text": "C'est le premier moyen qu'un programe peut utiliser pour interagir avec son environnement. Plus pr\u00e9cis\u00e9ment un programme pourra utiliser une  sortie  pour  transmettre de l'information vers l'ext\u00e9rieur . On pourra donc utiliser tout p\u00e9riph\u00e9rique branch\u00e9 \u00e0 notre ordinateur (\u00e9cran, imprimante, r\u00e9seau, enceintes, etc.)  On dessine l'information que l'on souhaite transmettre dans la case inclin\u00e9e  \u00e0 gauche  et le support sur lequel on va la transmettre dans la bulle  \u00e0 droite .  On remarque aussi que la fl\u00e8che  va vers  la bulle.     Exemple 1. Afficher un texte \u00e0 l'\u00e9cran             Exemple 2. Envoyer un long texte sur l'imprimante",
            "title": "Les sorties"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/#les-entrees",
            "text": "C'est le second moyen de communiquer avec l'environnement ext\u00e9rieur \u00e0 un programme. Avec une  entr\u00e9e  on pourra  recevoir de l'information  provenant de l'ext\u00e9rieur.  On dessine l'information que l'on souhaite recevoir dans la case inclin\u00e9e  \u00e0 gauche  et le support sur lequel on va la recevoir dans la bulle  \u00e0 droite .   On remarque que la fl\u00e8che  vient  de la bulle.     Exemple 3. Envoyer un long texte sur l'imprimante",
            "title": "Les entr\u00e9es"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/#les-variables",
            "text": "Ce sont des petites cases m\u00e9moire dont le contenu peut  \u00eatre modifi\u00e9  (et donc varier).   Plus pr\u00e9cis\u00e9ment c'est le nom que l'on va donner \u00e0  une case  ou  un groupe de cases  dans la m\u00e9moire de l'ordinateur... C'est comme une \u00e9tiquette sur un bagage.   Tout d'abord, pour une variable donn\u00e9e, on pourra lui  assigner une valeur  : c'est \u00e0 dire mettre une valeur dans la case d\u00e9sign\u00e9e par l'\u00e9tiquette. \nPar exemple, dans l'illustration ci-dessus on voit le r\u00e9sultat en m\u00e9moire apr\u00e8s l'assignation de la valeur  18  dans la variable  age .  Il est possible d'assigner des valeurs depuis le programme lui-m\u00eame, ou bien depuis une source d'information ext\u00e9rieure ! C'est l\u00e0 qu'interviennent les  entr\u00e9es  dont je te parlais plus haut.     Exemple 4. Assignation depuis le programme lui-m\u00eame             Exemple 5. Assignation depuis une entr\u00e9e          Ensuite, pour une variable donn\u00e9e, on pourra aussi  lire sa valeur  : c'est \u00e0 dire lire le contenu de la case m\u00e9moire d\u00e9sign\u00e9e par l'\u00e9tiquette. On pourra utiliser cette valeur pour l'envoyer vers une  sortie , ou pour faire une op\u00e9ration utilisant la valeur et produire un r\u00e9sultat.     Exemple 6. Lecture d'une variable : on affiche son contenu \u00e0 l'\u00e9cran          On peut m\u00eame utiliser cette variable, faire une op\u00e9ration et enfin stocker le r\u00e9sultat dans cette m\u00eame variable ! Avec ce type d'instructions, on lit le cot\u00e9 droit de la fl\u00e8che avant le cot\u00e9 gauche : on lit les valeurs et on fait le calcul, on bientient un r\u00e9sultat et la variable (l'\u00e9tiquette) d\u00e9signe ensuite ce r\u00e9sultat.     Exemple 7. Lecture d'une variable, on fait un calcul et on le stocke sous le m\u00eame nom           Un gros rosier se dressait pr\u00e8s de l'entr\u00e9e du jardin.\nLes fleurs qu'il portait \u00e9taient blanches mais il y avait \ntrois jardiniers qui s'activaient \u00e0 les peindre en rouge.\nAlice trouva cela tr\u00e8s \u00e9trange et s'approcha pour les observer de plus pr\u00e8s.   Lewis Carroll, Les aventures d'Alice au pays des merveilles",
            "title": "Les variables"
        },
        {
            "location": "/algorigrammes/02-instructions-elementaires/#conclusion",
            "text": "Nous avons pos\u00e9 les bases. Mais que va-t-on faire de ces quelques petites\ninstructions de rien du tout ?  J'ai comme l'intuition qu'il nous manque un\npetit quelque chose... mais quoi ? Nous le saurons au prochain \u00e9pisode !",
            "title": "Conclusion"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/",
            "text": "Algorigrammes (partie 3)\n#\n\n\nFinissons tout doucement notre chemin vers la ma\u00eetrise des algorigrammes dans ce nouveau chapitre ;-)\n\n\n\n\n\u00ab C'est bien engag\u00e9 cot\u00e9 Irlandais... \nballe r\u00e9cup\u00e9r\u00e9e par Murphy... \npar Hendrick... Pogba... \net oui, elle a \u00e9t\u00e9 contr\u00e9e ! \u00bb \n\n\nEuro 2016, France-Irlande (2-1)\n\n\n\n\nRetour sur les instructions\n#\n\n\nDans le chapitre pr\u00e9c\u00e9dent, je te pr\u00e9sentais les quelques  \ninstructions\n de base d'un programme : le d\u00e9but, la fin, les entr\u00e9es, les sorties, les variables.\n\n\nVoyons un premier algorigramme qui assemble toutes ces briques vues jusque l\u00e0 :\n\n\n\n\nAlors, comment interpr\u00e9ter cela ? C'est tr\u00e8s simple :\n\n\n\n\non d\u00e9marre sur le rond noir (d\u00e9but), \n\n\non suit la fl\u00e8che,\n\n\non arrive sur une instruction de sortie, qui prends le texte \n\"Quel est ton nom\"\n et qui l'affiche sur le p\u00e9riph\u00e9rique \nEcran\n,\n\n\non suite la fl\u00e8che,\n\n\non tombe sur une instruction d'entr\u00e9e, c'est \u00e0 dire que le programme attend que l'utilisateur tape quelque chose, cela peut \u00eatre n'importe quoi (par exemple : \n\"Anatole\"\n). Lorsqu'il valide, le resultat est enregistr\u00e9 dans la variable (c'est \u00e0 dire une case m\u00e9moire point\u00e9e par une \u00e9tiquette) que l'on choisit d'appeller \nnom\n,\n\n\non suit la fl\u00e8che,\n\n\non arrive sur une nouvelle sortie qui prends le texte \n\"Bonjour \"\n et qui lui ajoute la variable \nnom\n (c'est \u00e0 dire le contenu de la case m\u00e9moire point\u00e9 par l'\u00e9quiquette). On obtient donc en m\u00e9moire le texte \n\"Bonjour Anatole\"\n qui part alors vers le p\u00e9riph\u00e9rique \n\u00c9cran\n.\n\n\non suit la fl\u00e8che,\n\n\non arrive sur le rond cercl\u00e9, c'est donc la fin du programe.\n\n\n\n\nWhaou. Nous sommes donc capables de demander un nom \u00e0 l'utilisateur et de le saluer ! Pas mal pour un premier programme, non ?\n\n\nLes instructions que nous avons vues jusque l\u00e0 permettent de faire bien des choses, mais elle ont un toutes gros inconv\u00e9nient : elle ne permetttent la conception que des programes \ntotalement lin\u00e9aires\n, quelle que soient les valeurs des variables ou les entr\u00e9es du programme.\n\n\nPour am\u00e9liorer cela, il faudrait \u00eatre capable d'exprimer des conditions, et de faire des choix... et c'est l\u00e0 qu'interviennent les \nexpressions bool\u00e9ennes\n et les \ninstructions conditionnelles\n.\n\n\nLes expressions bool\u00e9eennes\n#\n\n\nLes \nexpressions bool\u00e9ennes\n sont des affirmations dont le r\u00e9sultat est soit \nVRAI\n, soit \nFAUX\n. Cela peut \u00eatre une comparaison, une formule, ou le r\u00e9sultat d'un sous-programme (on en parlera plus tard de ce dernier point). Ce sont elles que nous allons utiliser comme conditions pour d\u00e9cider de la suite de notre programme.\n\n\nOn appelle \nVRAI\n et \nFAUX\n des \nvaleurs bool\u00e9ennes\n. Sur la base de ces valeurs on peut d\u00e9finir quelques op\u00e9rations logiques :\n\n\nLa n\u00e9gation (NON ...)\n#\n\n\nElle inverse la valeur de d\u00e9part (ici A).\n\n\n\n\n\n\n\n\nA\n\n\nnon A\n\n\n\n\n\n\n\n\n\n\nVRAI\n\n\nFAUX\n\n\n\n\n\n\nFAUX\n\n\nVRAI\n\n\n\n\n\n\n\n\nConjonction (... ET ...)\n#\n\n\nElle n'est vraie que si les deux valeurs de d\u00e9part (A, B) sont toutes deux vraies.\n\n\n\n\n\n\n\n\nA\n\n\nB\n\n\nA et B\n\n\n\n\n\n\n\n\n\n\nVRAI\n\n\nVRAI\n\n\nVRAI\n\n\n\n\n\n\nVRAI\n\n\nFAUX\n\n\nFAUX\n\n\n\n\n\n\nFAUX\n\n\nVRAI\n\n\nFAUX\n\n\n\n\n\n\nFAUX\n\n\nFAUX\n\n\nFAUX\n\n\n\n\n\n\n\n\nDisjonction (... OU ...)\n#\n\n\nElle est vraie si l'une des deux valeurs de d\u00e9part (A, B) est vraie.\n\n\n\n\n\n\n\n\nA\n\n\nB\n\n\nA ou B\n\n\n\n\n\n\n\n\n\n\nVRAI\n\n\nVRAI\n\n\nVRAI\n\n\n\n\n\n\nVRAI\n\n\nFAUX\n\n\nVRAI\n\n\n\n\n\n\nFAUX\n\n\nVRAI\n\n\nVRAI\n\n\n\n\n\n\nFAUX\n\n\nFAUX\n\n\nFAUX\n\n\n\n\n\n\n\n\nL'exclusion mutuelle (... XOR ...)\n#\n\n\nElle n'est vraie que si les deux valeurs (A, B) sont diff\u00e9rentes.\n\n\n\n\n\n\n\n\nA\n\n\nB\n\n\nA xor B\n\n\n\n\n\n\n\n\n\n\nVRAI\n\n\nVRAI\n\n\nFAUX\n\n\n\n\n\n\nVRAI\n\n\nFAUX\n\n\nVRAI\n\n\n\n\n\n\nFAUX\n\n\nVRAI\n\n\nVRAI\n\n\n\n\n\n\nFAUX\n\n\nFAUX\n\n\nFAUX\n\n\n\n\n\n\n\n\nPropri\u00e9t\u00e9s des op\u00e9rateurs\n#\n\n\nLes op\u00e9rateurs de l'alg\u00e8bre bool\u00e9enne ont tout un ensemble de propri\u00e9t\u00e9s comme les op\u00e9rateurs des math\u00e9matiques : \ncommutativit\u00e9\n, \ndistributivit\u00e9\n, etc. \nSi cela t'int\u00e9resse, je te renvoie \u00e0 \nla page Wikipedia\n, mais nous y reviendrons de toute fa\u00e7on lorsque nous en aurons besoin dans quelques chapitres.\n\n\n\n\nL'autre dimanche, le serveur m'a demand\u00e9 : \n\n\u00ab Vous voulez du carot'cake ou de la tarte au citron ? \u00bb \n\nEt l\u00e0, j'ai instinctivement r\u00e9pondu \u00ab VRAI ! \u00bb...\n\n\nD\u00e9formation professionelle n\u00b05\n\n\n\n\nLes instructions conditionnelles\n#\n\n\nLes \ninstructions conditionnelles\n sont des instructions qui offrent plusieurs chemins possibles pour le programme \u00e0 partir d'une m\u00eame instruction. Pour cela elle permettant \u00e9galement de prendre des d\u00e9cisions sur le chemin \u00e0 prendre en fonction de certaines conditions.\n\n\nLes tests conditionnels\n#\n\n\nLes \ntests conditionnels\n sont des instructions qui poss\u00e8dent deux branches et servent \u00e0 orienter le programme en fonction d'une condition :\n\n\n\n\nSi la condition vaut \nVRAI\n, on suivra le chemin de la fl\u00e8che normale (\u00e0 gauche dans l'illustration ci-dessous),\n\n\nSi la condition vaut \nFAUX\n, on suivra la fl\u00e8che \nnot\u00e9e par un cercle\n ou une croix (\u00e0 droite dans l'illustration ci-dessous).\n\n\n\n\nLes branches d'un test conditionel peuvent contenir autant d'instructions que l'on souhaite et elle peuvent \u00eatre de tout les types possibles (on peut tres bien mettre un test conditionel dans un test conditionnel dans un test conditionnel si on veut...).\n\n\nM\u00eame si ce n'est pas obligatoire sur le papier (puisqu'on peut dessiner comme on veut), les branches d'un test conditionnel finissent toujours par se rejoidre dans un vrai programme : apr\u00e8s les branches, on a soit une suite commune d'instructions, soit les branches pointent directement sur la fin du programme.\n\n\nRemarque \u00e9galement qu'avec l'instruction de \ntest conditionnel\n les deux fl\u00e8ches de chemin partent \nvers le bas\n du programme.\n\n\n\n\nExemple 5.1. Le videur de base\n#\n\n\nPour illustrer mes propos sur les tests conditionnels, prenons un exemple que tu as s\u00fbrement d\u00e9j\u00e0 v\u00e9cu : le videur \u00e0 l'entr\u00e9e de la boite de nuit. Son r\u00f4le est simple: il v\u00e9rifie l'age de la personne qui se pr\u00e9sente \u00e0 l'entr\u00e9e, et ne laisse passer que les adultes dans la boite de nuit. S'il \u00e9tait un programme, son travail ressemblerait \u00e0 cela :\n\n\n\n\nExemple 5.2. Le videur sexiste\n#\n\n\nComme beaucoup de videurs, il arrive que celui-ci soit sexiste : apr\u00e8s avoir v\u00e9rifi\u00e9 l'age, il laisse automatiquement passer les filles (ne me demande pas pourquoi...), en revanche, un mec devra obligatoirement \u00eatre accompagn\u00e9 pour passer !\n\n\nCela donnerait l'algorigramme suivant :\n\n\n\n\n\n\n\nLes boucles\n#\n\n\nLes \nboucles\n sont tr\u00e8s semblables aux \ntest conditionnels\n. La diff\u00e9rence ? Les boucles poss\u00e8dent un chemin qui part \nvers l'arri\u00e8re\n du programme. Elle sont les seules instructions \u00e0 avoir la possibilit\u00e9 de faire cela.\n\n\nComme l'une des fl\u00e8che part vers l'arri\u00e8re, il y a toute une partie du code qui sera r\u00e9p\u00e9t\u00e9e entre la fl\u00e8che qui remonte et la condition de la boucle, on appelle cette partie le \ncorps de la boucle\n. \n\n\nAs-tu d\u00e9j\u00e0 vu un programme \nfreezer\n ? ou bien un logiciel dont la fen\u00eatre ne r\u00e9pond plus ? Eh bien c'est une boucle infinie dans le programe ! C'est pour cela qu'il est \nvital\n de correctement d\u00e9finir la condition d'une boucle, car c'est elle qui permettra de continuer ou d'arr\u00eater (et sortir) de la boucle. On parlera dans ce cas de  \ncondition de continuation\n ou de \ncondition d'arr\u00eat\n (l'un \u00e9tant l'inverse de l'autre).\n\n\nLorsque tu feras des boucles, fais bien attention \u00e0 ce que le \ncorps de la boucle\n contienne bien des instructions qui influent sur \nla condition de continuation\n, sinon c'est que la boucle n'est influenc\u00e9e qu'une fois pour toutes par quelque chose d'ant\u00e9rieur... et c'est une boucle infinie garantie.\n\n\n\n\nExemple 5.3. Afficher les chiffres de 1 \u00e0 10\n#\n\n\nDans l'exemple qui suit, il s'agit d'afficher tous les chiffres de 1 \u00e0 10, sans faire nous m\u00eame l'affichage de toutes les valeurs interm\u00e9diaires ! D'accord, \u00e7a ne serait pas trop difficile pour 1 \u00e0 10, mais imagine de 1 \u00e0 100... ou de 1 \u00e0 1000 ! C'est l\u00e0 qu'il faut \u00eatre astucieux ! \n\n\nPour cela, nous utilisons un \ncompteur\n : c'est \u00e0 dire une variable que nous allons charger de savoir \u00e0 quel tour nous en sommes tout au long du programme. Pour cela il faut l'initialiser correctement au d\u00e9but, puis la mettre \u00e0 jour \u00e0 chaque tour de boucle (en ajoutant 1 \u00e0 la variable). Et comme elle sert justement \u00e0 \ncompter\n, on l'utilise \u00e9galement pour afficher le num\u00e9ro du tour actuel.\n\n\nNotre condition de boucle v\u00e9rifie \u00e0 chaque tour que le compteur  \nne d\u00e9passe pas 10\n et PAF (!), \u00e7a donne bien la suite des nombres de 1 \u00e0 10 !\n\n\n\n\nExemple 5.4. Afficher les chiffres de 10 \u00e0 1 (\u00e0 l'envers)\n#\n\n\nPresque le m\u00eame exemple qu'au dessus : on utilise \u00e9galement un compteur, sauf que cette fois-ci nous allons l'initialiser \u00e0 la valeur la plus grande au d\u00e9but puis compter en arri\u00e8re, en retirant 1 \u00e0 la variable chaque tour !\n\n\n\n\nConclusion\n#\n\n\nOuf, cette fois-ci c'\u00e9tait un peu plus costaud ! Nous allons donc prendre le temps de bien assimiler tout \u00e7a avant d\u2019encha\u00eener vers la derni\u00e8re notion qui reste... puis vers du vrai code.\n\n\nPour le prochain num\u00e9ro, je te propose de voir en d\u00e9tail les solutions des exercices, et je vais aussi en profiter pour te pr\u00e9senter une d\u00e9marche d'analyse permettant de partir d'un probl\u00e8me (ou d'un \u00e9nonc\u00e9) et de construire un programme.",
            "title": "Op\u00e9rateurs conditionnels"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#algorigrammes-partie-3",
            "text": "Finissons tout doucement notre chemin vers la ma\u00eetrise des algorigrammes dans ce nouveau chapitre ;-)   \u00ab C'est bien engag\u00e9 cot\u00e9 Irlandais... \nballe r\u00e9cup\u00e9r\u00e9e par Murphy... \npar Hendrick... Pogba... \net oui, elle a \u00e9t\u00e9 contr\u00e9e ! \u00bb   Euro 2016, France-Irlande (2-1)",
            "title": "Algorigrammes (partie 3)"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#retour-sur-les-instructions",
            "text": "Dans le chapitre pr\u00e9c\u00e9dent, je te pr\u00e9sentais les quelques   instructions  de base d'un programme : le d\u00e9but, la fin, les entr\u00e9es, les sorties, les variables.  Voyons un premier algorigramme qui assemble toutes ces briques vues jusque l\u00e0 :   Alors, comment interpr\u00e9ter cela ? C'est tr\u00e8s simple :   on d\u00e9marre sur le rond noir (d\u00e9but),   on suit la fl\u00e8che,  on arrive sur une instruction de sortie, qui prends le texte  \"Quel est ton nom\"  et qui l'affiche sur le p\u00e9riph\u00e9rique  Ecran ,  on suite la fl\u00e8che,  on tombe sur une instruction d'entr\u00e9e, c'est \u00e0 dire que le programme attend que l'utilisateur tape quelque chose, cela peut \u00eatre n'importe quoi (par exemple :  \"Anatole\" ). Lorsqu'il valide, le resultat est enregistr\u00e9 dans la variable (c'est \u00e0 dire une case m\u00e9moire point\u00e9e par une \u00e9tiquette) que l'on choisit d'appeller  nom ,  on suit la fl\u00e8che,  on arrive sur une nouvelle sortie qui prends le texte  \"Bonjour \"  et qui lui ajoute la variable  nom  (c'est \u00e0 dire le contenu de la case m\u00e9moire point\u00e9 par l'\u00e9quiquette). On obtient donc en m\u00e9moire le texte  \"Bonjour Anatole\"  qui part alors vers le p\u00e9riph\u00e9rique  \u00c9cran .  on suit la fl\u00e8che,  on arrive sur le rond cercl\u00e9, c'est donc la fin du programe.   Whaou. Nous sommes donc capables de demander un nom \u00e0 l'utilisateur et de le saluer ! Pas mal pour un premier programme, non ?  Les instructions que nous avons vues jusque l\u00e0 permettent de faire bien des choses, mais elle ont un toutes gros inconv\u00e9nient : elle ne permetttent la conception que des programes  totalement lin\u00e9aires , quelle que soient les valeurs des variables ou les entr\u00e9es du programme.  Pour am\u00e9liorer cela, il faudrait \u00eatre capable d'exprimer des conditions, et de faire des choix... et c'est l\u00e0 qu'interviennent les  expressions bool\u00e9ennes  et les  instructions conditionnelles .",
            "title": "Retour sur les instructions"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#les-expressions-booleeennes",
            "text": "Les  expressions bool\u00e9ennes  sont des affirmations dont le r\u00e9sultat est soit  VRAI , soit  FAUX . Cela peut \u00eatre une comparaison, une formule, ou le r\u00e9sultat d'un sous-programme (on en parlera plus tard de ce dernier point). Ce sont elles que nous allons utiliser comme conditions pour d\u00e9cider de la suite de notre programme.  On appelle  VRAI  et  FAUX  des  valeurs bool\u00e9ennes . Sur la base de ces valeurs on peut d\u00e9finir quelques op\u00e9rations logiques :",
            "title": "Les expressions bool\u00e9eennes"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#la-negation-non",
            "text": "Elle inverse la valeur de d\u00e9part (ici A).     A  non A      VRAI  FAUX    FAUX  VRAI",
            "title": "La n\u00e9gation (NON ...)"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#conjonction-et",
            "text": "Elle n'est vraie que si les deux valeurs de d\u00e9part (A, B) sont toutes deux vraies.     A  B  A et B      VRAI  VRAI  VRAI    VRAI  FAUX  FAUX    FAUX  VRAI  FAUX    FAUX  FAUX  FAUX",
            "title": "Conjonction (... ET ...)"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#disjonction-ou",
            "text": "Elle est vraie si l'une des deux valeurs de d\u00e9part (A, B) est vraie.     A  B  A ou B      VRAI  VRAI  VRAI    VRAI  FAUX  VRAI    FAUX  VRAI  VRAI    FAUX  FAUX  FAUX",
            "title": "Disjonction (... OU ...)"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#lexclusion-mutuelle-xor",
            "text": "Elle n'est vraie que si les deux valeurs (A, B) sont diff\u00e9rentes.     A  B  A xor B      VRAI  VRAI  FAUX    VRAI  FAUX  VRAI    FAUX  VRAI  VRAI    FAUX  FAUX  FAUX",
            "title": "L'exclusion mutuelle (... XOR ...)"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#proprietes-des-operateurs",
            "text": "Les op\u00e9rateurs de l'alg\u00e8bre bool\u00e9enne ont tout un ensemble de propri\u00e9t\u00e9s comme les op\u00e9rateurs des math\u00e9matiques :  commutativit\u00e9 ,  distributivit\u00e9 , etc. \nSi cela t'int\u00e9resse, je te renvoie \u00e0  la page Wikipedia , mais nous y reviendrons de toute fa\u00e7on lorsque nous en aurons besoin dans quelques chapitres.   L'autre dimanche, le serveur m'a demand\u00e9 :  \n\u00ab Vous voulez du carot'cake ou de la tarte au citron ? \u00bb  \nEt l\u00e0, j'ai instinctivement r\u00e9pondu \u00ab VRAI ! \u00bb...  D\u00e9formation professionelle n\u00b05",
            "title": "Propri\u00e9t\u00e9s des op\u00e9rateurs"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#les-instructions-conditionnelles",
            "text": "Les  instructions conditionnelles  sont des instructions qui offrent plusieurs chemins possibles pour le programme \u00e0 partir d'une m\u00eame instruction. Pour cela elle permettant \u00e9galement de prendre des d\u00e9cisions sur le chemin \u00e0 prendre en fonction de certaines conditions.",
            "title": "Les instructions conditionnelles"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#les-tests-conditionnels",
            "text": "Les  tests conditionnels  sont des instructions qui poss\u00e8dent deux branches et servent \u00e0 orienter le programme en fonction d'une condition :   Si la condition vaut  VRAI , on suivra le chemin de la fl\u00e8che normale (\u00e0 gauche dans l'illustration ci-dessous),  Si la condition vaut  FAUX , on suivra la fl\u00e8che  not\u00e9e par un cercle  ou une croix (\u00e0 droite dans l'illustration ci-dessous).   Les branches d'un test conditionel peuvent contenir autant d'instructions que l'on souhaite et elle peuvent \u00eatre de tout les types possibles (on peut tres bien mettre un test conditionel dans un test conditionnel dans un test conditionnel si on veut...).  M\u00eame si ce n'est pas obligatoire sur le papier (puisqu'on peut dessiner comme on veut), les branches d'un test conditionnel finissent toujours par se rejoidre dans un vrai programme : apr\u00e8s les branches, on a soit une suite commune d'instructions, soit les branches pointent directement sur la fin du programme.  Remarque \u00e9galement qu'avec l'instruction de  test conditionnel  les deux fl\u00e8ches de chemin partent  vers le bas  du programme.",
            "title": "Les tests conditionnels"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#exemple-51-le-videur-de-base",
            "text": "Pour illustrer mes propos sur les tests conditionnels, prenons un exemple que tu as s\u00fbrement d\u00e9j\u00e0 v\u00e9cu : le videur \u00e0 l'entr\u00e9e de la boite de nuit. Son r\u00f4le est simple: il v\u00e9rifie l'age de la personne qui se pr\u00e9sente \u00e0 l'entr\u00e9e, et ne laisse passer que les adultes dans la boite de nuit. S'il \u00e9tait un programme, son travail ressemblerait \u00e0 cela :",
            "title": "Exemple 5.1. Le videur de base"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#exemple-52-le-videur-sexiste",
            "text": "Comme beaucoup de videurs, il arrive que celui-ci soit sexiste : apr\u00e8s avoir v\u00e9rifi\u00e9 l'age, il laisse automatiquement passer les filles (ne me demande pas pourquoi...), en revanche, un mec devra obligatoirement \u00eatre accompagn\u00e9 pour passer !  Cela donnerait l'algorigramme suivant :",
            "title": "Exemple 5.2. Le videur sexiste"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#les-boucles",
            "text": "Les  boucles  sont tr\u00e8s semblables aux  test conditionnels . La diff\u00e9rence ? Les boucles poss\u00e8dent un chemin qui part  vers l'arri\u00e8re  du programme. Elle sont les seules instructions \u00e0 avoir la possibilit\u00e9 de faire cela.  Comme l'une des fl\u00e8che part vers l'arri\u00e8re, il y a toute une partie du code qui sera r\u00e9p\u00e9t\u00e9e entre la fl\u00e8che qui remonte et la condition de la boucle, on appelle cette partie le  corps de la boucle .   As-tu d\u00e9j\u00e0 vu un programme  freezer  ? ou bien un logiciel dont la fen\u00eatre ne r\u00e9pond plus ? Eh bien c'est une boucle infinie dans le programe ! C'est pour cela qu'il est  vital  de correctement d\u00e9finir la condition d'une boucle, car c'est elle qui permettra de continuer ou d'arr\u00eater (et sortir) de la boucle. On parlera dans ce cas de   condition de continuation  ou de  condition d'arr\u00eat  (l'un \u00e9tant l'inverse de l'autre).  Lorsque tu feras des boucles, fais bien attention \u00e0 ce que le  corps de la boucle  contienne bien des instructions qui influent sur  la condition de continuation , sinon c'est que la boucle n'est influenc\u00e9e qu'une fois pour toutes par quelque chose d'ant\u00e9rieur... et c'est une boucle infinie garantie.",
            "title": "Les boucles"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#exemple-53-afficher-les-chiffres-de-1-a-10",
            "text": "Dans l'exemple qui suit, il s'agit d'afficher tous les chiffres de 1 \u00e0 10, sans faire nous m\u00eame l'affichage de toutes les valeurs interm\u00e9diaires ! D'accord, \u00e7a ne serait pas trop difficile pour 1 \u00e0 10, mais imagine de 1 \u00e0 100... ou de 1 \u00e0 1000 ! C'est l\u00e0 qu'il faut \u00eatre astucieux !   Pour cela, nous utilisons un  compteur  : c'est \u00e0 dire une variable que nous allons charger de savoir \u00e0 quel tour nous en sommes tout au long du programme. Pour cela il faut l'initialiser correctement au d\u00e9but, puis la mettre \u00e0 jour \u00e0 chaque tour de boucle (en ajoutant 1 \u00e0 la variable). Et comme elle sert justement \u00e0  compter , on l'utilise \u00e9galement pour afficher le num\u00e9ro du tour actuel.  Notre condition de boucle v\u00e9rifie \u00e0 chaque tour que le compteur   ne d\u00e9passe pas 10  et PAF (!), \u00e7a donne bien la suite des nombres de 1 \u00e0 10 !",
            "title": "Exemple 5.3. Afficher les chiffres de 1 \u00e0 10"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#exemple-54-afficher-les-chiffres-de-10-a-1-a-lenvers",
            "text": "Presque le m\u00eame exemple qu'au dessus : on utilise \u00e9galement un compteur, sauf que cette fois-ci nous allons l'initialiser \u00e0 la valeur la plus grande au d\u00e9but puis compter en arri\u00e8re, en retirant 1 \u00e0 la variable chaque tour !",
            "title": "Exemple 5.4. Afficher les chiffres de 10 \u00e0 1 (\u00e0 l'envers)"
        },
        {
            "location": "/algorigrammes/03-operateurs-conditionnels/#conclusion",
            "text": "Ouf, cette fois-ci c'\u00e9tait un peu plus costaud ! Nous allons donc prendre le temps de bien assimiler tout \u00e7a avant d\u2019encha\u00eener vers la derni\u00e8re notion qui reste... puis vers du vrai code.  Pour le prochain num\u00e9ro, je te propose de voir en d\u00e9tail les solutions des exercices, et je vais aussi en profiter pour te pr\u00e9senter une d\u00e9marche d'analyse permettant de partir d'un probl\u00e8me (ou d'un \u00e9nonc\u00e9) et de construire un programme.",
            "title": "Conclusion"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/",
            "text": "Algorigrammes (partie 4)\n#\n\n\n\n\n\nVoyons d'abord comment d\u00e9cortiquer un \u00e9nonc\u00e9 dans le cas g\u00e9n\u00e9ral et appliquons ensuite cela \u00e0 nos quelques exercices. \n\n\nTu me suis ?\n\n\nD\u00e9marche g\u00e9n\u00e9rale pour analyser un \u00e9nonc\u00e9\n#\n\n\nQuand on est sur le point d'\u00e9crire un programme, c'est souvent le syndrome de la page blanche : quoi \u00e9crire ? par o\u00f9 commencer ? En fait il y a un m\u00e9thode toute simple pour nous aider : il suffit de r\u00e9pondre \u00e0 une courte s\u00e9rie de questions qui vont nous aider d\u00e9composer le besoin, \u00e9tape par \u00e9tape. \n\n\nQuestion : De quoi a-t-on besoin comme variables ?\n#\n\n\nC'est tr\u00e8s facile, il suffit de rep\u00e9rer les diff\u00e9rents \nconcepts\n \u00e9voqu\u00e9s dans l'\u00e9nonc\u00e9. Chacun de ces concepts peut donner lieu a une variable.\n\n\nExemple :\n \u00ab Faire un programme qui compte de 1 \u00e0 10. \u00bb\n\n\n\n\nVariables : \ncompteur\n.\n\n\n\n\nExemple :\n \u00ab Demander un nom et un mot de passe \u00e0 l'utilisateur, si le nom est XXX et que le mot de passe est YYY, alors il passe, sinon il ne passe pas. \u00bb\n\n\n\n\nVariables : \nnom\n, \nmot_de_passe\n,  \u00e0 \nutilisateur\n, \npasse\n.\n\n\n\n\nDans ce dernier exemple, on remarque que : \n\n\n\n\n\n\nutilisateur\n repr\u00e9sente un acteur, pas une donn\u00e9e \u00e0 manipuler. Donc on ne l'utilisera pas comme variable.\n\n\n\n\n\n\npasse\n repr\u00e9sente une d\u00e9cision, il faudra donc utiliser un test conditionnel. Pour am\u00e9liorer la lisibilit\u00e9 des programme, on stocke parfois la valeur de cette d\u00e9cision (vrai/faux) dans une variable avant de l'utiliser dans le test conditionnel. Cela permet notamment de \"construire\" la prise de d\u00e9cision petit \u00e0 petit si celle-ci d\u00e9pend de nombreux param\u00e8tres.\n\n\n\n\n\n\nQuestion : \u00c0 quelle valeur ces variables sont-elles initialis\u00e9es ?\n#\n\n\nQuel est le contenu d'une variable lorsqu\u2019on a rien mis dedans nous-m\u00eame : du vide ? autre chose ?\n\n\nEn fait la m\u00e9moire est un composant \u00e9lectronique (donc \u00e9lectrique). \u00c0 l'allumage du mat\u00e9riel elle contient... des \u00e9tats \u00e9lectriques r\u00e9siduels d\u00fb aux aux variations de tension. Si on lisait les cases de la m\u00e9moire, les valeurs que l'on obtiendrait seraient totalement al\u00e9atoires ! Donc absolument rien d'int\u00e9ressant !\n\n\nEn cours de fonctionnement, lorsqu'un programme d\u00e9clare avoir besoin de m\u00e9moire pour ses variables, le syst\u00e8me lui \"donne\" des cases. Soit ce sont des cases jamais utilis\u00e9es depuis l'allumage, soit des cases qui ont \u00e9t\u00e9 lib\u00e9r\u00e9es (\n... \u266b d\u00e9livr\u00e9es.. \u266a\n) par d'autres programmes.\n\n\nUne case lib\u00e9r\u00e9e n'est pas \"vid\u00e9e\" de son contenu... pour des questions de rapidit\u00e9. Elle contient donc encore la derni\u00e8re valeur qu'un programme y a mise (et c'est tr\u00e8s pratique pour le \nhacking\n). Pour palier \u00e0 ce gros danger, certains langages initialisent la case \u00e0 une valeur pr\u00e9d\u00e9finie (\nundefined\n en Javascript, \nnil\n en Ruby, etc.)\n\n\n\n\nCe qu'il faut retenir\n\n\nLorsqu'on demande de la m\u00e9moire au syst\u00e8me, la case obtenue n'est \njamais\n vide. On ne peut pas l'utiliser pour \nlire\n des donn\u00e9es ! Il est donc essentiel de \npr\u00e9voir une valeur \u00e0 mettre dedans\n tout au d\u00e9but du programme. C'est ce qu'on appelle \nl'initialisation\n.\n\n\n\n\nQuestion : Quel est le r\u00f4le et le sens de chaque variable ?\n#\n\n\nQuand on choisit d'utiliser une variable et qu'on lui donne nom, on lui donne un sens. En soit, on pourrait donner n'importe quel nom pour d\u00e9signer cette m\u00eame case... mais quelque part, en choisissant un nom, nous passons un contrat avec nous-m\u00eame, un engagement \u00e0 utiliser cette variable pour un certain but, avec un certain sens. \n\n\nOn fera donc en sorte de respecter cet engagement pris lors du choix des variables tout au long du programme : \nune variable = un concept\n donn\u00e9. Si on souhaite manipuler une autre concept, alors on utilisera une autre variable. \n\n\nPour garder cette coh\u00e9rence tout au long du programme (le d'invariants) on prendra l'habitude de d\u00e9clarer les variables que l'on utilisera et d'expliquer en commentaire son r\u00f4le.\n\n\nQuestion : Est-ce que certaines parties d\u00e9pendent d'un choix ?\n#\n\n\nSi c'est le cas, on utilisera \nun test conditionnel\n ! On dessine un losange et deux fleches (dont une avec un point).\n\n\nOn s'int\u00e9resse successivement aux diff\u00e9rentes parties qui le composent : le \ncorps\n, la \ncondition\n (pour la bifurcation), \navant\n le test, \napres\n le test.\n\n\nQuestion : Est-ce que certaines parties doivent \u00eatre r\u00e9p\u00e9t\u00e9es ?\n#\n\n\nSi c'est le cas, c'est qu'il y aura \nune boucle\n ! On dessine un grand cercle avec un losange dessus (pour la condition)\n\n\nOn s'int\u00e9resse successivement aux diff\u00e9rentes parties qui composent la boucle : \nle \ncorps\n, la \ncondition d'arr\u00eat\n, \navant\n la boucle, \napres\n la boucle.\n\n\nQuestion : Si on a une boucle, qu'est ce qui doit etre r\u00e9p\u00e9t\u00e9 ?\n#\n\n\nCe seront les condition du corps de la boucle, c'est \u00e0 dire les instructions \u00e0 mettre le long du cercle.\n\n\nQuestion : Si on a une boucle, quand est-ce que ma boucle s'arr\u00eate ?\n#\n\n\nCe sera la \ncondition d\u2019arr\u00eat\n, c'est l'inverse de la condition qui fait qu'on continue la boucle. \nOn \u00e9crit cette condition dans le losange de la boucle.\n\n\nAttention : la condition d\u2019arr\u00eat (ou de continuation) peut n\u00e9cessiter des variables, et donc des initialisations !\n\n\nQuestions : Et ensuite ?\n#\n\n\nS'il reste des choses que l'on a pas trait\u00e9es, ou des points qui n\u00e9cessitent plus de pr\u00e9cisions : on r\u00e9applique la s\u00e9rie de questions depuis le d\u00e9but, et on case les r\u00e9ponses dans la zone ad\u00e9quate de l'algorithme.\n\n\n\n\n\u00ab Eh bien, \u00e7a veut dire \u00e0 peu pr\u00e8s la m\u00eame chose \u00bb, dit la Duchesse [...]. \n\n\u00ab Et la morale de ceci est : prenez soin du sens, les sons prendront soin d'eux-m\u00eames. \u00bb \n\n\nLewis Caroll, Alice au pays des merveilles\n\n\n\n\nConclusion\n#\n\n\nLa prochaine fois, on reprends le cours ! Et on remarquera que les algorigrammes n\u00e9cessitent \u00e9norm\u00e9ment de place sur le papier (m\u00eame pour des programmes simples), on va commencer \u00e0 voir du vrai code...",
            "title": "M\u00e9thode d'analyse"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#algorigrammes-partie-4",
            "text": "Voyons d'abord comment d\u00e9cortiquer un \u00e9nonc\u00e9 dans le cas g\u00e9n\u00e9ral et appliquons ensuite cela \u00e0 nos quelques exercices.   Tu me suis ?",
            "title": "Algorigrammes (partie 4)"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#demarche-generale-pour-analyser-un-enonce",
            "text": "Quand on est sur le point d'\u00e9crire un programme, c'est souvent le syndrome de la page blanche : quoi \u00e9crire ? par o\u00f9 commencer ? En fait il y a un m\u00e9thode toute simple pour nous aider : il suffit de r\u00e9pondre \u00e0 une courte s\u00e9rie de questions qui vont nous aider d\u00e9composer le besoin, \u00e9tape par \u00e9tape.",
            "title": "D\u00e9marche g\u00e9n\u00e9rale pour analyser un \u00e9nonc\u00e9"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#question-de-quoi-a-t-on-besoin-comme-variables",
            "text": "C'est tr\u00e8s facile, il suffit de rep\u00e9rer les diff\u00e9rents  concepts  \u00e9voqu\u00e9s dans l'\u00e9nonc\u00e9. Chacun de ces concepts peut donner lieu a une variable.  Exemple :  \u00ab Faire un programme qui compte de 1 \u00e0 10. \u00bb   Variables :  compteur .   Exemple :  \u00ab Demander un nom et un mot de passe \u00e0 l'utilisateur, si le nom est XXX et que le mot de passe est YYY, alors il passe, sinon il ne passe pas. \u00bb   Variables :  nom ,  mot_de_passe ,  \u00e0  utilisateur ,  passe .   Dans ce dernier exemple, on remarque que :     utilisateur  repr\u00e9sente un acteur, pas une donn\u00e9e \u00e0 manipuler. Donc on ne l'utilisera pas comme variable.    passe  repr\u00e9sente une d\u00e9cision, il faudra donc utiliser un test conditionnel. Pour am\u00e9liorer la lisibilit\u00e9 des programme, on stocke parfois la valeur de cette d\u00e9cision (vrai/faux) dans une variable avant de l'utiliser dans le test conditionnel. Cela permet notamment de \"construire\" la prise de d\u00e9cision petit \u00e0 petit si celle-ci d\u00e9pend de nombreux param\u00e8tres.",
            "title": "Question : De quoi a-t-on besoin comme variables ?"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#question-a-quelle-valeur-ces-variables-sont-elles-initialisees",
            "text": "Quel est le contenu d'une variable lorsqu\u2019on a rien mis dedans nous-m\u00eame : du vide ? autre chose ?  En fait la m\u00e9moire est un composant \u00e9lectronique (donc \u00e9lectrique). \u00c0 l'allumage du mat\u00e9riel elle contient... des \u00e9tats \u00e9lectriques r\u00e9siduels d\u00fb aux aux variations de tension. Si on lisait les cases de la m\u00e9moire, les valeurs que l'on obtiendrait seraient totalement al\u00e9atoires ! Donc absolument rien d'int\u00e9ressant !  En cours de fonctionnement, lorsqu'un programme d\u00e9clare avoir besoin de m\u00e9moire pour ses variables, le syst\u00e8me lui \"donne\" des cases. Soit ce sont des cases jamais utilis\u00e9es depuis l'allumage, soit des cases qui ont \u00e9t\u00e9 lib\u00e9r\u00e9es ( ... \u266b d\u00e9livr\u00e9es.. \u266a ) par d'autres programmes.  Une case lib\u00e9r\u00e9e n'est pas \"vid\u00e9e\" de son contenu... pour des questions de rapidit\u00e9. Elle contient donc encore la derni\u00e8re valeur qu'un programme y a mise (et c'est tr\u00e8s pratique pour le  hacking ). Pour palier \u00e0 ce gros danger, certains langages initialisent la case \u00e0 une valeur pr\u00e9d\u00e9finie ( undefined  en Javascript,  nil  en Ruby, etc.)   Ce qu'il faut retenir  Lorsqu'on demande de la m\u00e9moire au syst\u00e8me, la case obtenue n'est  jamais  vide. On ne peut pas l'utiliser pour  lire  des donn\u00e9es ! Il est donc essentiel de  pr\u00e9voir une valeur \u00e0 mettre dedans  tout au d\u00e9but du programme. C'est ce qu'on appelle  l'initialisation .",
            "title": "Question : \u00c0 quelle valeur ces variables sont-elles initialis\u00e9es ?"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#question-quel-est-le-role-et-le-sens-de-chaque-variable",
            "text": "Quand on choisit d'utiliser une variable et qu'on lui donne nom, on lui donne un sens. En soit, on pourrait donner n'importe quel nom pour d\u00e9signer cette m\u00eame case... mais quelque part, en choisissant un nom, nous passons un contrat avec nous-m\u00eame, un engagement \u00e0 utiliser cette variable pour un certain but, avec un certain sens.   On fera donc en sorte de respecter cet engagement pris lors du choix des variables tout au long du programme :  une variable = un concept  donn\u00e9. Si on souhaite manipuler une autre concept, alors on utilisera une autre variable.   Pour garder cette coh\u00e9rence tout au long du programme (le d'invariants) on prendra l'habitude de d\u00e9clarer les variables que l'on utilisera et d'expliquer en commentaire son r\u00f4le.",
            "title": "Question : Quel est le r\u00f4le et le sens de chaque variable ?"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#question-est-ce-que-certaines-parties-dependent-dun-choix",
            "text": "Si c'est le cas, on utilisera  un test conditionnel  ! On dessine un losange et deux fleches (dont une avec un point).  On s'int\u00e9resse successivement aux diff\u00e9rentes parties qui le composent : le  corps , la  condition  (pour la bifurcation),  avant  le test,  apres  le test.",
            "title": "Question : Est-ce que certaines parties d\u00e9pendent d'un choix ?"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#question-est-ce-que-certaines-parties-doivent-etre-repetees",
            "text": "Si c'est le cas, c'est qu'il y aura  une boucle  ! On dessine un grand cercle avec un losange dessus (pour la condition)  On s'int\u00e9resse successivement aux diff\u00e9rentes parties qui composent la boucle : \nle  corps , la  condition d'arr\u00eat ,  avant  la boucle,  apres  la boucle.",
            "title": "Question : Est-ce que certaines parties doivent \u00eatre r\u00e9p\u00e9t\u00e9es ?"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#question-si-on-a-une-boucle-quest-ce-qui-doit-etre-repete",
            "text": "Ce seront les condition du corps de la boucle, c'est \u00e0 dire les instructions \u00e0 mettre le long du cercle.",
            "title": "Question : Si on a une boucle, qu'est ce qui doit etre r\u00e9p\u00e9t\u00e9 ?"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#question-si-on-a-une-boucle-quand-est-ce-que-ma-boucle-sarrete",
            "text": "Ce sera la  condition d\u2019arr\u00eat , c'est l'inverse de la condition qui fait qu'on continue la boucle. \nOn \u00e9crit cette condition dans le losange de la boucle.  Attention : la condition d\u2019arr\u00eat (ou de continuation) peut n\u00e9cessiter des variables, et donc des initialisations !",
            "title": "Question : Si on a une boucle, quand est-ce que ma boucle s'arr\u00eate ?"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#questions-et-ensuite",
            "text": "S'il reste des choses que l'on a pas trait\u00e9es, ou des points qui n\u00e9cessitent plus de pr\u00e9cisions : on r\u00e9applique la s\u00e9rie de questions depuis le d\u00e9but, et on case les r\u00e9ponses dans la zone ad\u00e9quate de l'algorithme.   \u00ab Eh bien, \u00e7a veut dire \u00e0 peu pr\u00e8s la m\u00eame chose \u00bb, dit la Duchesse [...].  \n\u00ab Et la morale de ceci est : prenez soin du sens, les sons prendront soin d'eux-m\u00eames. \u00bb   Lewis Caroll, Alice au pays des merveilles",
            "title": "Questions : Et ensuite ?"
        },
        {
            "location": "/algorigrammes/04-methode-d-analyse/#conclusion",
            "text": "La prochaine fois, on reprends le cours ! Et on remarquera que les algorigrammes n\u00e9cessitent \u00e9norm\u00e9ment de place sur le papier (m\u00eame pour des programmes simples), on va commencer \u00e0 voir du vrai code...",
            "title": "Conclusion"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/",
            "text": "Algorigrammes (partie 5)\n#\n\n\nSuper ! Quelle motivation ! Trop bien ! \n\n\nOk, cette fois on passe aux choses s\u00e9rieuses ! La derni\u00e8re fois je te disais vouloir commencer du \nvrai code\n dans ce chapitre mais l\u00e0 je me rends compte qu'il nous manque encore une notion super importante avant de continuer... donc \u00e7a sera pour la prochaine fois ! Suspense :-)\n\n\nTu as remarqu\u00e9 que nos algorigrammes prennent \nbeaucoup\n d'espace \u00e0 dessiner ?  Juste avec deux ou trois conditions, \u00e7a devient d\u00e9j\u00e0 le bazar \u00e0 lire et \u00e0 \u00e9crire ! Je vais donc te montrer un \ntruc\n pour simplifier tout \u00e7a.\n\n\nSous-programmes, fonctions et proc\u00e9dures\n#\n\n\nLa m\u00e9taphore de la recette (encore !)\n#\n\n\nIl y a quelques pages, nous avions d\u00e9fini un programme comme un ensemble d'ingr\u00e9dients et d'\u00e9tapes n\u00e9cessaires pour r\u00e9aliser un objectif. Un peu comme une recette de cuisine finalement. \n\n\nAvec cette d\u00e9finition, nous pouvons dire qu'un sous-programme est une deuxi\u00e8me recette de cuisine, mentionn\u00e9e dans la premi\u00e8re recette et dont le r\u00e9sultat est utilis\u00e9 par la premi\u00e8re recette.\n\n\nExemple 7.1. Le gratin et la b\u00e9chamel\n#\n\n\nVoyons les deux recettes suivantes : d'abord la b\u00e9chamel...\n\n\nRecette de la b\u00e9chamel\n\n\n======================\n\n\nIngr\u00e9dients (pour 4 personnes) : 40 g de beurre,\n   40 g de farine,  1/2 L de lait,  1 pinc\u00e9e de\n   muscade r\u00e2p\u00e9e, sel, poivre.\n\nPr\u00e9paration :\n\n\n1.\n Dans une casserole sur feu vif, faites fondre\n   le beurre jusqu'\u00e0 ce qu'il soit mousseux. \n\n2.\n Versez d'un coup la farine et m\u00e9langez vivement\n   avec une spatule en bois, jusqu'\u00e0 ce que le\n   m\u00e9lange soit homog\u00e8ne et commence \u00e0 dorer\n   l\u00e9g\u00e8rement. \n\n3.\n Versez alors le lait et fouettez pour d\u00e9truire\n   les \u00e9ventuels grumeaux. Baissez le feu et\n   continuez de m\u00e9langer en continu jusqu'\u00e0 ce que\n   la b\u00e9chamel \u00e9paississe. \n\n4.\n Salez, poivrez, ajoutez la noix de muscade.\n   M\u00e9langez puis retirez du feu.\n\n\n\n\n\nEn supposant toutes les actions correctement men\u00e9es, on peut dire que cette recette produit un r\u00e9sultat : la b\u00e9chamel (sans blague !)\net ce r\u00e9sultat d\u00e9pend uniquement des ingr\u00e9dients de d\u00e9part.\n\n\nC'est ok jusque l\u00e0 ? On continue avec l'autre recette :\n\n\nRecette du gratin dauphinois\n\n\n============================\n\n\nIngr\u00e9dients (pour 4 personnes) :  1 kg de pommes\n   de terre, 60 g de beurre, 40 g de farine, 150 g de\n   fromage r\u00e2p\u00e9, 1/2 L de lait, 1 pinc\u00e9e de muscade\n   r\u00e2p\u00e9e, sel, poivre.\n\n\n1.\n Lavez et pelez les pommes de terre. Plongez-les\n   dans un grand volume d'eau froide et portez \u00e0\n   \u00e9bullition. Cuisez 15 \u00e0 20 min.\n\n2.\n Pendant ce temps, r\u00e9alisez la b\u00e9chamel.\n\n3.\n Pr\u00e9chauffez votre four \u00e0 200\u00b0C (th.6-7).\n   Lorsqu'elles sont cuites, \u00e9gouttez les pommes\n   de terre et coupez les en rondelles d'environ 5\n   mm d'\u00e9paisseur. R\u00e9partissez-les dans le plat en\n   salant et poivrant r\u00e9guli\u00e8rement. Versez dessus\n   la b\u00e9chamel et lissez-la de fa\u00e7on \u00e0 ce \n   qu'elle se r\u00e9partisse partout. \n4 Parsemez le fromage r\u00e2p\u00e9, et enfournez pour\n   20 min. Servez bien chaud, d\u00e9cor\u00e9 de brins de\n   persil et accompagn\u00e9 d'une grosse salade verte.\n\n\n\n\n\nLa recette du gratin est plus int\u00e9ressante que la pr\u00e9c\u00e9dente. \nOn peut y noter que :\n\n\n\n\nCette recette produit un r\u00e9sultat : la gratin dauphinois. Ce r\u00e9sultat \n  int\u00e8gre de la b\u00e9chamel.\n\n\nOn a suppos\u00e9 connu l'action \nr\u00e9aliser la b\u00e9chamel\n \u00e0 l'\u00e9tape n\u00b02\n\n\nCette recette d\u00e9pend des ingr\u00e9dients de d\u00e9part\n\n\nCette recette d\u00e9pend \u00e9galement de \n  la transformation d'une partie des ingr\u00e9dients par la recette de la b\u00e9chamel\n\n\n\n\nRecettes et premi\u00e8re approximation\n#\n\n\nSi nous \u00e9tions entrain de cuisiner en suivant minutieusement un livre de recettes, au moment de l'instruction \nr\u00e9aliser la b\u00e9chamel\n nous aurions tourn\u00e9\nquelques pages de notre livre pour aller \u00e0 la recette \u0300\nB\u00e9chamel\n. \n\n\n\u00c0 partir de l\u00e0 nous aurions suivi les ingr\u00e9dients et les instructions de cette nouvelle page comme s'il s'agissait de notre recette principale.\n\n\nOn peut en d\u00e9duire que : \n\n\n\n\n\"Recette de la B\u00e9chamel\" est un \nsous-programme\n du programme \n    principal \"Gratin\" \n\n\nIl suffit de fournir les bons ingr\u00e9dients \u00e0 la recette de la b\u00e9chamel (types & quantit\u00e9s) pour r\u00e9aliser une b\u00e9chamel\n\n\nElle peut \u00eatre \nutilis\u00e9e ind\u00e9pendamment\n de la recette du du gratin, pour r\u00e9aliser d'autres recettes (ex: pour faire des \naubergines fa\u00e7on \"papoutsakia\"\n) ! \n\n\n\n\nL'instruction \"sous-programme\"\n#\n\n\nDans un algorigramme, \nun instruction rectangulaire avec deux barres de chaque cot\u00e9 repr\u00e9sente l'utilisation d'un sous-programme\n :\n\n\n\n\n\u00c0 l'arriv\u00e9e dans une instruction \ndouble-barr\u00e9e\n, on \"saute\" dans le sous-programme concern\u00e9\n\n\n.. on suit les fl\u00e8ches et on ex\u00e9cute ce qui doit etre ex\u00e9cut\u00e9\n\n\n...jusqu'\u00e0 terminer le sous-programme\n\n\n...ce qui nous am\u00e8ne \u00e0 l'instruction que l'on avait quitt\u00e9e dans le programme principal !\n\n\n\n\nExemple 7.2. L'algorigramme du d\u00eener romantique\n#\n\n\nOn peut d\u00e9crire la pr\u00e9paration d'un d\u00eener comme un programme avec des instructions o\u00f9 chacune de ces instructions correspond en fait \u00e0 un sous-programme ! Il suffit de zoomer... pour d\u00e9couvrir d'autres instructions, et ainsi de suite.\n\n\n\n\nVocabulaire et d\u00e9finitions\n#\n\n\nDans le monde du d\u00e9veloppement, il finalement est assez rare de parler de sous-programmes,\non parlera plut\u00f4t de \nfonctions\n ou de \nproc\u00e9dures\n. M\u00eame s'il est fr\u00e9quent de confondre les deux.\n\n\n\n\nUne fonction fabrique un r\u00e9sultat\n qui sera utilis\u00e9e par le programme  principal\n\n\nUne proc\u00e9dure ne produit pas de r\u00e9sultat mais r\u00e9alise des actions\n \u00e0 effet de bord (ex: afficher une fen\u00eatre, envoyer des donn\u00e9es sur le r\u00e9seau, etc.)\n\n\n\n\nDans ces sous-programmes, il faut distinguer deux moments importants : leur \nd\u00e9claration\n et leur \nappel\n .\n\n\n\n\n\n\nLa d\u00e9claration\n ou la \nd\u00e9finition\n d'un programme, c'est quand on \u00e9crit \u2014 ou qu'on dessine \u2014 les instructions qui le composent.\n\n\n\n\n\n\nL'appel\n , c'est lorsqu'on fait r\u00e9f\u00e9rence \u00e0 un programme existant \u00e0 partir d'un autre, pour l'utiliser.\n\n\n\n\n\n\nOn ne peut \nappeller\n un sous-programme que s'il a \u00e9t\u00e9 pr\u00e9alablement d\u00e9fini  \u2014 \u00e9videmment !\n\n\nOn parlera d\u00e9sormais de \nprogramme appelant\n (le programme principal) et de \nprogramme appel\u00e9\n (le sous-programme), puisqu'un sous-programme peut lui-m\u00eame appeler un autre sous-sous-programme.\n\n\nUtilisation et fonctionnement\n#\n\n\nQue se passe-t-il lorsqu'un programme appelle un sous-programme ? En fait il y a 3 moments cl\u00e9s : \n\n\n\n\nPassage de param\u00e8tres :\n certaines donn\u00e9es du programme appelant sont transf\u00e9r\u00e9es au sous-programme appel\u00e9 (ex: dans notre recette principale, on envoie une partie des ingr\u00e9dients \u00e0 la pr\u00e9paration de la sous-recette)\n\n\nR\u00e9alisation des \u00e9tapes\n (ex: c'est la pr\u00e9paration de la sous-recette)\n\n\nLa valeur de retour :\n lorsque la pr\u00e9paration est termin\u00e9e c'est le r\u00e9sultat qui est transf\u00e9r\u00e9 vers le programme appelant (ex: la b\u00e9chamel, produite par la recette)\n\n\n\n\nC'est important de noter ces trois moments car \nles deux programmes (appelant et appel\u00e9) vivent dans des espaces m\u00e9moires diff\u00e9rents\n. Ils ne peuvent communiquer qu'au tout d\u00e9but et \u00e0 la toute fin.\n\n\nFaisons un parall\u00e8le science-fictionnesque : c'est comme si les deux programmes \u00e9taient des mondes parall\u00e8les : il pourrait y avoir une variable nomm\u00e9e \nage\n dans chacun de ces deux mondes, mais ces deux variables \nage\n ne d\u00e9signeront pas la m\u00eame case m\u00e9moire, elle n'auront pas la m\u00eame vie (puisqu'elle suivront des programmes diff\u00e9rents) et n'auront donc pas forc\u00e9ment les m\u00eames valeurs.\n\n\nDu coup, pour communiquer entre ces deux programmes (appelant & appel\u00e9), il faut ouvrir une une br\u00e8che, mais elle ne dure pas longtemps ! \n\n\nAlors un coup on ouvre la br\u00e8che et on envoie des choses (les param\u00e8tres) puis celle-ci se referme. Il n'y a plus aucun moyen de savoir ce qui se passe de l'autre cot\u00e9 ! Enfin la br\u00e8che s'ouvre \u00e0 nouveau et on re\u00e7oit (le r\u00e9sultat).\n\n\n\n\nNote\n\n\nPourquoi on fait tout \u00e7a ? Haha... patience ! C'est \u00e0 cause du fonctionnement des processeurs et de la m\u00e9moire ! On reviendra l\u00e0 dessus un peu plus tard, en parlant des fonctions, de la \npile\n et du \ntas\n ! :-)\n\n\n\n\nExemple 7.3 : Videur sexiste, mais \u00ab 2.0 \u00bb\n#\n\n\nPour appliquer tout ce qu'on vient de dire, on pourrait r\u00e9-\u00e9crire l'algorigramme du \nvideur sexiste\n en s\u00e9parant le traitement du client qui se pr\u00e9sente de l'algorithme de d\u00e9cision (sexiste ou non) du videur :\n\n\n\n\n\n\nIl venait de se passer tant de choses bizarres, qu'elle en arrivait \u00e0 penser que fort peu de choses \u00e9taient vraiment impossibles \n\n\nLewis Caroll, Alice au pays des merveilles\n\n\n\n\n\u00c0 suivre ?\n#\n\n\n\u00c7a y est, nous avons fini les algorigrammes ! Et nous avons \u00e9galement fini l'essentiel de la partie th\u00e9orique !\nLes subtilit\u00e9s qui restent concernent l'\u00e9criture du code, les types de variables et les structures de donn\u00e9es.\n\n\nIl reste donc \u00e0 voir comment on fait tout \u00e7a \"en vrai\" !\nDonc la prochaine fois... on reprends les exercices !",
            "title": "Sous-programmes, fonctions et proc\u00e9dures"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#algorigrammes-partie-5",
            "text": "Super ! Quelle motivation ! Trop bien !   Ok, cette fois on passe aux choses s\u00e9rieuses ! La derni\u00e8re fois je te disais vouloir commencer du  vrai code  dans ce chapitre mais l\u00e0 je me rends compte qu'il nous manque encore une notion super importante avant de continuer... donc \u00e7a sera pour la prochaine fois ! Suspense :-)  Tu as remarqu\u00e9 que nos algorigrammes prennent  beaucoup  d'espace \u00e0 dessiner ?  Juste avec deux ou trois conditions, \u00e7a devient d\u00e9j\u00e0 le bazar \u00e0 lire et \u00e0 \u00e9crire ! Je vais donc te montrer un  truc  pour simplifier tout \u00e7a.",
            "title": "Algorigrammes (partie 5)"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#sous-programmes-fonctions-et-procedures",
            "text": "",
            "title": "Sous-programmes, fonctions et proc\u00e9dures"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#la-metaphore-de-la-recette-encore",
            "text": "Il y a quelques pages, nous avions d\u00e9fini un programme comme un ensemble d'ingr\u00e9dients et d'\u00e9tapes n\u00e9cessaires pour r\u00e9aliser un objectif. Un peu comme une recette de cuisine finalement.   Avec cette d\u00e9finition, nous pouvons dire qu'un sous-programme est une deuxi\u00e8me recette de cuisine, mentionn\u00e9e dans la premi\u00e8re recette et dont le r\u00e9sultat est utilis\u00e9 par la premi\u00e8re recette.",
            "title": "La m\u00e9taphore de la recette (encore !)"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#exemple-71-le-gratin-et-la-bechamel",
            "text": "Voyons les deux recettes suivantes : d'abord la b\u00e9chamel...  Recette de la b\u00e9chamel  ====================== \n\nIngr\u00e9dients (pour 4 personnes) : 40 g de beurre,\n   40 g de farine,  1/2 L de lait,  1 pinc\u00e9e de\n   muscade r\u00e2p\u00e9e, sel, poivre.\n\nPr\u00e9paration : 1.  Dans une casserole sur feu vif, faites fondre\n   le beurre jusqu'\u00e0 ce qu'il soit mousseux.  2.  Versez d'un coup la farine et m\u00e9langez vivement\n   avec une spatule en bois, jusqu'\u00e0 ce que le\n   m\u00e9lange soit homog\u00e8ne et commence \u00e0 dorer\n   l\u00e9g\u00e8rement.  3.  Versez alors le lait et fouettez pour d\u00e9truire\n   les \u00e9ventuels grumeaux. Baissez le feu et\n   continuez de m\u00e9langer en continu jusqu'\u00e0 ce que\n   la b\u00e9chamel \u00e9paississe.  4.  Salez, poivrez, ajoutez la noix de muscade.\n   M\u00e9langez puis retirez du feu.  En supposant toutes les actions correctement men\u00e9es, on peut dire que cette recette produit un r\u00e9sultat : la b\u00e9chamel (sans blague !)\net ce r\u00e9sultat d\u00e9pend uniquement des ingr\u00e9dients de d\u00e9part.  C'est ok jusque l\u00e0 ? On continue avec l'autre recette :  Recette du gratin dauphinois  ============================ \n\nIngr\u00e9dients (pour 4 personnes) :  1 kg de pommes\n   de terre, 60 g de beurre, 40 g de farine, 150 g de\n   fromage r\u00e2p\u00e9, 1/2 L de lait, 1 pinc\u00e9e de muscade\n   r\u00e2p\u00e9e, sel, poivre. 1.  Lavez et pelez les pommes de terre. Plongez-les\n   dans un grand volume d'eau froide et portez \u00e0\n   \u00e9bullition. Cuisez 15 \u00e0 20 min. 2.  Pendant ce temps, r\u00e9alisez la b\u00e9chamel. 3.  Pr\u00e9chauffez votre four \u00e0 200\u00b0C (th.6-7).\n   Lorsqu'elles sont cuites, \u00e9gouttez les pommes\n   de terre et coupez les en rondelles d'environ 5\n   mm d'\u00e9paisseur. R\u00e9partissez-les dans le plat en\n   salant et poivrant r\u00e9guli\u00e8rement. Versez dessus\n   la b\u00e9chamel et lissez-la de fa\u00e7on \u00e0 ce \n   qu'elle se r\u00e9partisse partout. \n4 Parsemez le fromage r\u00e2p\u00e9, et enfournez pour\n   20 min. Servez bien chaud, d\u00e9cor\u00e9 de brins de\n   persil et accompagn\u00e9 d'une grosse salade verte.  La recette du gratin est plus int\u00e9ressante que la pr\u00e9c\u00e9dente. \nOn peut y noter que :   Cette recette produit un r\u00e9sultat : la gratin dauphinois. Ce r\u00e9sultat \n  int\u00e8gre de la b\u00e9chamel.  On a suppos\u00e9 connu l'action  r\u00e9aliser la b\u00e9chamel  \u00e0 l'\u00e9tape n\u00b02  Cette recette d\u00e9pend des ingr\u00e9dients de d\u00e9part  Cette recette d\u00e9pend \u00e9galement de \n  la transformation d'une partie des ingr\u00e9dients par la recette de la b\u00e9chamel",
            "title": "Exemple 7.1. Le gratin et la b\u00e9chamel"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#recettes-et-premiere-approximation",
            "text": "Si nous \u00e9tions entrain de cuisiner en suivant minutieusement un livre de recettes, au moment de l'instruction  r\u00e9aliser la b\u00e9chamel  nous aurions tourn\u00e9\nquelques pages de notre livre pour aller \u00e0 la recette \u0300 B\u00e9chamel .   \u00c0 partir de l\u00e0 nous aurions suivi les ingr\u00e9dients et les instructions de cette nouvelle page comme s'il s'agissait de notre recette principale.  On peut en d\u00e9duire que :    \"Recette de la B\u00e9chamel\" est un  sous-programme  du programme \n    principal \"Gratin\"   Il suffit de fournir les bons ingr\u00e9dients \u00e0 la recette de la b\u00e9chamel (types & quantit\u00e9s) pour r\u00e9aliser une b\u00e9chamel  Elle peut \u00eatre  utilis\u00e9e ind\u00e9pendamment  de la recette du du gratin, pour r\u00e9aliser d'autres recettes (ex: pour faire des  aubergines fa\u00e7on \"papoutsakia\" ) !",
            "title": "Recettes et premi\u00e8re approximation"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#linstruction-sous-programme",
            "text": "Dans un algorigramme,  un instruction rectangulaire avec deux barres de chaque cot\u00e9 repr\u00e9sente l'utilisation d'un sous-programme  :   \u00c0 l'arriv\u00e9e dans une instruction  double-barr\u00e9e , on \"saute\" dans le sous-programme concern\u00e9  .. on suit les fl\u00e8ches et on ex\u00e9cute ce qui doit etre ex\u00e9cut\u00e9  ...jusqu'\u00e0 terminer le sous-programme  ...ce qui nous am\u00e8ne \u00e0 l'instruction que l'on avait quitt\u00e9e dans le programme principal !",
            "title": "L'instruction \"sous-programme\""
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#exemple-72-lalgorigramme-du-diner-romantique",
            "text": "On peut d\u00e9crire la pr\u00e9paration d'un d\u00eener comme un programme avec des instructions o\u00f9 chacune de ces instructions correspond en fait \u00e0 un sous-programme ! Il suffit de zoomer... pour d\u00e9couvrir d'autres instructions, et ainsi de suite.",
            "title": "Exemple 7.2. L'algorigramme du d\u00eener romantique"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#vocabulaire-et-definitions",
            "text": "Dans le monde du d\u00e9veloppement, il finalement est assez rare de parler de sous-programmes,\non parlera plut\u00f4t de  fonctions  ou de  proc\u00e9dures . M\u00eame s'il est fr\u00e9quent de confondre les deux.   Une fonction fabrique un r\u00e9sultat  qui sera utilis\u00e9e par le programme  principal  Une proc\u00e9dure ne produit pas de r\u00e9sultat mais r\u00e9alise des actions  \u00e0 effet de bord (ex: afficher une fen\u00eatre, envoyer des donn\u00e9es sur le r\u00e9seau, etc.)   Dans ces sous-programmes, il faut distinguer deux moments importants : leur  d\u00e9claration  et leur  appel  .    La d\u00e9claration  ou la  d\u00e9finition  d'un programme, c'est quand on \u00e9crit \u2014 ou qu'on dessine \u2014 les instructions qui le composent.    L'appel  , c'est lorsqu'on fait r\u00e9f\u00e9rence \u00e0 un programme existant \u00e0 partir d'un autre, pour l'utiliser.    On ne peut  appeller  un sous-programme que s'il a \u00e9t\u00e9 pr\u00e9alablement d\u00e9fini  \u2014 \u00e9videmment !  On parlera d\u00e9sormais de  programme appelant  (le programme principal) et de  programme appel\u00e9  (le sous-programme), puisqu'un sous-programme peut lui-m\u00eame appeler un autre sous-sous-programme.",
            "title": "Vocabulaire et d\u00e9finitions"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#utilisation-et-fonctionnement",
            "text": "Que se passe-t-il lorsqu'un programme appelle un sous-programme ? En fait il y a 3 moments cl\u00e9s :    Passage de param\u00e8tres :  certaines donn\u00e9es du programme appelant sont transf\u00e9r\u00e9es au sous-programme appel\u00e9 (ex: dans notre recette principale, on envoie une partie des ingr\u00e9dients \u00e0 la pr\u00e9paration de la sous-recette)  R\u00e9alisation des \u00e9tapes  (ex: c'est la pr\u00e9paration de la sous-recette)  La valeur de retour :  lorsque la pr\u00e9paration est termin\u00e9e c'est le r\u00e9sultat qui est transf\u00e9r\u00e9 vers le programme appelant (ex: la b\u00e9chamel, produite par la recette)   C'est important de noter ces trois moments car  les deux programmes (appelant et appel\u00e9) vivent dans des espaces m\u00e9moires diff\u00e9rents . Ils ne peuvent communiquer qu'au tout d\u00e9but et \u00e0 la toute fin.  Faisons un parall\u00e8le science-fictionnesque : c'est comme si les deux programmes \u00e9taient des mondes parall\u00e8les : il pourrait y avoir une variable nomm\u00e9e  age  dans chacun de ces deux mondes, mais ces deux variables  age  ne d\u00e9signeront pas la m\u00eame case m\u00e9moire, elle n'auront pas la m\u00eame vie (puisqu'elle suivront des programmes diff\u00e9rents) et n'auront donc pas forc\u00e9ment les m\u00eames valeurs.  Du coup, pour communiquer entre ces deux programmes (appelant & appel\u00e9), il faut ouvrir une une br\u00e8che, mais elle ne dure pas longtemps !   Alors un coup on ouvre la br\u00e8che et on envoie des choses (les param\u00e8tres) puis celle-ci se referme. Il n'y a plus aucun moyen de savoir ce qui se passe de l'autre cot\u00e9 ! Enfin la br\u00e8che s'ouvre \u00e0 nouveau et on re\u00e7oit (le r\u00e9sultat).   Note  Pourquoi on fait tout \u00e7a ? Haha... patience ! C'est \u00e0 cause du fonctionnement des processeurs et de la m\u00e9moire ! On reviendra l\u00e0 dessus un peu plus tard, en parlant des fonctions, de la  pile  et du  tas  ! :-)",
            "title": "Utilisation et fonctionnement"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#exemple-73-videur-sexiste-mais-20",
            "text": "Pour appliquer tout ce qu'on vient de dire, on pourrait r\u00e9-\u00e9crire l'algorigramme du  videur sexiste  en s\u00e9parant le traitement du client qui se pr\u00e9sente de l'algorithme de d\u00e9cision (sexiste ou non) du videur :    Il venait de se passer tant de choses bizarres, qu'elle en arrivait \u00e0 penser que fort peu de choses \u00e9taient vraiment impossibles   Lewis Caroll, Alice au pays des merveilles",
            "title": "Exemple 7.3 : Videur sexiste, mais \u00ab 2.0 \u00bb"
        },
        {
            "location": "/algorigrammes/05-sous-programmes-fonctions-procedures/#a-suivre",
            "text": "\u00c7a y est, nous avons fini les algorigrammes ! Et nous avons \u00e9galement fini l'essentiel de la partie th\u00e9orique !\nLes subtilit\u00e9s qui restent concernent l'\u00e9criture du code, les types de variables et les structures de donn\u00e9es.  Il reste donc \u00e0 voir comment on fait tout \u00e7a \"en vrai\" !\nDonc la prochaine fois... on reprends les exercices !",
            "title": "\u00c0 suivre ?"
        },
        {
            "location": "/algorigrammes/exercices/",
            "text": "Exercices sur les algorigrammes\n#\n\n\n5.a - Tester une valeur\n#\n\n\nDessine un programme\n qui demande \u00e0 l'utilisateur de taper son nom et son mot de passe au clavier.\nSi son nom est \n\"Hippolite\"\n et que son mot de passe est \n\"Genevieve2012\"\n alors on le programme lui affiche \u00e0 l'\u00e9cran le message \n\"Acc\u00e8s autoris\u00e9\"\n, sinon le programme lui affiche \n\"Acc\u00e8s refus\u00e9\"\n.\n\n\n5.b - Calculer une valeur\n#\n\n\nDessine un programme\n qui demande \u00e0 l'utilisateur de taper son age et le stocke dans la variable \nage\n.\nCalcule l'age qu'il aura l'ann\u00e9e prochaine et stocke le r\u00e9sultat dans la variable \nage\n (la m\u00eame). Ensuite affiche-lui le message \n\"L'ann\u00e9e prochaine, tu auras XX ans\"\n (avec XX remplac\u00e9 par son \u00e2ge prochain).\n\n\n5.c - Compter de deux en deux\n#\n\n\nSur la base de l'exemple 5.3, \ndessiner un algorigramme\n qui compte de 0 \u00e0 10, de deux en deux (et qui affiche donc \n0..2..4..6..8..10\n).\n\n\n5.d - Videur limit\u00e9 \u00e0 300 visiteurs\n#\n\n\nSans dessiner\n l'algorigramme, comment ferais-tu pour adapter le videur de base (exemple 5.1) afin qu'il ne laisse entrer que 300 visiteurs dans la boite de nuit ?\n\n\n\n\nQue faudrait-il ajouter ?\n\n\n\n\n8.1 : videur sexiste & capacit\u00e9 maximum\n#\n\n\nLa boite de nuit a une capacit\u00e9 maximum de 300\npersonnes par nuit. Le travail du videur\ns'arr\u00eate lorsque ce nombre d'entr\u00e9es est\natteint.\n\n\nSur la base du videur sexiste   :\n\n\n\n\n\u00c9cris en pseudo-code le programme du videur sexiste\n capable de capable de tenir compte de la capacit\u00e9 de la boite de nuit (reprise de l'exercice  5.d)\n\n\nD\u00e9compose le programme\n en plusieurs fonctions si possible ;-)\n\n\n\n\n8.2 - Videur qui s'ennuie\n#\n\n\nUn soir, notre videur pr\u00e9f\u00e9r\u00e9 s'ennuie. Pour s'amuser, il d\u00e9cide de faire rentrer 1 personne seule, puis un groupe de 2, puis un groupe de 3, puis de 4, puis de 5... et ainsi de suite.\n\n\n\n\nQuelle serait ta d\u00e9marche\n pour conna\u00eetre pour le nombre de personnes entr\u00e9es dans la boite de nuit lorsque le groupe de 5 sera pass\u00e9 ?\n\n\n\u00c9cris une fonction en pseudo-code\n qui d\u00e9termine combien de personnes seront dans la boite de nuit lorsque le groupe de 100 sera rentr\u00e9 ?\n\n\nExplique comment tu ferais\n pour adapter cette fonction pour calculer le nombre de personnes dans la boite apr\u00e8s le groupe de 1000 ?",
            "title": "Exercices"
        },
        {
            "location": "/algorigrammes/exercices/#exercices-sur-les-algorigrammes",
            "text": "",
            "title": "Exercices sur les algorigrammes"
        },
        {
            "location": "/algorigrammes/exercices/#5a-tester-une-valeur",
            "text": "Dessine un programme  qui demande \u00e0 l'utilisateur de taper son nom et son mot de passe au clavier.\nSi son nom est  \"Hippolite\"  et que son mot de passe est  \"Genevieve2012\"  alors on le programme lui affiche \u00e0 l'\u00e9cran le message  \"Acc\u00e8s autoris\u00e9\" , sinon le programme lui affiche  \"Acc\u00e8s refus\u00e9\" .",
            "title": "5.a - Tester une valeur"
        },
        {
            "location": "/algorigrammes/exercices/#5b-calculer-une-valeur",
            "text": "Dessine un programme  qui demande \u00e0 l'utilisateur de taper son age et le stocke dans la variable  age .\nCalcule l'age qu'il aura l'ann\u00e9e prochaine et stocke le r\u00e9sultat dans la variable  age  (la m\u00eame). Ensuite affiche-lui le message  \"L'ann\u00e9e prochaine, tu auras XX ans\"  (avec XX remplac\u00e9 par son \u00e2ge prochain).",
            "title": "5.b - Calculer une valeur"
        },
        {
            "location": "/algorigrammes/exercices/#5c-compter-de-deux-en-deux",
            "text": "Sur la base de l'exemple 5.3,  dessiner un algorigramme  qui compte de 0 \u00e0 10, de deux en deux (et qui affiche donc  0..2..4..6..8..10 ).",
            "title": "5.c - Compter de deux en deux"
        },
        {
            "location": "/algorigrammes/exercices/#5d-videur-limite-a-300-visiteurs",
            "text": "Sans dessiner  l'algorigramme, comment ferais-tu pour adapter le videur de base (exemple 5.1) afin qu'il ne laisse entrer que 300 visiteurs dans la boite de nuit ?   Que faudrait-il ajouter ?",
            "title": "5.d - Videur limit\u00e9 \u00e0 300 visiteurs"
        },
        {
            "location": "/algorigrammes/exercices/#81-videur-sexiste-capacite-maximum",
            "text": "La boite de nuit a une capacit\u00e9 maximum de 300\npersonnes par nuit. Le travail du videur\ns'arr\u00eate lorsque ce nombre d'entr\u00e9es est\natteint.  Sur la base du videur sexiste   :   \u00c9cris en pseudo-code le programme du videur sexiste  capable de capable de tenir compte de la capacit\u00e9 de la boite de nuit (reprise de l'exercice  5.d)  D\u00e9compose le programme  en plusieurs fonctions si possible ;-)",
            "title": "8.1 : videur sexiste &amp; capacit\u00e9 maximum"
        },
        {
            "location": "/algorigrammes/exercices/#82-videur-qui-sennuie",
            "text": "Un soir, notre videur pr\u00e9f\u00e9r\u00e9 s'ennuie. Pour s'amuser, il d\u00e9cide de faire rentrer 1 personne seule, puis un groupe de 2, puis un groupe de 3, puis de 4, puis de 5... et ainsi de suite.   Quelle serait ta d\u00e9marche  pour conna\u00eetre pour le nombre de personnes entr\u00e9es dans la boite de nuit lorsque le groupe de 5 sera pass\u00e9 ?  \u00c9cris une fonction en pseudo-code  qui d\u00e9termine combien de personnes seront dans la boite de nuit lorsque le groupe de 100 sera rentr\u00e9 ?  Explique comment tu ferais  pour adapter cette fonction pour calculer le nombre de personnes dans la boite apr\u00e8s le groupe de 1000 ?",
            "title": "8.2 - Videur qui s'ennuie"
        },
        {
            "location": "/algorigrammes/corriges/",
            "text": "Corrig\u00e9s des exercices sur les algorigrammes\n#\n\n\nSolution 5.a : Login, mot de passe et acc\u00e8s...\n#\n\n\n\u00c9nonc\u00e9\n#\n\n\nSolution\n#\n\n\n\n\nDe quoi va t-on avoir besoin comme variables ?\n Une pour stocker le nom (\nnom\n), et une autre pour stocker le mot de passe (\nmotdepasse\n).\n\n\nComment sont-elles initialis\u00e9es ?\n Au clavier.\n\n\nEst-ce que certaines parties doivent \u00eatre r\u00e9p\u00e9t\u00e9es ?\n Non.\n\n\nEst-ce qu'il y a des choix \u00e0 faire quelque part ?\n Oui, selon ce que contient \nmotdepasse\n.\n\n\n\n\nIci, l'ordre des autres instructions est quasiment donn\u00e9 par l'\u00e9nonc\u00e9.\n\n\nCe qui nous donne : \n\n\n\n\nC'est bien, \u00e7a fait le job, mais on peut simplifier. Dans le chapitre \nAlgorigrammes III\n, on mentionnait les expressions bool\u00e9ennes. On va les utiliser pou rassembler les deux conditions en une seule. \n\n\nOn va donc \u00e9crire :\n\n\n\n\n\n\n\n5.b - Calculer une valeur\n#\n\n\n\u00c9nonc\u00e9\n#\n\n\nDessine un programme\n qui demande \u00e0 l'utilisateur de taper son age et le stocke dans la variable \nage\n.\nCalcule l'age qu'il aura l'ann\u00e9e prochaine et stocke le r\u00e9sultat dans la variable \nage\n (la m\u00eame). Ensuite affiche-lui le message \n\"L'ann\u00e9e prochaine, tu auras XX ans\"\n (avec XX remplac\u00e9 par son \u00e2ge prochain).\n\n\nSolution\n#\n\n\n\n\nDe quoi va t-on avoir besoin comme variables ?\n Une pour stocker l'age entr\u00e9 par l'utilisateur... et c'est tout (puisqu'on nous dit d'utiliser la m\u00eame pour l'age futur que l'on calculera).\n\n\nComment sont-elles initialis\u00e9es ?\n Depuis une valeur entr\u00e9e au clavier.\n\n\nEst-ce que certaines parties doivent \u00eatre r\u00e9p\u00e9t\u00e9es ?\n Non.\n\n\nEst-ce qu'il y a des choix \u00e0 faire quelque part ?\n Non.\n\n\n\n\n\n\n\n\n\n5.c - Compter de deux en deux\n#\n\n\nEnonc\u00e9\n#\n\n\nSur la base de l'exemple 5.3, \ndessiner un algorigramme\n qui compte de 0 \u00e0 10, de deux en deux (et qui affiche donc \n0..2..4..6..8..10\n).\n\n\nSolution\n#\n\n\n\n\nDe quoi va t-on avoir besoin comme variables ?\n Un \ncompteur\n\n\nComment sont-elles initialis\u00e9es ?\n On d\u00e9marre le compteur \u00e0 z\u00e9ro.\n\n\nEst-ce qu'il y a des choix \u00e0 faire quelque part ?\n Non.\n\n\nEst-ce que certaines parties doivent \u00eatre r\u00e9p\u00e9t\u00e9es ?\n Oui, on r\u00e9p\u00e8te l'affichage et on ajoute 2 au  \ncompteur\n \u00e0 chaque tour.\n\n\nQuand est-ce qu'on arr\u00eate la boucle ?\n Quand on d\u00e9passe 10.\n\n\n\n\n\n\n\n\n\n5.d - Videur limit\u00e9 \u00e0 300 visiteurs\n#\n\n\nEnonc\u00e9\n#\n\n\nSans dessiner\n l'algorigramme, comment ferais-tu pour adapter le videur de base (exemple 5.1) afin qu'il ne laisse entrer que 300 visiteurs dans la boite de nuit ?\n\n\n\n\nQue faudrait-il ajouter ?\n\n\n\n\nSolution\n#\n\n\nPour adapter le videur de base (exemple 5.1) afin qu'il ne laisse entrer que 300 visiteurs dans la boite de nuit, il faudrait :\n\n\n\n\ncompter les visiteurs (avec une variable \nvisiteurs\n)\n\n\najouter une boucle (qui continue tant que \nvisiteurs <= 300\n)\n\n\nincr\u00e9menter cette variable \u00e0 chaque tour (\nvisiteurs <-- visiteurs + 1\n)\n\n\n\n\n\n\n\n8.1 : videur sexiste & capacit\u00e9 maximum\n#\n\n\nEnonc\u00e9\n#\n\n\nLa boite de nuit a une capacit\u00e9 maximum de 300\npersonnes par nuit. Le travail du videur\ns'arr\u00eate lorsque ce nombre d'entr\u00e9es est\natteint.\n\n\nSur la base du videur sexiste   :\n\n\n\n\n\u00c9cris en pseudo-code le programme du videur sexiste\n capable de capable de tenir compte de la capacit\u00e9 de la boite de nuit (reprise de l'exercice  5.d)\n\n\nD\u00e9compose le programme\n en plusieurs fonctions si possible ;-)\n\n\n\n\nSolution\n#\n\n\nFIXME\n\n\n8.2 - Videur qui s'ennuie\n#\n\n\nEnonc\u00e9\n#\n\n\nUn soir, notre videur pr\u00e9f\u00e9r\u00e9 s'ennuie. Pour s'amuser, il d\u00e9cide de faire rentrer 1 personne seule, puis un groupe de 2, puis un groupe de 3, puis de 4, puis de 5... et ainsi de suite.\n\n\n\n\nQuelle serait ta d\u00e9marche\n pour conna\u00eetre pour le nombre de personnes entr\u00e9es dans la boite de nuit lorsque le groupe de 5 sera pass\u00e9 ?\n\n\n\u00c9cris une fonction en pseudo-code\n qui d\u00e9termine combien de personnes seront dans la boite de nuit lorsque le groupe de 100 sera rentr\u00e9 ?\n\n\nExplique comment tu ferais\n pour adapter cette fonction pour calculer le nombre de personnes dans la boite apr\u00e8s le groupe de 1000 ?\n\n\n\n\nSolution\n#\n\n\nFIXME",
            "title": "Corrig\u00e9s"
        },
        {
            "location": "/algorigrammes/corriges/#corriges-des-exercices-sur-les-algorigrammes",
            "text": "",
            "title": "Corrig\u00e9s des exercices sur les algorigrammes"
        },
        {
            "location": "/algorigrammes/corriges/#solution-5a-login-mot-de-passe-et-acces",
            "text": "",
            "title": "Solution 5.a : Login, mot de passe et acc\u00e8s..."
        },
        {
            "location": "/algorigrammes/corriges/#enonce",
            "text": "",
            "title": "\u00c9nonc\u00e9"
        },
        {
            "location": "/algorigrammes/corriges/#solution",
            "text": "De quoi va t-on avoir besoin comme variables ?  Une pour stocker le nom ( nom ), et une autre pour stocker le mot de passe ( motdepasse ).  Comment sont-elles initialis\u00e9es ?  Au clavier.  Est-ce que certaines parties doivent \u00eatre r\u00e9p\u00e9t\u00e9es ?  Non.  Est-ce qu'il y a des choix \u00e0 faire quelque part ?  Oui, selon ce que contient  motdepasse .   Ici, l'ordre des autres instructions est quasiment donn\u00e9 par l'\u00e9nonc\u00e9.  Ce qui nous donne :    C'est bien, \u00e7a fait le job, mais on peut simplifier. Dans le chapitre  Algorigrammes III , on mentionnait les expressions bool\u00e9ennes. On va les utiliser pou rassembler les deux conditions en une seule.   On va donc \u00e9crire :",
            "title": "Solution"
        },
        {
            "location": "/algorigrammes/corriges/#5b-calculer-une-valeur",
            "text": "",
            "title": "5.b - Calculer une valeur"
        },
        {
            "location": "/algorigrammes/corriges/#enonce_1",
            "text": "Dessine un programme  qui demande \u00e0 l'utilisateur de taper son age et le stocke dans la variable  age .\nCalcule l'age qu'il aura l'ann\u00e9e prochaine et stocke le r\u00e9sultat dans la variable  age  (la m\u00eame). Ensuite affiche-lui le message  \"L'ann\u00e9e prochaine, tu auras XX ans\"  (avec XX remplac\u00e9 par son \u00e2ge prochain).",
            "title": "\u00c9nonc\u00e9"
        },
        {
            "location": "/algorigrammes/corriges/#solution_1",
            "text": "De quoi va t-on avoir besoin comme variables ?  Une pour stocker l'age entr\u00e9 par l'utilisateur... et c'est tout (puisqu'on nous dit d'utiliser la m\u00eame pour l'age futur que l'on calculera).  Comment sont-elles initialis\u00e9es ?  Depuis une valeur entr\u00e9e au clavier.  Est-ce que certaines parties doivent \u00eatre r\u00e9p\u00e9t\u00e9es ?  Non.  Est-ce qu'il y a des choix \u00e0 faire quelque part ?  Non.",
            "title": "Solution"
        },
        {
            "location": "/algorigrammes/corriges/#5c-compter-de-deux-en-deux",
            "text": "",
            "title": "5.c - Compter de deux en deux"
        },
        {
            "location": "/algorigrammes/corriges/#enonce_2",
            "text": "Sur la base de l'exemple 5.3,  dessiner un algorigramme  qui compte de 0 \u00e0 10, de deux en deux (et qui affiche donc  0..2..4..6..8..10 ).",
            "title": "Enonc\u00e9"
        },
        {
            "location": "/algorigrammes/corriges/#solution_2",
            "text": "De quoi va t-on avoir besoin comme variables ?  Un  compteur  Comment sont-elles initialis\u00e9es ?  On d\u00e9marre le compteur \u00e0 z\u00e9ro.  Est-ce qu'il y a des choix \u00e0 faire quelque part ?  Non.  Est-ce que certaines parties doivent \u00eatre r\u00e9p\u00e9t\u00e9es ?  Oui, on r\u00e9p\u00e8te l'affichage et on ajoute 2 au   compteur  \u00e0 chaque tour.  Quand est-ce qu'on arr\u00eate la boucle ?  Quand on d\u00e9passe 10.",
            "title": "Solution"
        },
        {
            "location": "/algorigrammes/corriges/#5d-videur-limite-a-300-visiteurs",
            "text": "",
            "title": "5.d - Videur limit\u00e9 \u00e0 300 visiteurs"
        },
        {
            "location": "/algorigrammes/corriges/#enonce_3",
            "text": "Sans dessiner  l'algorigramme, comment ferais-tu pour adapter le videur de base (exemple 5.1) afin qu'il ne laisse entrer que 300 visiteurs dans la boite de nuit ?   Que faudrait-il ajouter ?",
            "title": "Enonc\u00e9"
        },
        {
            "location": "/algorigrammes/corriges/#solution_3",
            "text": "Pour adapter le videur de base (exemple 5.1) afin qu'il ne laisse entrer que 300 visiteurs dans la boite de nuit, il faudrait :   compter les visiteurs (avec une variable  visiteurs )  ajouter une boucle (qui continue tant que  visiteurs <= 300 )  incr\u00e9menter cette variable \u00e0 chaque tour ( visiteurs <-- visiteurs + 1 )",
            "title": "Solution"
        },
        {
            "location": "/algorigrammes/corriges/#81-videur-sexiste-capacite-maximum",
            "text": "",
            "title": "8.1 : videur sexiste &amp; capacit\u00e9 maximum"
        },
        {
            "location": "/algorigrammes/corriges/#enonce_4",
            "text": "La boite de nuit a une capacit\u00e9 maximum de 300\npersonnes par nuit. Le travail du videur\ns'arr\u00eate lorsque ce nombre d'entr\u00e9es est\natteint.  Sur la base du videur sexiste   :   \u00c9cris en pseudo-code le programme du videur sexiste  capable de capable de tenir compte de la capacit\u00e9 de la boite de nuit (reprise de l'exercice  5.d)  D\u00e9compose le programme  en plusieurs fonctions si possible ;-)",
            "title": "Enonc\u00e9"
        },
        {
            "location": "/algorigrammes/corriges/#solution_4",
            "text": "FIXME",
            "title": "Solution"
        },
        {
            "location": "/algorigrammes/corriges/#82-videur-qui-sennuie",
            "text": "",
            "title": "8.2 - Videur qui s'ennuie"
        },
        {
            "location": "/algorigrammes/corriges/#enonce_5",
            "text": "Un soir, notre videur pr\u00e9f\u00e9r\u00e9 s'ennuie. Pour s'amuser, il d\u00e9cide de faire rentrer 1 personne seule, puis un groupe de 2, puis un groupe de 3, puis de 4, puis de 5... et ainsi de suite.   Quelle serait ta d\u00e9marche  pour conna\u00eetre pour le nombre de personnes entr\u00e9es dans la boite de nuit lorsque le groupe de 5 sera pass\u00e9 ?  \u00c9cris une fonction en pseudo-code  qui d\u00e9termine combien de personnes seront dans la boite de nuit lorsque le groupe de 100 sera rentr\u00e9 ?  Explique comment tu ferais  pour adapter cette fonction pour calculer le nombre de personnes dans la boite apr\u00e8s le groupe de 1000 ?",
            "title": "Enonc\u00e9"
        },
        {
            "location": "/algorigrammes/corriges/#solution_5",
            "text": "FIXME",
            "title": "Solution"
        },
        {
            "location": "/pseudocode/01-pseudocode/",
            "text": "Pseudo-code I\n#\n\n\nExcellent ! Je suis vraiment impressionn\u00e9 par ta motivation. \n\n\n\n\n\nN'emp\u00eache, \u00e0 continuer \u00e0 ce rythme l\u00e0, tu ma\u00eetriseras bient\u00f4t JavaScript ! ...et tu seras certainement en train de jouer (et gagner!) \u00e0 \nCodinGame\n, d\u00e9bugguer du code les yeux ferm\u00e9s... ou d\u00e9velopper \ntes propres applications\n !\n\n\nAlors... on reprend ?\n\n\n\n\nIl est actuellement 17h42 heure locale. \nLa temp\u00e9rature ext\u00e9rieure est de 19\u00b0. \n\nLe commandant de bord et son \u00e9quipage sont heureux d'avoir voyag\u00e9 avec toi sur Algorigrammes CodingLines.\nNous te souhaitons un agr\u00e9able s\u00e9jour en Pseudo-code  !\n\n\n\n\n(Re-)pr\u00e9sentation\n#\n\n\nDans le tout premier chapitre, je t'avais dit que le pseudo-code \u00e9tait une des nombreuses repr\u00e9sentations possible d'un programme. Cette fois, avec le pseudo-code, on va exprimer nos programmes en langue quasi-naturelle, en fran\u00e7ais (mais c'est \u00e9galement possible en toutes les langues). Nous allons donc \u00e9crire des programmes sous forme de textes.\n\n\nCette repr\u00e9sentation a l'avantage d'\u00eatre proche du r\u00e9sultat final tout en \u00e9tant ind\u00e9pendante des difficult\u00e9s ou bugs li\u00e9es \u00e0 la mise en place r\u00e9elle sur un ordinateur ! C'est plut\u00f4t bien pour d\u00e9crire ses id\u00e9es avant de les confronter \u00e0 la r\u00e9alit\u00e9 technique avec un autre langage.\n\n\nComme tu peux t'en douter, contrairement aux algorigrammes, il ne s'agit pas d'une repr\u00e9sentation normalis\u00e9e, mais juste d'une repr\u00e9sentation \npratique \u00e0 griffonner\n sur un bout de feuille, \u00e0 penser, ou \u00e9ventuellement \u00e0 dire \u00e0 l'oral (il te restera \u00e0 trouver le bon interlocuteur ^_^) !  Au final, il y a certainement autant de variantes du pseudo-code que de d\u00e9veloppeurs...\n\n\nEn pseudo-code nous chercherons encore \u00e0 lever toutes les ambigu\u00eft\u00e9s et \u00e0 pr\u00e9ciser tous les concepts que l'on utilise, exactement comme dans les algorigrammes. Nous retrouverons aussi toutes les petites choses auxquelles nous nous sommes progressivement habitu\u00e9es lors des chapitres pr\u00e9c\u00e9dent : variables, instructions conditionnelles, boucles, fonctions... (et votre humble serviteur !) \n\n\nDes algorigrammes au pseudo-code\n#\n\n\nAttend un instant.. si le pseudo-code n'est qu'une \nrepr\u00e9sentation\n parmi d'autres... et si je te dis qu'on va faire comme dans les algorigrammes... Il y aurait donc des \u00e9quivalences entre algorigrammes et pseudo-code ? \n\n\nH\u00e9 oui ! Voyons \u00e7a ...\n\n\nInstructions et structure du programme\n#\n\n\nComme avec les algorigrammes, un programme est constitu\u00e9 d'un d\u00e9but, d'une suites d'instructions et d'une fin. Ces instructions peuvent prendre deux formes : \ninstructions simples\n et \nblocs\n contenant plusieurs instructions.\n\n\nOn lit les instructions dans l'ordre des lignes : pour les instructions simple c'est tout, mais pour les blocs d'instructions, il pourra y avoir des r\u00e8gles particuli\u00e8res pour savoir sur quelle ligne on continue \u00e0 lire le programme.\n\n\n\n\nCommentaires\n#\n\n\nLes commentaires sont des lignes de texte qui n'ont pas de sens du point de vue du programme et qui ne doivent pas \u00eatre prises en compte. C'est un peu comme des annotations qu'on aurait pu faire autour de nos algorigramme pour expliquer telle ou telle partie.\n\n\nNous allons utiliser pour cela le symbole \n//\n . Tout ce qui sera \u00e0 droite de ce symbole sera consid\u00e9r\u00e9 comme un commentaire.\n\n\nINSTRUCTION1\nINSTRUCTION2\n...\n\n// Quatre lignes explicatives qui ne sont pas des instructions\n// et qu'il ne faut donc pas prendre en compte dans le code\n// mais qui peuvent \u00eatre utiles pour comprendre ce qui \n// s'y passe !\nINSTRUCTION31\nINSTRUCTION32\n\n\n\n\n\nD\u00e9claration des variables\n#\n\n\nEn pseudo-code et de nombreux langages de programmation on prendra l'habitude de d\u00e9clarer les variables tout au d\u00e9but du programme. Cela permet au programmeur de savoir qui est chaque variable, et de \ns'engager\n \u00e0 ne l'utiliser que pour la description qui en est faite.\n\n\nDe plus, lorsqu'on utilisera des vrais langages informatiques, cela permettra de demander \u00e0 l'ordinateur de pr\u00e9parer et donner des bouts de m\u00e9moire \u00e0 notre programme : pour les \u00e9tiquettes, pour les cases vis\u00e9es, etc.\n\n\nPROGRAMME monprogramme(...)\n    VARIABLE variable1 : description\n    VARIABLE variable2 : description\n    VARIABLE variable3 : description\n    ...\n\n    INSTRUCTION1\n    INSTRUCTION2\n    ...\n\nFINPROGRAMME\n\n\n\n\n\nAssignation et lecture d'une variable\n#\n\n\nL'utilisation des variables se fait \nexactement\n de la m\u00eame mani\u00e8re en pseudo-code qu'en algorigrammes. La diff\u00e9rence ? Pas besoin de mettre de rectangle autour !\n\n\n\n\nEntr\u00e9es & sorties\n#\n\n\n\n\nStructure conditionnelle\n#\n\n\nLa structure conditionnelle est notre premier bloc d'instructions.\n\n\nAutant dans les algorigrammes, on pouvait suivre les fl\u00e8ches pour choisir le \"bon\" cot\u00e9 du code \u00e0 appliquer, autant en texte il va falloir ruser... puisqu'on ne peut \u00e9crire du code que de haut en bas ! \n\n\nL'astuce est simple : \n\n\n\n\nSi la valeur de \ncondition\n est VRAI, alors on fait les lignes en rouges de la zone en haut (\nINSTRUCTION26 ...\n), \n\n\nSinon c'est que \ncondition\n est FAUX, on ignore la zone en haut pour passer directement aux lignes en rouges de la zone en bas (\nINSTRUCTION26bis ...\n). \n\n\nQuand on a fini les lignes en rouges de la zone choisie, on passe directement aux instructions en bleu qui suivent (\nINSTRUCTION27 ...\n)\n\n\n\n\n\n\nBoucles\n#\n\n\nLes boucles sont \u00e9galement repr\u00e9sent\u00e9es sous forme d'un bloc d'instructions. L\u00e0 aussi il faut ruser pour distinguer ce qui est \ndans\n la boucle de ce qui est \n\u00e0 cot\u00e9\n.\n\n\nDans les chapitres pr\u00e9c\u00e9dents nous avions d\u00e9fini une boucle comme une zone de code r\u00e9p\u00e9t\u00e9e tant qu'une condition valait VRAI, mais nous n'avions pas pr\u00e9cis\u00e9 ou \u00e9tait la zone de code par rapport \u00e0 notre condition ! Nous aurons donc deux fa\u00e7on de repr\u00e9senter les boucles, selon l'organisation de notre programme.\n\n\nBoucles TANTQUE : o\u00f9 l'on teste la condition avant le premier tour\n#\n\n\nDans cette version de la boucle, on choisit de tester la valeur de \ncondition\n avant d'entrer dans la boucle.\n\n\n\n\nSi la valeur est VRAI, on passe aux instructions rouges \nINSTRUCTION 26...\n et suivantes. Quand c'est fait, on recommence \u00e0 la ligne \nTANTQUE (condition) FAIRE\n et on se repose la question de la condition.\n\n\nSi la valeur est FAUX, on ignore les lignes en rouge et on passe directement aux instructions en bleu \nINSTRUCTION27 ...\n et suivantes.\n\n\n\n\n\n\nBoucles FAIRE : o\u00f9 l'on teste la condition apr\u00e8s un premier tour\n#\n\n\nDans cette autre version de la boucle, on rentre directement sur les instructions \nINSTRUCTIONS26...\n. Lorsque c'est fait on tombe sur la condition :\n\n\nDans cette version de la boucle, on choisit de tester la valeur de \ncondition\n avant d'entrer dans la boucle.\n\n\n\n\nSi la valeur est VRAI, on remonte et on repasse par les instructions rouges \nINSTRUCTION 26...\n et suivantes, autant que n\u00e9cessaire.\n\n\nSi la valeur est FAUX, on passe directement aux instructions en bleu \nINSTRUCTION27 ...\n et suivantes.\n\n\n\n\n\n\nFonctions\n#\n\n\nLes fonctions... sont aussi des blocs d'instructions ! \n\n\nOn remarque que dans l'appel et dans d\u00e9finition d'une fonction, on note des param\u00e8tres \u00e0 cot\u00e9 du nom, entre parenth\u00e8ses. Par exemple : \nafficher(mon_texte)\n. \n\n\n\n\nComment utiliser les param\u00e8tres ?\n#\n\n\nAu niveau de la fonction appelante, ce sont les diff\u00e9rentes valeurs  que l'on souhaite transmettre\n \u00e0 la fonction appel\u00e9e. Cela peut \u00eatre directement des valeurs textuelles, num\u00e9riques, etc. (\nafficher(\"Hello world\")\n) ou bien des valeurs lues depuis des variables (\nafficher(salutations)\n).\n\n\nAu niveau de la fonction appel\u00e9e, ces param\u00e8tres sont des variables\n que l'on a pas besoin de d\u00e9clarer \u00e0 l'int\u00e9rieur de la fonction et qui seront initialis\u00e9es \u00e0 aux diff\u00e9rentes valeurs que fournira l'appelant, au moment de l'appel et dans l'ordre des param\u00e8tres indiqu\u00e9s.\n\n\nPar exemple si j'ai la fonction suivante (parfaitement valide) : \n\n\nFONCTION salutation(prenom, age)\n    afficher(\"Salut \" + prenom + \", toi qui a \" + age + \"ans\")\nFINFONCTION\n\n\n\n\n\n\n\nLorsque j'appelerai \nsalutation(\"Anatole\", 52)\n, cela affichera \nSalut Anatole, toi qui a 40 ans\n\n\nLorsque j'appelerai \nsalutation(\"Philemon\", 16)\n, cela affichera \nSalut Philemon, toi qui a 16 ans\n\n\nLorsque j'appelerai \nsalutation(\"Vendredi\", 40)\n, cela affichera \nSalut Vendredi, toi qui a 40 ans\n\n\nEt ainsi de suite... les variables \nprenom\n et \nage\n changent de valeur \u00e0 chaque appel, selon ce qui est pass\u00e9 en param\u00e8tres.\n\n\n\n\nComment utiliser la valeur de retour\n#\n\n\nLa valeur de retour est la valeur que l'on souhaite transmettre de la fonction appel\u00e9e vers la fonction appelante.\n Elle est d\u00e9sign\u00e9e par le mot clef \nRETOURNE\n. \n\n\nDans l'illustration ci-dessus, on voit que cette valeur est lue depuis la variable \ncalcul\n du cot\u00e9 de \nfonction1\n et qu'elle est transmise \u00e0 la fonction appelante \nfonction2\n. Du cot\u00e9 de la fonction appelante, la valeur re\u00e7ue est alors stock\u00e9e dans la variable \nresultat\n. On ne s'int\u00e9resse qu'\u00e0 la valeur et on perd toute trace du fait que cette valeur \u00e9tait associ\u00e9e \u00e0 une autre variable dans le \nmonde parall\u00e8le\n de la fonction \nfonction1\n.\n\n\nAutres d\u00e9tails\n#\n\n\n\u00c9videmment, l'ex\u00e9cution des instructions contenues dans une fonction appel\u00e9e se fait \nuniquement\n au moment ou elle est mentionn\u00e9e (avec ses param\u00e8tres) dans la fonction appelante.\n\n\nD'ailleurs... lorsqu'on y r\u00e9fl\u00e9chit bien... un programme n'est rien de plus qu'une fonction qui serait la premi\u00e8re \u00e0 \u00eatre appel\u00e9 pour l'ex\u00e9cution ! Il appelle lui-m\u00eame d'autres fonctions (qui en appellent \u00e9ventuellement d'autres, etc.) !\n\n\n\n\n\u2014 Et comment savez-vous que vous \u00eates fou ?\n\n\u2014   Pour commencer, dit le Chat, est-ce que tu m\u2019accordes qu\u2019un chien n\u2019est pas fou ?\n\n\u2014   Sans doute.\n\n\u2014   Eh bien, vois-tu, continua le Chat, tu remarqueras qu\u2019un chien gronde lorsqu\u2019il est en col\u00e8re et remue la queue lorsqu\u2019il est content. Or, moi je gronde quand je suis content, et je remue la queue quand je suis en col\u00e8re. Donc, je suis fou.\n\n\nLewis Caroll, Alice au pays des merveilles\n\n\n\n\nConclusion\n#\n\n\nVoil\u00e0, c'est fait ! Les bases sont pos\u00e9es. Nous avons tous les \u00e9l\u00e9ments n\u00e9cessaires pour faire du \nvrai code\n !\n\n\nPour le prochain num\u00e9ro, je te propose de ne pas trop nous attarder sur le pseudo-code et passer tout doucement vers JavaScript. Ce qui nous permettra en plus de voir notre code fonctionner !\n\n\nNous verrons aussi les solutions des exercices, \u00e9videmment.",
            "title": "Pseudocode I"
        },
        {
            "location": "/pseudocode/01-pseudocode/#pseudo-code-i",
            "text": "Excellent ! Je suis vraiment impressionn\u00e9 par ta motivation.    N'emp\u00eache, \u00e0 continuer \u00e0 ce rythme l\u00e0, tu ma\u00eetriseras bient\u00f4t JavaScript ! ...et tu seras certainement en train de jouer (et gagner!) \u00e0  CodinGame , d\u00e9bugguer du code les yeux ferm\u00e9s... ou d\u00e9velopper  tes propres applications  !  Alors... on reprend ?   Il est actuellement 17h42 heure locale. \nLa temp\u00e9rature ext\u00e9rieure est de 19\u00b0.  \nLe commandant de bord et son \u00e9quipage sont heureux d'avoir voyag\u00e9 avec toi sur Algorigrammes CodingLines.\nNous te souhaitons un agr\u00e9able s\u00e9jour en Pseudo-code  !",
            "title": "Pseudo-code I"
        },
        {
            "location": "/pseudocode/01-pseudocode/#re-presentation",
            "text": "Dans le tout premier chapitre, je t'avais dit que le pseudo-code \u00e9tait une des nombreuses repr\u00e9sentations possible d'un programme. Cette fois, avec le pseudo-code, on va exprimer nos programmes en langue quasi-naturelle, en fran\u00e7ais (mais c'est \u00e9galement possible en toutes les langues). Nous allons donc \u00e9crire des programmes sous forme de textes.  Cette repr\u00e9sentation a l'avantage d'\u00eatre proche du r\u00e9sultat final tout en \u00e9tant ind\u00e9pendante des difficult\u00e9s ou bugs li\u00e9es \u00e0 la mise en place r\u00e9elle sur un ordinateur ! C'est plut\u00f4t bien pour d\u00e9crire ses id\u00e9es avant de les confronter \u00e0 la r\u00e9alit\u00e9 technique avec un autre langage.  Comme tu peux t'en douter, contrairement aux algorigrammes, il ne s'agit pas d'une repr\u00e9sentation normalis\u00e9e, mais juste d'une repr\u00e9sentation  pratique \u00e0 griffonner  sur un bout de feuille, \u00e0 penser, ou \u00e9ventuellement \u00e0 dire \u00e0 l'oral (il te restera \u00e0 trouver le bon interlocuteur ^_^) !  Au final, il y a certainement autant de variantes du pseudo-code que de d\u00e9veloppeurs...  En pseudo-code nous chercherons encore \u00e0 lever toutes les ambigu\u00eft\u00e9s et \u00e0 pr\u00e9ciser tous les concepts que l'on utilise, exactement comme dans les algorigrammes. Nous retrouverons aussi toutes les petites choses auxquelles nous nous sommes progressivement habitu\u00e9es lors des chapitres pr\u00e9c\u00e9dent : variables, instructions conditionnelles, boucles, fonctions... (et votre humble serviteur !)",
            "title": "(Re-)pr\u00e9sentation"
        },
        {
            "location": "/pseudocode/01-pseudocode/#des-algorigrammes-au-pseudo-code",
            "text": "Attend un instant.. si le pseudo-code n'est qu'une  repr\u00e9sentation  parmi d'autres... et si je te dis qu'on va faire comme dans les algorigrammes... Il y aurait donc des \u00e9quivalences entre algorigrammes et pseudo-code ?   H\u00e9 oui ! Voyons \u00e7a ...",
            "title": "Des algorigrammes au pseudo-code"
        },
        {
            "location": "/pseudocode/01-pseudocode/#instructions-et-structure-du-programme",
            "text": "Comme avec les algorigrammes, un programme est constitu\u00e9 d'un d\u00e9but, d'une suites d'instructions et d'une fin. Ces instructions peuvent prendre deux formes :  instructions simples  et  blocs  contenant plusieurs instructions.  On lit les instructions dans l'ordre des lignes : pour les instructions simple c'est tout, mais pour les blocs d'instructions, il pourra y avoir des r\u00e8gles particuli\u00e8res pour savoir sur quelle ligne on continue \u00e0 lire le programme.",
            "title": "Instructions et structure du programme"
        },
        {
            "location": "/pseudocode/01-pseudocode/#commentaires",
            "text": "Les commentaires sont des lignes de texte qui n'ont pas de sens du point de vue du programme et qui ne doivent pas \u00eatre prises en compte. C'est un peu comme des annotations qu'on aurait pu faire autour de nos algorigramme pour expliquer telle ou telle partie.  Nous allons utiliser pour cela le symbole  //  . Tout ce qui sera \u00e0 droite de ce symbole sera consid\u00e9r\u00e9 comme un commentaire.  INSTRUCTION1\nINSTRUCTION2\n...\n\n// Quatre lignes explicatives qui ne sont pas des instructions\n// et qu'il ne faut donc pas prendre en compte dans le code\n// mais qui peuvent \u00eatre utiles pour comprendre ce qui \n// s'y passe !\nINSTRUCTION31\nINSTRUCTION32",
            "title": "Commentaires"
        },
        {
            "location": "/pseudocode/01-pseudocode/#declaration-des-variables",
            "text": "En pseudo-code et de nombreux langages de programmation on prendra l'habitude de d\u00e9clarer les variables tout au d\u00e9but du programme. Cela permet au programmeur de savoir qui est chaque variable, et de  s'engager  \u00e0 ne l'utiliser que pour la description qui en est faite.  De plus, lorsqu'on utilisera des vrais langages informatiques, cela permettra de demander \u00e0 l'ordinateur de pr\u00e9parer et donner des bouts de m\u00e9moire \u00e0 notre programme : pour les \u00e9tiquettes, pour les cases vis\u00e9es, etc.  PROGRAMME monprogramme(...)\n    VARIABLE variable1 : description\n    VARIABLE variable2 : description\n    VARIABLE variable3 : description\n    ...\n\n    INSTRUCTION1\n    INSTRUCTION2\n    ...\n\nFINPROGRAMME",
            "title": "D\u00e9claration des variables"
        },
        {
            "location": "/pseudocode/01-pseudocode/#assignation-et-lecture-dune-variable",
            "text": "L'utilisation des variables se fait  exactement  de la m\u00eame mani\u00e8re en pseudo-code qu'en algorigrammes. La diff\u00e9rence ? Pas besoin de mettre de rectangle autour !",
            "title": "Assignation et lecture d'une variable"
        },
        {
            "location": "/pseudocode/01-pseudocode/#entrees-sorties",
            "text": "",
            "title": "Entr\u00e9es &amp; sorties"
        },
        {
            "location": "/pseudocode/01-pseudocode/#structure-conditionnelle",
            "text": "La structure conditionnelle est notre premier bloc d'instructions.  Autant dans les algorigrammes, on pouvait suivre les fl\u00e8ches pour choisir le \"bon\" cot\u00e9 du code \u00e0 appliquer, autant en texte il va falloir ruser... puisqu'on ne peut \u00e9crire du code que de haut en bas !   L'astuce est simple :    Si la valeur de  condition  est VRAI, alors on fait les lignes en rouges de la zone en haut ( INSTRUCTION26 ... ),   Sinon c'est que  condition  est FAUX, on ignore la zone en haut pour passer directement aux lignes en rouges de la zone en bas ( INSTRUCTION26bis ... ).   Quand on a fini les lignes en rouges de la zone choisie, on passe directement aux instructions en bleu qui suivent ( INSTRUCTION27 ... )",
            "title": "Structure conditionnelle"
        },
        {
            "location": "/pseudocode/01-pseudocode/#boucles",
            "text": "Les boucles sont \u00e9galement repr\u00e9sent\u00e9es sous forme d'un bloc d'instructions. L\u00e0 aussi il faut ruser pour distinguer ce qui est  dans  la boucle de ce qui est  \u00e0 cot\u00e9 .  Dans les chapitres pr\u00e9c\u00e9dents nous avions d\u00e9fini une boucle comme une zone de code r\u00e9p\u00e9t\u00e9e tant qu'une condition valait VRAI, mais nous n'avions pas pr\u00e9cis\u00e9 ou \u00e9tait la zone de code par rapport \u00e0 notre condition ! Nous aurons donc deux fa\u00e7on de repr\u00e9senter les boucles, selon l'organisation de notre programme.",
            "title": "Boucles"
        },
        {
            "location": "/pseudocode/01-pseudocode/#boucles-tantque-ou-lon-teste-la-condition-avant-le-premier-tour",
            "text": "Dans cette version de la boucle, on choisit de tester la valeur de  condition  avant d'entrer dans la boucle.   Si la valeur est VRAI, on passe aux instructions rouges  INSTRUCTION 26...  et suivantes. Quand c'est fait, on recommence \u00e0 la ligne  TANTQUE (condition) FAIRE  et on se repose la question de la condition.  Si la valeur est FAUX, on ignore les lignes en rouge et on passe directement aux instructions en bleu  INSTRUCTION27 ...  et suivantes.",
            "title": "Boucles TANTQUE : o\u00f9 l'on teste la condition avant le premier tour"
        },
        {
            "location": "/pseudocode/01-pseudocode/#boucles-faire-ou-lon-teste-la-condition-apres-un-premier-tour",
            "text": "Dans cette autre version de la boucle, on rentre directement sur les instructions  INSTRUCTIONS26... . Lorsque c'est fait on tombe sur la condition :  Dans cette version de la boucle, on choisit de tester la valeur de  condition  avant d'entrer dans la boucle.   Si la valeur est VRAI, on remonte et on repasse par les instructions rouges  INSTRUCTION 26...  et suivantes, autant que n\u00e9cessaire.  Si la valeur est FAUX, on passe directement aux instructions en bleu  INSTRUCTION27 ...  et suivantes.",
            "title": "Boucles FAIRE : o\u00f9 l'on teste la condition apr\u00e8s un premier tour"
        },
        {
            "location": "/pseudocode/01-pseudocode/#fonctions",
            "text": "Les fonctions... sont aussi des blocs d'instructions !   On remarque que dans l'appel et dans d\u00e9finition d'une fonction, on note des param\u00e8tres \u00e0 cot\u00e9 du nom, entre parenth\u00e8ses. Par exemple :  afficher(mon_texte) .",
            "title": "Fonctions"
        },
        {
            "location": "/pseudocode/01-pseudocode/#comment-utiliser-les-parametres",
            "text": "Au niveau de la fonction appelante, ce sont les diff\u00e9rentes valeurs  que l'on souhaite transmettre  \u00e0 la fonction appel\u00e9e. Cela peut \u00eatre directement des valeurs textuelles, num\u00e9riques, etc. ( afficher(\"Hello world\") ) ou bien des valeurs lues depuis des variables ( afficher(salutations) ).  Au niveau de la fonction appel\u00e9e, ces param\u00e8tres sont des variables  que l'on a pas besoin de d\u00e9clarer \u00e0 l'int\u00e9rieur de la fonction et qui seront initialis\u00e9es \u00e0 aux diff\u00e9rentes valeurs que fournira l'appelant, au moment de l'appel et dans l'ordre des param\u00e8tres indiqu\u00e9s.  Par exemple si j'ai la fonction suivante (parfaitement valide) :   FONCTION salutation(prenom, age)\n    afficher(\"Salut \" + prenom + \", toi qui a \" + age + \"ans\")\nFINFONCTION   Lorsque j'appelerai  salutation(\"Anatole\", 52) , cela affichera  Salut Anatole, toi qui a 40 ans  Lorsque j'appelerai  salutation(\"Philemon\", 16) , cela affichera  Salut Philemon, toi qui a 16 ans  Lorsque j'appelerai  salutation(\"Vendredi\", 40) , cela affichera  Salut Vendredi, toi qui a 40 ans  Et ainsi de suite... les variables  prenom  et  age  changent de valeur \u00e0 chaque appel, selon ce qui est pass\u00e9 en param\u00e8tres.",
            "title": "Comment utiliser les param\u00e8tres ?"
        },
        {
            "location": "/pseudocode/01-pseudocode/#comment-utiliser-la-valeur-de-retour",
            "text": "La valeur de retour est la valeur que l'on souhaite transmettre de la fonction appel\u00e9e vers la fonction appelante.  Elle est d\u00e9sign\u00e9e par le mot clef  RETOURNE .   Dans l'illustration ci-dessus, on voit que cette valeur est lue depuis la variable  calcul  du cot\u00e9 de  fonction1  et qu'elle est transmise \u00e0 la fonction appelante  fonction2 . Du cot\u00e9 de la fonction appelante, la valeur re\u00e7ue est alors stock\u00e9e dans la variable  resultat . On ne s'int\u00e9resse qu'\u00e0 la valeur et on perd toute trace du fait que cette valeur \u00e9tait associ\u00e9e \u00e0 une autre variable dans le  monde parall\u00e8le  de la fonction  fonction1 .",
            "title": "Comment utiliser la valeur de retour"
        },
        {
            "location": "/pseudocode/01-pseudocode/#autres-details",
            "text": "\u00c9videmment, l'ex\u00e9cution des instructions contenues dans une fonction appel\u00e9e se fait  uniquement  au moment ou elle est mentionn\u00e9e (avec ses param\u00e8tres) dans la fonction appelante.  D'ailleurs... lorsqu'on y r\u00e9fl\u00e9chit bien... un programme n'est rien de plus qu'une fonction qui serait la premi\u00e8re \u00e0 \u00eatre appel\u00e9 pour l'ex\u00e9cution ! Il appelle lui-m\u00eame d'autres fonctions (qui en appellent \u00e9ventuellement d'autres, etc.) !   \u2014 Et comment savez-vous que vous \u00eates fou ? \n\u2014   Pour commencer, dit le Chat, est-ce que tu m\u2019accordes qu\u2019un chien n\u2019est pas fou ? \n\u2014   Sans doute. \n\u2014   Eh bien, vois-tu, continua le Chat, tu remarqueras qu\u2019un chien gronde lorsqu\u2019il est en col\u00e8re et remue la queue lorsqu\u2019il est content. Or, moi je gronde quand je suis content, et je remue la queue quand je suis en col\u00e8re. Donc, je suis fou.  Lewis Caroll, Alice au pays des merveilles",
            "title": "Autres d\u00e9tails"
        },
        {
            "location": "/pseudocode/01-pseudocode/#conclusion",
            "text": "Voil\u00e0, c'est fait ! Les bases sont pos\u00e9es. Nous avons tous les \u00e9l\u00e9ments n\u00e9cessaires pour faire du  vrai code  !  Pour le prochain num\u00e9ro, je te propose de ne pas trop nous attarder sur le pseudo-code et passer tout doucement vers JavaScript. Ce qui nous permettra en plus de voir notre code fonctionner !  Nous verrons aussi les solutions des exercices, \u00e9videmment.",
            "title": "Conclusion"
        }
    ]
}